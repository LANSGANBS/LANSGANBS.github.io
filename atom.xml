<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LANSGANBS</title>
  
  <subtitle>红叶最多情 一舞寄相思</subtitle>
  <link href="https://www.lansganbs.cn/atom.xml" rel="self"/>
  
  <link href="https://www.lansganbs.cn/"/>
  <updated>2025-01-04T04:52:35.299Z</updated>
  <id>https://www.lansganbs.cn/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>单调栈&amp;单调队列</title>
    <link href="https://www.lansganbs.cn/posts/e9186a1f.html"/>
    <id>https://www.lansganbs.cn/posts/e9186a1f.html</id>
    <published>2025-01-04T04:50:01.000Z</published>
    <updated>2025-01-04T04:52:35.299Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>关于算法竞赛中代码模版的规范化问题</title>
    <link href="https://www.lansganbs.cn/posts/d71d8d32.html"/>
    <id>https://www.lansganbs.cn/posts/d71d8d32.html</id>
    <published>2024-12-31T13:14:13.000Z</published>
    <updated>2025-01-02T01:20:03.039Z</updated>
    
    <content type="html"><![CDATA[<p>在平时写算法的时候看到别人的代码，有的时候代码很短，但是一言难尽；也有的人代码很长，但是却可以看得下去，几乎不影响观感。那么这就引申出一个问题，代码怎么写才能看起来更加的“规范”，“美观”，代码模板怎么写才能够保证“泛用性”，“可读性”。</p><h3 id="代码的格式问题"><a href="#代码的格式问题" class="headerlink" title="代码的格式问题"></a>代码的格式问题</h3><p>代码的基本格式我个人认为需要保证好基本的K&amp;R规范或者BSD规范，之后再这两种规范下进行微调。</p><blockquote><p>K&amp;R规范的明显标志为 左大括号不换行 右大括号和该范围的起始语句列数上持平</p><p>BSD规范的明显标志为 左右大括号全部换行 都和该范围的起始语句列数上持平</p></blockquote><p>具体的K&amp;R规范和BSD规范可以参见如下文章<a href="https://blog.csdn.net/weixin_30741653/article/details/97516375">c语言代码风格</a></p><p>其次看下面两段代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line"></span><br><span class="line">using i64 = long long;</span><br><span class="line">using u64 = unsigned long long;</span><br><span class="line">using u32 = unsigned;</span><br><span class="line">using u128 = unsigned __int128;</span><br><span class="line"></span><br><span class="line">constexpr int inf = 1E9;</span><br><span class="line"></span><br><span class="line">void solve() &#123;</span><br><span class="line">    int n, m;</span><br><span class="line">    std::cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    </span><br><span class="line">    std::vector&lt;int&gt; a(n), b(n), s(n);</span><br><span class="line">    for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">        std::cin &gt;&gt; a[i] &gt;&gt; b[i] &gt;&gt; s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    auto ss = s;</span><br><span class="line">    auto vs = a;</span><br><span class="line">    vs.insert(vs.end(), b.begin(), b.end());</span><br><span class="line">    std::sort(ss.begin(), ss.end());</span><br><span class="line">    std::sort(vs.begin(), vs.end());</span><br><span class="line">    </span><br><span class="line">    vs.erase(std::unique(vs.begin(), vs.end()), vs.end());</span><br><span class="line">    ss.erase(std::unique(ss.begin(), ss.end()), ss.end());</span><br><span class="line">    </span><br><span class="line">    for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">        a[i] = std::lower_bound(vs.begin(), vs.end(), a[i]) - vs.begin();</span><br><span class="line">        b[i] = std::lower_bound(vs.begin(), vs.end(), b[i]) - vs.begin();</span><br><span class="line">        s[i] = std::lower_bound(ss.begin(), ss.end(), s[i]) - ss.begin();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    std::vector&lt;std::vector&lt;int&gt;&gt; q(m);</span><br><span class="line">    for (int i = 0; i &lt; m; i++) &#123;</span><br><span class="line">        int k;</span><br><span class="line">        std::cin &gt;&gt; k;</span><br><span class="line">        q[i].resize(k);</span><br><span class="line">        for (int j = 0; j &lt; k; j++) &#123;</span><br><span class="line">            std::cin &gt;&gt; q[i][j];</span><br><span class="line">            q[i][j]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    const int nv = vs.size();</span><br><span class="line">    const int ns = ss.size();</span><br><span class="line">    </span><br><span class="line">    int maxa = -1;</span><br><span class="line">    </span><br><span class="line">    std::vector&lt;int&gt; L(ns, -inf), R(ns, inf);</span><br><span class="line">    </span><br><span class="line">    std::vector&lt;std::vector&lt;std::array&lt;int, 2&gt;&gt;&gt; ban(ns + 1);</span><br><span class="line">    auto addSeg = [&amp;](int s, int l, int r) &#123;</span><br><span class="line">        ban[s].push_back(&#123;l, r&#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    for (int i = m - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">        for (auto j : q[i]) &#123;</span><br><span class="line">            if (maxa &lt; a[j]) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            R[s[j]] = std::min(R[s[j]], b[j]);</span><br><span class="line">            L[s[j]] = std::max(L[s[j]], maxa + 1);</span><br><span class="line">            if (a[j] &lt; maxa) &#123;</span><br><span class="line">                addSeg(ns, a[j] + 1, maxa);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        for (auto j : q[i]) &#123;</span><br><span class="line">            maxa = std::max(maxa, a[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    std::vector&lt;std::vector&lt;int&gt;&gt; vec(ns);</span><br><span class="line">    for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">        vec[s[i]].push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    for (int i = 0; i &lt; ns; i++) &#123;</span><br><span class="line">        if (L[i] &gt; R[i]) &#123;</span><br><span class="line">            std::cout &lt;&lt; -1 &lt;&lt; &quot;\n&quot;;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    int mina = inf;</span><br><span class="line">    for (int i = 0; i &lt; m; i++) &#123;</span><br><span class="line">        for (auto j : q[i]) &#123;</span><br><span class="line">            if (mina &gt; a[j]) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            if (b[j] &gt; a[j]) &#123;</span><br><span class="line">                addSeg(s[j], a[j] + 1, b[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        for (auto j : q[i]) &#123;</span><br><span class="line">            mina = std::min(mina, a[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    std::vector&lt;bool&gt; can(nv);</span><br><span class="line">    &#123;</span><br><span class="line">        std::vector&lt;int&gt; d(nv);</span><br><span class="line">        for (auto [l, r] : ban[ns]) &#123;</span><br><span class="line">            d[l]++;</span><br><span class="line">            if (r + 1 &lt; nv) &#123;</span><br><span class="line">                d[r + 1]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i = 1; i &lt; nv; i++) &#123;</span><br><span class="line">            d[i] += d[i - 1];</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i = 0; i &lt; nv; i++) &#123;</span><br><span class="line">            can[i] = (d[i] == 0);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    std::vector&lt;int&gt; left(nv, -1);</span><br><span class="line">    for (int i = 0; i &lt; nv; i++) &#123;</span><br><span class="line">        if (i &gt; 0) &#123;</span><br><span class="line">            left[i] = left[i - 1];</span><br><span class="line">        &#125;</span><br><span class="line">        if (can[i]) &#123;</span><br><span class="line">            left[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    std::vector&lt;std::array&lt;int, 2&gt;&gt; ans;</span><br><span class="line">    for (int i = 0; i &lt; ns; i++) &#123;</span><br><span class="line">        if (L[i] &lt; 0) &#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        int lst = -1;</span><br><span class="line">        std::vector&lt;std::array&lt;int, 2&gt;&gt; e;</span><br><span class="line">        for (auto [l, r] : ban[i]) &#123;</span><br><span class="line">            e.push_back(&#123;l - 1, -1&#125;);</span><br><span class="line">            e.push_back(&#123;r, 1&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        std::sort(e.begin(), e.end());</span><br><span class="line">        int sum = 0;</span><br><span class="line">        int val = -1;</span><br><span class="line">        for (auto [x, t] : e) &#123;</span><br><span class="line">            if (sum == 0 &amp;&amp; x &gt;= 0) &#123;</span><br><span class="line">                int u = left[std::min(x, R[i])];</span><br><span class="line">                if (u &gt; lst &amp;&amp; u &gt;= L[i]) &#123;</span><br><span class="line">                    val = u;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            sum += t;</span><br><span class="line">            lst = x;</span><br><span class="line">        &#125;</span><br><span class="line">        if (int u = left[R[i]]; u &gt; lst &amp;&amp; u &gt;= L[i]) &#123;</span><br><span class="line">            val = u;</span><br><span class="line">        &#125;</span><br><span class="line">        if (val == -1) &#123;</span><br><span class="line">            std::cout &lt;&lt; -1 &lt;&lt; &quot;\n&quot;;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        ans.push_back(&#123;vs[val], ss[i]&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    std::vector&lt;int&gt; score(n);</span><br><span class="line">    std::sort(ans.begin(), ans.end());</span><br><span class="line">    std::map&lt;int, int&gt; diff;</span><br><span class="line">    for (auto [d, p] : ans) &#123;</span><br><span class="line">        diff[p] = d;</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">        score[i] += std::lower_bound(ans.begin(), ans.end(), std::array &#123;vs[a[i]] + 1, 0&#125;) - ans.begin();</span><br><span class="line">        if (diff.contains(ss[s[i]])) &#123;</span><br><span class="line">            int x = diff[ss[s[i]]];</span><br><span class="line">            if (vs[a[i]] &lt; x &amp;&amp; x &lt;= vs[b[i]]) &#123;</span><br><span class="line">                score[i]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    int cur = 0;</span><br><span class="line">    std::vector&lt;std::set&lt;int&gt;&gt; set(n + 1);</span><br><span class="line">    for (int i = m - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">        for (auto j : q[i]) &#123;</span><br><span class="line">            int val = -1;</span><br><span class="line">            for (int k = score[j]; k &lt;= score[j] + 1 &amp;&amp; k &lt;= n; k++) &#123;</span><br><span class="line">                auto it = set[k].lower_bound(a[j]);</span><br><span class="line">                if (it != set[k].begin()) &#123;</span><br><span class="line">                    val = std::max(val, *std::prev(it));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (val != -1) &#123;</span><br><span class="line">                int u = left[a[j]];</span><br><span class="line">                if (u &lt;= val) &#123;</span><br><span class="line">                    std::cout &lt;&lt; -1 &lt;&lt; &quot;\n&quot;;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                for (int t = 0; t &lt; 2; t++) &#123;</span><br><span class="line">                    while (std::binary_search(ss.begin(), ss.end(), cur)) &#123;</span><br><span class="line">                        cur++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    ans.push_back(&#123;vs[u], cur&#125;);</span><br><span class="line">                    cur++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        for (auto j : q[i]) &#123;</span><br><span class="line">            set[score[j]].insert(a[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    std::cout &lt;&lt; ans.size() &lt;&lt; &quot;\n&quot;;</span><br><span class="line">    for (auto [d, p] : ans) &#123;</span><br><span class="line">        std::cout &lt;&lt; d &lt;&lt; &quot; &quot; &lt;&lt; p &lt;&lt; &quot;\n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // &#123;</span><br><span class="line">    //     std::vector&lt;int&gt; score(n);</span><br><span class="line">    //     for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">    //         for (auto [d, p] : ans) &#123;</span><br><span class="line">    //             if (vs[a[i]] &gt;= d || (ss[s[i]] == p &amp;&amp; vs[b[i]] &gt;= d)) &#123;</span><br><span class="line">    //                 score[i]++;</span><br><span class="line">    //             &#125;</span><br><span class="line">    //         &#125;</span><br><span class="line">    //     &#125;</span><br><span class="line">    //     for (int i = 0; i &lt; m; i++) &#123;</span><br><span class="line">    //         for (int j = i + 1; j &lt; m; j++) &#123;</span><br><span class="line">    //             for (auto x : q[i]) &#123;</span><br><span class="line">    //                 for (auto y : q[j]) &#123;</span><br><span class="line">    //                     assert(score[x] &gt; score[y]);</span><br><span class="line">    //                 &#125;</span><br><span class="line">    //             &#125;</span><br><span class="line">    //         &#125;</span><br><span class="line">    //     &#125;</span><br><span class="line">    //     assert(!ans.empty());</span><br><span class="line">    //     for (int i = 0; i &lt; ans.size(); i++) &#123;</span><br><span class="line">    //         for (int j = 0; j &lt; i; j++) &#123;</span><br><span class="line">    //             assert(ans[i][1] != ans[j][1]);</span><br><span class="line">    //         &#125;</span><br><span class="line">    //     &#125;</span><br><span class="line">    // &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    std::ios::sync_with_stdio(false);</span><br><span class="line">    std::cin.tie(nullptr);</span><br><span class="line">    </span><br><span class="line">    int t;</span><br><span class="line">    std::cin &gt;&gt; t;</span><br><span class="line">    </span><br><span class="line">    while (t--) &#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"> /*</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">                                                                   || ॐ नमः पार्वती पतये हर हर महादेव || </span><br><span class="line">                                      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀</span><br><span class="line">                                    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣷⣗⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀</span><br><span class="line">                                    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⣠⣾⡿⠁⠈⢓⣟⡢⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀</span><br><span class="line">                                    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣧⠀⠀⠀⠀⠀⣰⣿⠃⠀⠀⠀⠀⢐⣿⣼⠆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀</span><br><span class="line">                                    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣖⡀⠀⠀⠀⠈⠻⢗⣄⠀⢀⣴⣿⠟⠁⠀⠀⠀⠀⠀⢀⣴⡦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀</span><br><span class="line">                                    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⡾⡢⣀⠀⠀⠀⠀⠛⠗⣿⠟⠁⠀⠀⠀⠀⢀⣠⣴⠿⠋⠻⣽⢆⠀⠀⠀⠀⠀⠀⠀⠀</span><br><span class="line">                                    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣝⢷⢦⣤⣠⣀⡀⠀⠁⠀⣀⣀⠀⣄⡶⠟⠋⠀⠀⡀⠀⠈⢻⣷⣄⠀⠀⠀⠀⠀⠀</span><br><span class="line">                                    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⠀⠐⠊⠉⠉⠉⠉⠛⠛⠷⠷⣴⡄⣀⠀⠈⠿⡧⡄⠉⠉⠁⠛⠛⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣾⡿⠋⠀⠀⠀⠀⠀⠀</span><br><span class="line">                                    ⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⣼⠿⠛⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣿⢤⡀⠀⠛⢟⣄⠀⠀⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⢿⡿⠃⠀⠀⠀⠀⠀⠀⠀⠀</span><br><span class="line">                                    ⠀⠀⠀⠀⠀⠀⣤⣾⠟⠉⠀⠀⠀⠀⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢳⡻⡄⠀⠀⠐⠠⠥⣥⣀⣀⣄⣀⣀⣀⣠⣤⣴⠶⣚⠯⠚⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀</span><br><span class="line">                                    ⠀⠀⠀⠀⠀⠀⠈⢿⣧⠀⠀⠀⠀⠀⠀⠀⣀⣠⣤⣤⣦⣤⣄⡁⠠⠀⠀⠀⢳⣻⠀⠀⠀⠀⠀⠀⠈⠉⠉⠛⠛⠋⠉⠁⢀⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀</span><br><span class="line">                                    ⠀⠀⠀⠀⠀⠀⠀⠀⢿⣷⠀⢀⣠⡴⣞⠿⠍⠁⠀⠀⠀⠀⠈⠙⠸⣷⣄⠀⠈⣽⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⡶⠈⠀⠉⠙⠛⠻⣷⣴⡀⡀⠀⠀⠀⠀⠀⠀⠀</span><br><span class="line">                                    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣧⡿⠓⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣾⡆⢨⣽⠃⠀⠀⠀⠀⠀⠀⠀⣠⣾⠟⠁⠀⠀⠂⠀⠀⢀⣀⣄⣉⠻⢾⣷⣄⠀⠀⠀⠀⠀</span><br><span class="line">                                    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣨⡇⣾⡿⠀⠀⠀⠀⠀⠀⢀⣼⡿⠁⠀⠀⠀⠀⢠⣴⣿⠯⠋⠉⠙⠳⠰⣮⣻⣷⡀⠀⠀⠀</span><br><span class="line">                                    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⠟⣼⣿⠁⠀⠀⠀⠀⠀⢠⣾⠟⠀⠀⠀⠀⠀⣴⣿⠟⠀⠀⠀⠀⠀⠀⠀⠈⢿⣿⡷⡀⠀⠀</span><br><span class="line">                                    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣦⡦⣤⣤⣤⣤⠤⠴⠰⠾⠛⢁⣾⡿⠁⠀⠀⠀⠀⠀⢠⣿⠋⠀⠀⠀⠀⠀⣼⡿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣧⡷⣳⠀⠀</span><br><span class="line">                                    ⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠱⣷⡆⠀⠀⠀⠀⠀⢀⣠⢶⡿⠋⠀⠀⠀⠀⠀⠀⣔⡽⠃⠀⠀⠀⠀⠀⣼⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣵⡍⣇⠀</span><br><span class="line">                                    ⢠⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢝⣷⡀⠀⠀⠀⠀⠸⣿⣫⣀⠀⠀⠀⠀⠀⢀⣼⠟⠀⠀⠀⠀⠀⢠⣞⡟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⢹⢾⠀</span><br><span class="line">                                    ⢸⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣾⣇⠀⠀⠀⠀⠀⠀⠉⠙⠻⠷⠲⠖⠾⠛⠁⠀⠀⠀⣀⣠⣞⡷⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⢸⣾⡃</span><br><span class="line">                                    ⢸⣠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠰⣯⠞⠛⠛⠛⠽⠶⣄⢀⡄⠀⠀⣴⢿⠻⠿⠿⠿⠛⠏⠃⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢂⣾⢸⣿⡅</span><br><span class="line">                                    ⢀⣏⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠺⣷⣀⠙⣾⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⠃⢸⣻⠆</span><br><span class="line">                                    ⠈⣿⢾⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⡄⠹⡸⡄⠀⠀⠀⢸⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣿⠏⠀⢾⣿⠀</span><br><span class="line">                                    ⠀⢻⡿⣱⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⡇⠀⣧⣷⠀⠀⠀⢸⣟⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⡿⠋⠀⠀⣇⡏⠀</span><br><span class="line">                                    ⠀⠈⣿⡼⡵⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⠇⠀⢸⢿⠀⠀⠀⣸⣯⢿⣵⣀⣀⠀⠀⠀⠀⠀⢀⢀⣤⣾⠟⠋⠀⠀⠀⣼⣻⠁⠀</span><br><span class="line">                                    ⠀⠀⢸⣯⡝⣮⢣⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⣿⠀⠀⢸⣿⠀⠀⠀⢸⣿⠂⠈⠙⠛⠛⠛⠛⠉⠉⠐⠒⠁⠀⠀⠀⠀⠀⢠⣷⡏⠀⠀</span><br><span class="line">                                    ⠀⠀⠀⢻⣷⡙⢷⢿⢤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⡟⠃⠀⠀⣼⣿⠀⠀⠀⠀⢿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⢿⡞⠁⠀⠀</span><br><span class="line">                                    ⠀⠀⠀⠀⠻⣿⡄⠈⠛⠶⣵⣀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⠾⠛⠁⠀⠂⠀⢀⣷⡏⠀⠀⠀⠀⠈⢻⣷⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡰⣫⠟⠀⠀⠀⠀</span><br><span class="line">                                    ⠀⠀⠀⠀⠀⠙⢿⣦⠀⠀⠈⠘⠙⠻⠟⠿⠷⠒⠚⠙⠁⠀⠈⠁⠀⠀⠀⠀⠀⢀⣾⡿⠀⠀⠀⠀⠀⠀⠀⠙⢿⡶⠠⢀⠀⠀⠀⠀⢀⣀⣄⠀⣠⠚⠁⠀⠀⠀⠀⠀</span><br><span class="line">                                    ⠀⠀⠀⠀⠀⠀⠈⠻⣿⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣿⡟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠒⠻⠿⠿⠛⠛⠉⠐⠁⠀⠀⠀⠀⠀⠀⠀⠀</span><br><span class="line">                                    ⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⢙⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⣠⢞⡵⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀</span><br><span class="line">                                    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠃⠖⠶⣶⣤⣤⡤⢤⣤⡤⠶⠞⠫⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀</span><br><span class="line">                                    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">                                                          ।। ऊँ कृष्णाय वासुदेवाय हरये परमात्मने ।।</span><br><span class="line">                                                          ।। प्रणतः क्लेशनाशाय गोविंदाय नमो नमः ।।</span><br><span class="line"></span><br><span class="line">                                                                  </span><br><span class="line"></span><br><span class="line">                                            ---------------&gt; tiwari ji presents &lt;---------------   </span><br><span class="line"></span><br><span class="line">  “ Mnn boot karega k chor yrr apne se nahi hoga  Just ask 1 question “ Why I started ? “</span><br><span class="line"></span><br><span class="line">    &quot;Countless reasons not to do it, but only one reason to go for it — and that&#x27;s enough.&quot;*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#define ll long long </span><br><span class="line">#define pb push_back</span><br><span class="line">#define pp pop_back()</span><br><span class="line">#define vi vector&lt;ll&gt;</span><br><span class="line">#define tiwari ll t ; cin&gt;&gt;t; while(t--)</span><br><span class="line">#define  loop  for(int i=0;i&lt;n;i++)&#123;cin&gt;&gt;a[i];&#125;</span><br><span class="line">#define  mn ll m,n; cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line">#define  str string s ; cin&gt;&gt;s;</span><br><span class="line">#define str2 string s; cin&gt;&gt;s; string t; cin&gt;&gt;t;</span><br><span class="line">#define  set unordered_set&lt;int&gt;seen;</span><br><span class="line">#define  mii unordered_map&lt;int,int&gt;mp;</span><br><span class="line">#define  mic unordered_map&lt;int ,char&gt;mpp;</span><br><span class="line">#define  mcc unordered_map&lt;char,char&gt;mpc;</span><br><span class="line">#define srt sort(a.begin(),a.end());</span><br><span class="line">#define couta for(auto it:a)&#123;cout&lt;&lt;it&lt;&lt;&quot; &quot;;&#125;</span><br><span class="line">#define bp1 __builtin_popcount</span><br><span class="line">#define bpll __builtin_popcountll</span><br><span class="line">#define countdigits int cg=(int)(log10(n)+1)</span><br><span class="line">#define  surukezero __builtin_clz(a)</span><br><span class="line">#define  lastkezero __builtin_ctz(a)</span><br><span class="line">#define  decimalnumberdega auto number=0bn;</span><br><span class="line">#define  ithbit1haiyanahi if((n&gt;&gt;i)&amp;1)&#123;&#125; </span><br><span class="line">#define last1removekaro n&amp;(n-1)  </span><br><span class="line">#define binaryme bitset&lt;32&gt;(xr).to_string();  </span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">     </span><br><span class="line">     tiwari&#123;</span><br><span class="line"></span><br><span class="line">         int n;</span><br><span class="line">         cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">         vi a(n);</span><br><span class="line">         loop;</span><br><span class="line">         srt;</span><br><span class="line">      </span><br><span class="line">      int ans=0;</span><br><span class="line">         for(int i=0;i&lt;n-1;)&#123;</span><br><span class="line">             if(a[i]==a[i+1])&#123;</span><br><span class="line">                ans=ans+1;</span><br><span class="line">                i=i+2;</span><br><span class="line">             &#125;</span><br><span class="line">             else&#123;</span><br><span class="line">                i++;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* JAB TAK KHUD KUCH NA KAR LO TABTAK DUSRO KO GYAN MAT DO */</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上述两份代码皆选自Codeforces上的正确提交，谁的代码风格更好不言而喻。</p><p>第一份代码出自Jiangly。</p><p>第二份代码充斥了大量的宏定义，字符画，多余的空格，看似意义不明的函数，拥挤的代码…这份代码规范差，起手模板的宏定义可读性差，基本循环语句甚至包含了宏定义，码风极差。</p><h3 id="关于代码的起手"><a href="#关于代码的起手" class="headerlink" title="关于代码的起手"></a>关于代码的起手</h3><p>常见的基础模版大体分为两种</p><ol><li>基本代码模版</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">void solve() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">  ios::sync_with_stdio(false);</span><br><span class="line">  cin.tie(0), cout.tie(0);</span><br><span class="line">  int tt = 1;</span><br><span class="line">  // cin &gt;&gt; tt;</span><br><span class="line">  while (tt--) &#123;</span><br><span class="line">      solve();</span><br><span class="line">  &#125;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>长篇大论的包含宏定义+函数+重载等的模板，如</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">// #include &lt;bits/extc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">// using namespace __gnu_pbds;</span><br><span class="line">#define endl &#x27;\n&#x27;</span><br><span class="line">#define ture true</span><br><span class="line">#define flase false</span><br><span class="line">#define pow power</span><br><span class="line">#define all(x) begin(x), end(x)</span><br><span class="line">#define mem(a, x) memset(a, x, sizeof(a))</span><br><span class="line">#define gcd(a, b) gcdint(a, b)</span><br><span class="line">#define lcm(a, b) (a / gcd(a, b) * b)</span><br><span class="line">#define sz(x) (int)x.size()</span><br><span class="line">#define lowbit(x) (x &amp; -x)</span><br><span class="line">#define pb push_back</span><br><span class="line">#define EPS 1e-7</span><br><span class="line">#define int ll</span><br><span class="line">#define ll long long</span><br><span class="line">#define i64 long long</span><br><span class="line">#define i128 __int128</span><br><span class="line">#define fr first</span><br><span class="line">#define sc second</span><br><span class="line">#define tcT template &lt;class T</span><br><span class="line">#define tcTU tcT, class U</span><br><span class="line"></span><br><span class="line">void unsyncIO() &#123; cin.tie(0)-&gt;sync_with_stdio(0); &#125;</span><br><span class="line">void setPrec() &#123; cout &lt;&lt; fixed &lt;&lt; setprecision(15); &#125;</span><br><span class="line">void setIO() &#123; unsyncIO(), setPrec(); &#125;</span><br><span class="line"></span><br><span class="line">inline int gcdint(int a, int b) &#123; return b ? gcdint(b, a % b) : a; &#125;</span><br><span class="line">inline i128 gcd128(i128 a, i128 b) &#123; return b ? gcd128(b, a % b) : a; &#125;</span><br><span class="line">inline int cdiv(int a, int b) &#123; return a / b + ((a ^ b) &gt; 0 &amp;&amp; a % b); &#125;</span><br><span class="line">inline int fdiv(int a, int b) &#123; return a / b - ((a ^ b) &lt; 0 &amp;&amp; a % b); &#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; using V = vector&lt;T&gt;;</span><br><span class="line">tcTU &gt; using PR = pair&lt;T, U&gt;;</span><br><span class="line">tcTU &gt; using MP = map&lt;T, U&gt;;</span><br><span class="line">tcTU &gt; using VP = vector&lt;pair&lt;T, U&gt;&gt;;</span><br><span class="line">tcT &gt; using pqg = priority_queue&lt;T, vector&lt;T&gt;, greater&lt;T&gt;&gt;;</span><br><span class="line">tcT &gt; using pql = priority_queue&lt;T, vector&lt;T&gt;, less&lt;T&gt;&gt;;</span><br><span class="line"></span><br><span class="line">tcTU &gt; istream &amp;operator&gt;&gt;(istream &amp;in, pair&lt;T, U&gt; &amp;a) &#123;</span><br><span class="line">  return in &gt;&gt; a.first &gt;&gt; a.second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; istream &amp;operator&gt;&gt;(istream &amp;in, vector&lt;T&gt; &amp;a) &#123;</span><br><span class="line">  for (auto &amp;x : a) &#123;</span><br><span class="line">    in &gt;&gt; x;</span><br><span class="line">  &#125;</span><br><span class="line">  return in;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; ostream &amp;operator&lt;&lt;(ostream &amp;out, const pair&lt;T, U&gt; &amp;a) &#123;</span><br><span class="line">  return out &lt;&lt; a.first &lt;&lt; &#x27; &#x27; &lt;&lt; a.second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; ostream &amp;operator&lt;&lt;(ostream &amp;out, const vector&lt;pair&lt;T, U&gt;&gt; &amp;a) &#123;</span><br><span class="line">  for (auto &amp;x : a) &#123;</span><br><span class="line">    out &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  return out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; ostream &amp;operator&lt;&lt;(ostream &amp;out, const vector&lt;T&gt; &amp;a) &#123;</span><br><span class="line">  int n = a.size();</span><br><span class="line">  if (!n) &#123;</span><br><span class="line">    return out;</span><br><span class="line">  &#125;</span><br><span class="line">  out &lt;&lt; a[0];</span><br><span class="line">  for (int i = 1; i &lt; n; i++) &#123;</span><br><span class="line">    out &lt;&lt; &#x27; &#x27; &lt;&lt; a[i];</span><br><span class="line">  &#125;</span><br><span class="line">  return out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::ostream &amp;operator&lt;&lt;(std::ostream &amp;os, i128 n) &#123;</span><br><span class="line">  std::string s;</span><br><span class="line">  while (n) &#123;</span><br><span class="line">    s += &#x27;0&#x27; + n % 10;</span><br><span class="line">    n /= 10;</span><br><span class="line">  &#125;</span><br><span class="line">  std::reverse(s.begin(), s.end());</span><br><span class="line">  return os &lt;&lt; s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline int power(int a, i64 b, int p = 1e9 + 7) &#123;</span><br><span class="line">  int res = 1;</span><br><span class="line">  for (; b; b /= 2, a = 1LL * a * a % p) &#123;</span><br><span class="line">    if (b % 2) &#123;</span><br><span class="line">      res = 1LL * res * a % p;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; bool ckmin(T &amp;a, const T &amp;b) &#123; return b &lt; a ? a = b, 1 : 0; &#125;</span><br><span class="line">tcT &gt; bool ckmax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; void remDup(vector&lt;T&gt; &amp;v) &#123;</span><br><span class="line">  sort(all(v));</span><br><span class="line">  v.erase(unique(all(v)), end(v));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; void erase(T &amp;t, const U &amp;u) &#123;</span><br><span class="line">  auto it = t.find(u);</span><br><span class="line">  assert(it != end(t));</span><br><span class="line">  t.erase(it);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; T fstTrue(T lo, T hi, U f) &#123;</span><br><span class="line">  hi++;</span><br><span class="line">  assert(lo &lt;= hi);</span><br><span class="line">  while (lo &lt; hi) &#123;</span><br><span class="line">    T mid = lo + (hi - lo) / 2;</span><br><span class="line">    f(mid) ? hi = mid : lo = mid + 1;</span><br><span class="line">  &#125;</span><br><span class="line">  return lo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; T lstTrue(T lo, T hi, U f) &#123;</span><br><span class="line">  lo--;</span><br><span class="line">  assert(lo &lt;= hi);</span><br><span class="line">  while (lo &lt; hi) &#123;</span><br><span class="line">    T mid = lo + (hi - lo + 1) / 2;</span><br><span class="line">    f(mid) ? lo = mid : hi = mid - 1;</span><br><span class="line">  &#125;</span><br><span class="line">  return lo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">constexpr int mod = 1e9 + 7;</span><br><span class="line">constexpr int inf = 0x7fffffff;</span><br><span class="line">constexpr int N = 1.01e6;</span><br><span class="line">constexpr int M = 2.01e3;</span><br><span class="line"></span><br><span class="line">#ifdef LOCAL</span><br><span class="line">#include &lt;C:/Users/70510/Desktop/Others/algo/debug.h&gt;</span><br><span class="line">#else</span><br><span class="line">#define debug(...) 42</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">void solve() &#123;&#125;</span><br><span class="line"></span><br><span class="line">signed main() &#123;</span><br><span class="line">  setIO();</span><br><span class="line">  int tt = 1;</span><br><span class="line">  // cin &gt;&gt; tt;</span><br><span class="line">  while (tt--) &#123;</span><br><span class="line">    solve();</span><br><span class="line">  &#125;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面就是我的代码模板，我在此要强调的是，模板长≠模板冗长。</p><p>第一份代码简洁，我也推荐大家写这种代码，但是实际写下来肯定是不如第二份舒服。</p><p>第二份代码包含了大量的宏定义等行为，但是每一段定义做了区域性的划分</p><ul><li>最初的#define保证了基本的可移植性 一直到自己的代码中如果有相关宏定义的话可能根本不报错</li><li>之后的函数是关于关闭流同步，基本短代码函数重载</li><li>之后的using使用template&lt;class *T*&gt;来定义部分STL容器，摒弃大量的vi，vii，pi，vpii等过长定义</li><li>重载部分STL的输入输出流以及int128定义，这里将重载运算符相关的代码放在了一起</li><li>接下来重载power函数，对基础pow进行直接加速</li><li>然后用template&lt;class *T*&gt;定义另一部分基本函数，取最大最小值赋值&#x2F;二分&#x2F;去重等函数</li><li>然后constexpr最常使用的四个int常量</li><li>引入本地debug.h</li><li>最后的主体代码</li></ul><p>整体看下来，代码虽然很长，但基本逻辑是非常清晰的，对每一部分都进行了划分。现在的大多数橙名，红名以下选手的代码模板基本都是一通乱写，不知所云，这也是灰名和红名之间的差距，代码的可读性都是大大不同。</p><p>这里我的模板主要是从以下代码吸收而来，并借鉴了其良好的代码分区原则</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">/////////////////////// MACROS ////////////////////////////////////////////</span><br><span class="line">using ll = long long;</span><br><span class="line">using ld = long double;</span><br><span class="line">using db = double;</span><br><span class="line">using str = string;</span><br><span class="line"></span><br><span class="line">using pi = pair&lt;int, int&gt;;</span><br><span class="line">using pl = pair&lt;ll, ll&gt;;</span><br><span class="line"></span><br><span class="line">using vi = vector&lt;int&gt;;</span><br><span class="line">using vl = vector&lt;ll&gt;;</span><br><span class="line">using vs = vector&lt;str&gt;;</span><br><span class="line">using vc = vector&lt;char&gt;;</span><br><span class="line">using vpi = vector&lt;pi&gt;;</span><br><span class="line">using vpl = vector&lt;pl&gt;;</span><br><span class="line"></span><br><span class="line">#define tcT template &lt;class T</span><br><span class="line">#define tcTU tcT, class U</span><br><span class="line">tcT &gt; using V = vector&lt;T&gt;;</span><br><span class="line">tcT, size_t SZ &gt; using AR = array&lt;T, SZ&gt;;</span><br><span class="line">tcTU &gt; using PR = pair&lt;T, U&gt;;</span><br><span class="line">tcTU &gt; using umap = unordered_map&lt;T, U&gt;;</span><br><span class="line">tcT &gt; using uset = unordered_set&lt;T&gt;;</span><br><span class="line">tcT &gt; using mset = multiset&lt;T&gt;;</span><br><span class="line"></span><br><span class="line">#define mp make_pair</span><br><span class="line">#define f first</span><br><span class="line">#define s second</span><br><span class="line"></span><br><span class="line">#define sz(x) int((x).size())</span><br><span class="line">#define all(x) x.begin(), x.end()</span><br><span class="line">#define rall(x) x.rbegin(), x.rend()</span><br><span class="line">#define rsz resize</span><br><span class="line">#define ins insert</span><br><span class="line">#define ft front()</span><br><span class="line">#define bk back()</span><br><span class="line">#define ppb pop_back()</span><br><span class="line">#define ppf pop_front()</span><br><span class="line">#define pb push_back</span><br><span class="line">#define eb emplace_back</span><br><span class="line">#define pf push_front</span><br><span class="line"></span><br><span class="line">#define lb lower_bound</span><br><span class="line">#define ub upper_bound</span><br><span class="line"></span><br><span class="line">// LOOPS</span><br><span class="line">#define FOR(i, a, b) for (int i = (a); i &lt; (b); ++i)</span><br><span class="line">#define F0R(i, a) FOR(i, 0, a)</span><br><span class="line">#define ROF(i, a, b) for (int i = (b) - 1; i &gt;= (a); --i)</span><br><span class="line">#define R0F(i, a) ROF(i, 0, a)</span><br><span class="line">#define rep(a) F0R(_, a)</span><br><span class="line">#define each(a, x) for (auto&amp; a : x)</span><br><span class="line"></span><br><span class="line">/////////////////////// IMPORANT VARS /////////////////////////////////////</span><br><span class="line"></span><br><span class="line">const int MOD = 1e9 + 7;  // 998244353;</span><br><span class="line">const int MX = 2e5 + 5;</span><br><span class="line">const ll INFL = ll(3e18) + 10;</span><br><span class="line">const int INF = int(1e9) + 10;</span><br><span class="line">const ld PI = acos((ld)-1);</span><br><span class="line">const int dx[4] = &#123;1, 0, -1, 0&#125;, dy[4] = &#123;0, 1, 0, -1&#125;;</span><br><span class="line">tcT &gt; using pqg = priority_queue&lt;T, vector&lt;T&gt;, greater&lt;T&gt;&gt;;</span><br><span class="line">tcT &gt; using pql = priority_queue&lt;T, vector&lt;T&gt;, less&lt;T&gt;&gt;;</span><br><span class="line">mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());</span><br><span class="line">#define nl &#x27;\n&#x27;</span><br><span class="line"></span><br><span class="line">constexpr int pct(int x) &#123; return __builtin_popcount(x); &#125;  // # of bits set</span><br><span class="line">constexpr int bits(int x) &#123; return x == 0 ? 0 : 31 - __builtin_clz(x); &#125;</span><br><span class="line">constexpr int p2(int x) &#123; return 1 &lt;&lt; x; &#125;</span><br><span class="line">constexpr int msk2(int x) &#123; return p2(x) - 1; &#125;</span><br><span class="line"></span><br><span class="line">ll cdiv(ll a, ll b) &#123;</span><br><span class="line">  return a / b + ((a ^ b) &gt; 0 &amp;&amp; a % b);</span><br><span class="line">&#125;  // divide a by b rounded up</span><br><span class="line">ll fdiv(ll a, ll b) &#123;</span><br><span class="line">  return a / b - ((a ^ b) &lt; 0 &amp;&amp; a % b);</span><br><span class="line">&#125;  // divide a by b rounded down</span><br><span class="line"></span><br><span class="line">tcT &gt; bool ckmin(T&amp; a, const T&amp; b) &#123;</span><br><span class="line">  return b &lt; a ? a = b, 1 : 0;</span><br><span class="line">&#125;  // set a = min(a,b)</span><br><span class="line">tcT &gt; bool ckmax(T&amp; a, const T&amp; b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; T fstTrue(T lo, T hi, U f) &#123;</span><br><span class="line">  hi++;</span><br><span class="line">  assert(lo &lt;= hi);  // assuming f is increasing</span><br><span class="line">  while (lo &lt; hi) &#123;  // find first index such that f is true</span><br><span class="line">    T mid = lo + (hi - lo) / 2;</span><br><span class="line">    f(mid) ? hi = mid : lo = mid + 1;</span><br><span class="line">  &#125;</span><br><span class="line">  return lo;</span><br><span class="line">&#125;</span><br><span class="line">tcTU &gt; T lstTrue(T lo, T hi, U f) &#123;</span><br><span class="line">  lo--;</span><br><span class="line">  assert(lo &lt;= hi);  // assuming f is decreasing</span><br><span class="line">  while (lo &lt; hi) &#123;  // find last index such that f is true</span><br><span class="line">    T mid = lo + (hi - lo + 1) / 2;</span><br><span class="line">    f(mid) ? lo = mid : hi = mid - 1;</span><br><span class="line">  &#125;</span><br><span class="line">  return lo;</span><br><span class="line">&#125;</span><br><span class="line">tcT &gt; void remDup(vector&lt;T&gt;&amp; v) &#123;  // sort and remove duplicates</span><br><span class="line">  sort(all(v));</span><br><span class="line">  v.erase(unique(all(v)), end(v));</span><br><span class="line">&#125;</span><br><span class="line">tcTU &gt; void erase(T&amp; t, const U&amp; u) &#123;  // don&#x27;t erase</span><br><span class="line">  auto it = t.find(u);</span><br><span class="line">  assert(it != end(t));</span><br><span class="line">  t.erase(it);</span><br><span class="line">&#125;  // element that doesn&#x27;t exist from (multi)set</span><br><span class="line"></span><br><span class="line">// #include &lt;ext/pb_ds/assoc_container.hpp&gt;</span><br><span class="line">// using namespace __gnu_pbds;</span><br><span class="line"></span><br><span class="line">// tcT&gt; using iset = tree&lt;T, null_type, less&lt;T&gt;, rb_tree_tag,</span><br><span class="line">// tree_order_statistics_node_update&gt;; #define ook order_of_key #define fbo</span><br><span class="line">// find_by_order</span><br><span class="line"></span><br><span class="line">// struct chash &#123;</span><br><span class="line">// const uint64_t C = ll(2e18*PI)+71;</span><br><span class="line">// const int RANDOM = rng();</span><br><span class="line">// ll operator()(ll x) const &#123;</span><br><span class="line">// return __builtin_bswap64((x^RANDOM)*C); &#125;</span><br><span class="line">// &#125;;</span><br><span class="line"></span><br><span class="line">// struct splitmix64_hash &#123;</span><br><span class="line">// static uint64_t splitmix64(uint64_t x) &#123;</span><br><span class="line">// // http://xorshift.di.unimi.it/splitmix64.c</span><br><span class="line">// x += 0x9e3779b97f4a7c15;</span><br><span class="line">// x = (x ^ (x &gt;&gt; 30)) * 0xbf58476d1ce4e5b9;</span><br><span class="line">// x = (x ^ (x &gt;&gt; 27)) * 0x94d049bb133111eb;</span><br><span class="line">// return x ^ (x &gt;&gt; 31);</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">// size_t operator()(uint64_t x) const &#123;</span><br><span class="line">// static const uint64_t FIXED_RANDOM =</span><br><span class="line">// std::chrono::steady_clock::now().time_since_epoch().count();</span><br><span class="line">// return splitmix64(x + FIXED_RANDOM);</span><br><span class="line">// &#125;</span><br><span class="line">// &#125;;</span><br><span class="line"></span><br><span class="line">// template&lt;class K,class V&gt; using um = unordered_map&lt;K,V,chash&gt;;</span><br><span class="line">// template&lt;class K,class V&gt; using ht = gp_hash_table&lt;K,V,chash&gt;;</span><br><span class="line">// template&lt;class K,class V&gt; V get(ht&lt;K,V&gt;&amp; u, K x) &#123;</span><br><span class="line">// auto it = u.find(x); return it == end(u) ? 0 : it-&gt;s; &#125;</span><br><span class="line"></span><br><span class="line">/////////////////////// OUPUT /////////////////////////////////////////////</span><br><span class="line">#define ts to_string</span><br><span class="line">str ts(char c) &#123; return str(1, c); &#125;</span><br><span class="line">str ts(const char* s) &#123; return (str)s; &#125;</span><br><span class="line">str ts(str s) &#123; return s; &#125;</span><br><span class="line">str ts(bool b) &#123;</span><br><span class="line">#ifdef LOCAL</span><br><span class="line">  return b ? &quot;true&quot; : &quot;false&quot;;</span><br><span class="line">#else</span><br><span class="line">  return ts((int)b);</span><br><span class="line">#endif</span><br><span class="line">&#125;</span><br><span class="line">tcTU &gt; str ts(pair&lt;T, U&gt; p) &#123;</span><br><span class="line">#ifdef LOCAL</span><br><span class="line">  return &quot;(&quot; + ts(p.f) + &quot;, &quot; + ts(p.s) + &quot;)&quot;;</span><br><span class="line">#else</span><br><span class="line">  return ts(p.f) + &quot; &quot; + ts(p.s);</span><br><span class="line">#endif</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; str ts(V&lt;pair&lt;T, U&gt;&gt; v) &#123;</span><br><span class="line">#ifdef LOCAL</span><br><span class="line">  bool fst = 1;</span><br><span class="line">  str res = &quot;&#123;&quot;;</span><br><span class="line">  for (const auto&amp; x : v) &#123;</span><br><span class="line">    if (!fst) res += &quot;, &quot;;</span><br><span class="line">    fst = 0;</span><br><span class="line">    res += ts(x);</span><br><span class="line">  &#125;</span><br><span class="line">  res += &quot;&#125;&quot;;</span><br><span class="line">  return res;</span><br><span class="line">#else</span><br><span class="line">  bool fst = 1;</span><br><span class="line">  str res = &quot;&quot;;</span><br><span class="line">  for (const auto&amp; x : v) &#123;</span><br><span class="line">    if (!fst) res += &quot; &quot;;</span><br><span class="line">    fst = 0;</span><br><span class="line">    res += ts(x);</span><br><span class="line">  &#125;</span><br><span class="line">  return res;</span><br><span class="line">#endif</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; str ts(T v) &#123;</span><br><span class="line">#ifdef LOCAL</span><br><span class="line">  bool fst = 1;</span><br><span class="line">  str res = &quot;&#123;&quot;;</span><br><span class="line">  for (const auto&amp; x : v) &#123;</span><br><span class="line">    if (!fst) res += &quot;, &quot;;</span><br><span class="line">    fst = 0;</span><br><span class="line">    res += ts(x);</span><br><span class="line">  &#125;</span><br><span class="line">  res += &quot;&#125;&quot;;</span><br><span class="line">  return res;</span><br><span class="line">#else</span><br><span class="line">  bool fst = 1;</span><br><span class="line">  str res = &quot;&quot;;</span><br><span class="line">  for (const auto&amp; x : v) &#123;</span><br><span class="line">    if (!fst) res += &quot; &quot;;</span><br><span class="line">    fst = 0;</span><br><span class="line">    res += ts(x);</span><br><span class="line">  &#125;</span><br><span class="line">  return res;</span><br><span class="line"></span><br><span class="line">#endif</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">///////////////////////// DEBUG ///////////////////////////////////////////</span><br><span class="line">#define tcTUU tcT, class... U</span><br><span class="line">void DBG() &#123; cerr &lt;&lt; &quot;]&quot; &lt;&lt; &quot;\e[0m&quot; &lt;&lt; endl; &#125;</span><br><span class="line">tcTUU &gt; void DBG(const T&amp; t, const U&amp;... u) &#123;</span><br><span class="line">  cerr &lt;&lt; ts(t);</span><br><span class="line">  if (sizeof...(u)) cerr &lt;&lt; &quot;, &quot;;</span><br><span class="line">  DBG(u...);</span><br><span class="line">&#125;</span><br><span class="line">#ifdef LOCAL</span><br><span class="line">#define dbg(...)                                                     \</span><br><span class="line">  cerr &lt;&lt; &quot;\e[1m&quot; &lt;&lt; &quot;Line(&quot; &lt;&lt; __LINE__ &lt;&lt; &quot;) -&gt; [&quot; &lt;&lt; #__VA_ARGS__ \</span><br><span class="line">       &lt;&lt; &quot;]: [&quot;,                                                    \</span><br><span class="line">      DBG(__VA_ARGS__);</span><br><span class="line">#define asrt(...)                                                   \</span><br><span class="line">  if (!(__VA_ARGS__))                                               \</span><br><span class="line">    cerr &lt;&lt; &quot;Line(&quot; &lt;&lt; __LINE__ &lt;&lt; &quot;) -&gt; function(&quot; &lt;&lt; __FUNCTION__ \</span><br><span class="line">         &lt;&lt; &quot;) -&gt; CHK FAILED: (&quot; &lt;&lt; #__VA_ARGS__ &lt;&lt; &quot;)&quot; &lt;&lt; &quot;\n&quot;,    \</span><br><span class="line">        exit(0);</span><br><span class="line">#else</span><br><span class="line">#define dbg(...) 0</span><br><span class="line">#define asrt(...) 0</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">///////////////////////// FILE I/O ////////////////////////////////////////</span><br><span class="line">void unsyncIO() &#123; cin.tie(0)-&gt;sync_with_stdio(0); &#125;</span><br><span class="line">void setPrec() &#123; cout &lt;&lt; fixed &lt;&lt; setprecision(15); &#125;</span><br><span class="line">void setIn(str s) &#123; freopen(s.c_str(), &quot;r&quot;, stdin); &#125;</span><br><span class="line">void setOut(str s) &#123; freopen(s.c_str(), &quot;w&quot;, stdout); &#125;</span><br><span class="line">void setIO(str s = &quot;&quot;) &#123;</span><br><span class="line">  unsyncIO();</span><br><span class="line">  setPrec();</span><br><span class="line">#ifndef LOCAL</span><br><span class="line">  if (sz(s)) setIn(s + &quot;.in&quot;), setOut(s + &quot;.out&quot;);  // for USACO</span><br><span class="line">#endif</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">///////////////////////// TEMPLATE ABOVE //////////////////////////////////</span><br><span class="line"></span><br><span class="line">// REMEMBER</span><br><span class="line">// - Don&#x27;t Focus On Only One Approach</span><br><span class="line">// - Read And Understand Problem Fully</span><br><span class="line">// - Think Of Edges Cases</span><br><span class="line">// - Implement Carefully</span><br><span class="line">// - Always Check For Overflows</span><br><span class="line">// - Reset Global Variables</span><br><span class="line">// - Look At The Bigger Picture</span><br><span class="line">// - Don&#x27;t Get Discouraged, You Can Pull It Back</span><br><span class="line"></span><br><span class="line">void solve() &#123;&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">  setIO();</span><br><span class="line"></span><br><span class="line">  int TT = 1;</span><br><span class="line">  // cin &gt;&gt; TT;</span><br><span class="line"></span><br><span class="line">  rep(TT) solve();</span><br><span class="line"></span><br><span class="line">  exit(0 - 0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这份代码由橙名所写，我个人认为，如果可读性是比较良好，并且非常值得借鉴的代码。</p><p>这里随机粘贴一位灰名选手的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br></pre></td><td class="code"><pre><span class="line">//JAI SHREE RAM</span><br><span class="line">    #include&lt;bits/stdc++.h&gt;</span><br><span class="line">    #include&lt;ext/pb_ds/assoc_container.hpp&gt;</span><br><span class="line">    #include&lt;ext/pb_ds/tree_policy.hpp&gt;</span><br><span class="line">    using namespace std;</span><br><span class="line">    using namespace std::chrono;</span><br><span class="line">    #define ll long long </span><br><span class="line">    using namespace __gnu_pbds;</span><br><span class="line">    typedef tree&lt;ll int,null_type,less_equal&lt;ll int&gt;,rb_tree_tag,tree_order_statistics_node_update&gt; pbds;// find_by_order, order_of_key</span><br><span class="line">    //for different comparator use greater instead of less</span><br><span class="line">    void myerase(pbds &amp;t, ll int v)&#123;</span><br><span class="line">        ll int rank = t.order_of_key(v);//Number of elements that are less than v in t</span><br><span class="line">        pbds::iterator it = t.find_by_order(rank); //Iterator that points to the (rank+1)th element in t</span><br><span class="line">        t.erase(it);</span><br><span class="line">    &#125;</span><br><span class="line">    #define print_vector(v); for(int i=0;i&lt;v.size();i++)&#123;cout&lt;&lt;v[i]&lt;&lt;&quot; &quot;;&#125;cout&lt;&lt;endl;</span><br><span class="line">    ll int MOD1=1000000007;</span><br><span class="line">    ll int power_x_y(ll int x, ll int y)//logy time complexity//binary exponentiation</span><br><span class="line">    &#123;</span><br><span class="line">        ll int temp;</span><br><span class="line">        if (y == 0)</span><br><span class="line">            return 1;</span><br><span class="line">        temp = power_x_y(x, y / 2);</span><br><span class="line">        if (y % 2 == 0)</span><br><span class="line">            return (((temp)) * ((temp)));</span><br><span class="line">        else</span><br><span class="line">            return (((x)) *((temp)) * ((temp)));</span><br><span class="line">    &#125;</span><br><span class="line">    ll int power_x_y_p(ll int x, ll int y,ll int p)//logy time complexity//binary exponentiation</span><br><span class="line">    &#123;</span><br><span class="line">        ll int temp;</span><br><span class="line">        if (y == 0)</span><br><span class="line">            return 1;</span><br><span class="line">        temp = power_x_y_p(x, y / 2,p)%p;</span><br><span class="line">        if (y % 2 == 0)</span><br><span class="line">            return (((temp%p)) * ((temp%p)))%p;</span><br><span class="line">        else</span><br><span class="line">            return ((((x%p) *(temp%p))%p) * (temp%p))%p;</span><br><span class="line">    &#125;    </span><br><span class="line">    //for 8 it will return 1000</span><br><span class="line">    vector&lt;ll int&gt; binary_representation(ll int n)&#123;</span><br><span class="line">        vector&lt;ll int &gt;v;</span><br><span class="line">        while(n&gt;0)&#123;</span><br><span class="line">            v.push_back(n%2);</span><br><span class="line">            n/=2;</span><br><span class="line">        &#125;</span><br><span class="line">        reverse(v.begin(),v.end());</span><br><span class="line">        return v;</span><br><span class="line">    &#125;</span><br><span class="line">    void divisors(ll int n,vector&lt;ll int&gt;&amp;v)&#123;</span><br><span class="line">        for(ll int i=1;i&lt;=sqrt(n);i++)&#123;</span><br><span class="line">            if(n%i==0)&#123; </span><br><span class="line">                v.push_back(i);</span><br><span class="line">                if(n/i!=n and n/i!=i)&#123;</span><br><span class="line">                    v.push_back(n/i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(n!=1)v.push_back(n);</span><br><span class="line">        sort(v.begin(),v.end());</span><br><span class="line">    &#125;</span><br><span class="line">    void generate_all_k_length_subsequences_of_s(ll int index,string s,vector&lt;string&gt;&amp;storage,ll int k,string curr)&#123;</span><br><span class="line">        if(curr.size()==k)&#123;storage.push_back(curr);return;&#125;</span><br><span class="line">        if(index==s.size()) return ;</span><br><span class="line">        //not pick</span><br><span class="line">        generate_all_k_length_subsequences_of_s(index+1,s,storage,k,curr);</span><br><span class="line">        //pick</span><br><span class="line">        curr.push_back(s[index]);</span><br><span class="line">        generate_all_k_length_subsequences_of_s(index+1,s,storage,k,curr);</span><br><span class="line">        curr.pop_back();</span><br><span class="line">        return;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    void generate_all_subsets_of_s(ll int index,string s,vector&lt;string&gt;&amp;storage,string curr)&#123;</span><br><span class="line">        if(index==s.size())&#123;storage.push_back(curr);return;&#125;</span><br><span class="line">        //not pick</span><br><span class="line">        generate_all_subsets_of_s(index+1,s,storage,curr);</span><br><span class="line">        //pick</span><br><span class="line">        curr.push_back(s[index]);</span><br><span class="line">        generate_all_subsets_of_s(index+1,s,storage,curr);</span><br><span class="line">        curr.pop_back();</span><br><span class="line">        return;</span><br><span class="line"></span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">     </span><br><span class="line">    // Returns n^(-1) mod p</span><br><span class="line">    unsigned long long modInverse(unsigned long long n,  ll int p)</span><br><span class="line">    &#123;</span><br><span class="line">        return power_x_y_p(n, p - 2, p);</span><br><span class="line">    &#125;</span><br><span class="line">    unsigned long long nCrModPFermat( long long n,ll int r, ll int p)   //time taken by all the functions involved=O(n + logp)</span><br><span class="line">    &#123;</span><br><span class="line">        if (n &lt; r)</span><br><span class="line">            return 0;</span><br><span class="line">        if (r == 0)</span><br><span class="line">            return 1;</span><br><span class="line">        //fest calculation of the three fact values in one go</span><br><span class="line">        unsigned long long fac[n + 1];</span><br><span class="line">        fac[0] = 1;</span><br><span class="line">        for (int i = 1; i &lt;= n; i++)</span><br><span class="line">            fac[i] = (fac[i - 1] * i) % p;</span><br><span class="line">        return (((fac[n] * modInverse(fac[r], p)) % p)* (modInverse(fac[n - r], p) % p))% p;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">ll int getHighestSetBit(ll int n) &#123;</span><br><span class="line">    if (n == 0) return -1;</span><br><span class="line">    int position = 0;</span><br><span class="line">    </span><br><span class="line">    while (n &gt; 1) &#123; // Continue until n reduces to 1</span><br><span class="line">        n &gt;&gt;= 1;    // Right shift the number by 1</span><br><span class="line">        position++; // Increment the position counter</span><br><span class="line">    &#125;</span><br><span class="line">    return position; // Return the position of the highest set bit</span><br><span class="line">&#125;</span><br><span class="line">    bool isPrime(ll int n) </span><br><span class="line">    &#123; </span><br><span class="line">        // Corner cases </span><br><span class="line">        if (n &lt;= 1) </span><br><span class="line">            return false; </span><br><span class="line">        if (n &lt;= 3) </span><br><span class="line">            return true; </span><br><span class="line">      </span><br><span class="line">        // This is checked so that we can skip </span><br><span class="line">        // middle five numbers in below loop </span><br><span class="line">        if (n % 2 == 0 || n % 3 == 0) </span><br><span class="line">            return false; </span><br><span class="line">      </span><br><span class="line">        for (int i = 5; i * i &lt;= n; i = i + 6) </span><br><span class="line">            if (n % i == 0 || n % (i + 2) == 0) </span><br><span class="line">                return false; </span><br><span class="line">      </span><br><span class="line">        return true; </span><br><span class="line">    &#125; </span><br><span class="line">    vector&lt;ll int&gt; Sieve_to_store_primes(ll int n)</span><br><span class="line">    &#123;</span><br><span class="line">        bool prime[n + 1];memset(prime,1, sizeof(prime));</span><br><span class="line">        for (ll int p = 2; p&lt;= n; p++) &#123;</span><br><span class="line">            if (prime[p] ==1) &#123;</span><br><span class="line">                for (ll int i=p*2; i &lt;= n; i += p)</span><br><span class="line">                    prime[i] =0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;ll int&gt;v;</span><br><span class="line">        for (int p = 2; p &lt;= n; p++)&#123;</span><br><span class="line">            if (prime[p])&#123; </span><br><span class="line">                v.push_back(p);</span><br><span class="line">              &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return v;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;ll int&gt; Sieve_highest_lowest_primes(ll int n)</span><br><span class="line">    &#123;</span><br><span class="line">        bool prime[n + 1];memset(prime,1, sizeof(prime));</span><br><span class="line">        vector&lt;ll int&gt;hp(n+1);</span><br><span class="line">        vector&lt;ll int&gt;lp(n+1,0);</span><br><span class="line">        for (ll int p = 2; p &lt;= n; p++) &#123;</span><br><span class="line">            if (prime[p] ==1) &#123;</span><br><span class="line">                lp[p]=hp[p]=p;//if the number is a prime number then the lowest and the highest prime both are p</span><br><span class="line">                for (ll int i = p * 2; i &lt;= n; i += p)&#123;</span><br><span class="line">                    prime[i] = false;</span><br><span class="line">                    hp[i]=p;</span><br><span class="line">                    if(lp[i]==0)&#123;</span><br><span class="line">                        lp[i]=p;</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      return lp;//return hp;</span><br><span class="line">      //NOTE THAT THE HIGHEST PRIME AND THE LOWEST PRIME OF 0 AND 1 ARE MARKED AS 0</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;ll int&gt;&gt; Sieve_all_divisors(ll int n)&#123;</span><br><span class="line">        vector&lt;vector&lt;ll int&gt;&gt;v(n+1);</span><br><span class="line">        for(ll int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">            for(ll int j=i;j&lt;=n;j+=i)&#123;</span><br><span class="line">                v[j].push_back(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return v;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;ll int&gt;&gt; Sieve_all_prime_factors(ll int n)&#123;</span><br><span class="line">        vector&lt;ll int&gt;lp=Sieve_highest_lowest_primes(n);</span><br><span class="line">        vector&lt;vector&lt;ll int&gt;&gt;ans(n+1);//note that the prime factors of 0 and 1 are none</span><br><span class="line">        for(ll int i=2;i&lt;=n;i++)&#123;</span><br><span class="line">            ll int temp=i;</span><br><span class="line">            while(temp&gt;1)&#123;</span><br><span class="line">                ll int div=lp[temp];</span><br><span class="line">                ans[i].push_back(div);</span><br><span class="line">                while(temp%div==0)&#123;</span><br><span class="line">                    temp/=div;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ll int query_interactive(ll int x,ll int y)&#123;    </span><br><span class="line">        cout&lt;&lt;&quot;?&quot;&lt;&lt;&quot; &quot;&lt;&lt;x&lt;&lt;&quot; &quot;&lt;&lt;y&lt;&lt;endl;</span><br><span class="line">        ll int ans;</span><br><span class="line">        cin&gt;&gt;ans;</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line">    void print_interactive(ll int x,ll int y)&#123;</span><br><span class="line">        cout&lt;&lt;&quot;!&quot;&lt;&lt;&quot; &quot;&lt;&lt;x&lt;&lt;&quot; &quot;&lt;&lt;y&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    //__builtin_popcount(n) to count the number of set bits in a number//we can check if a number is a power of 2 using __builtin_popcount()</span><br><span class="line">    //__builtin_clz will count the number of leading zeroes</span><br><span class="line">    //reverse(v.begin(),v.end())//modifies the vector inplace</span><br><span class="line">    //sort(v.rbegin(), v.rend());//to sort a vector in reverse order</span><br><span class="line">    //sort(arr, arr + n, greater&lt;ll int&gt;());//sort an array in reverse order </span><br><span class="line">    //fib(n)*fib(n+1)=sum of square of all fibs before n</span><br><span class="line">    //there are approx n^1/3 divisors of a number </span><br><span class="line">    //there are approx loglogn number of distinct prime factors of a number</span><br><span class="line">    //there are approx n/logn different primes before a number n</span><br><span class="line">    //gcd knowledge:::</span><br><span class="line">    //gcd(a1,a2,a3,a4,a5..an)=gcd(a1,|a1-a2|,|a1-a3|,|a1-a4|,|a1-a5|....,|a1-an|)</span><br><span class="line">    //gcd(a,b)=gcd(a,b%a)    </span><br><span class="line"></span><br><span class="line">    //REMEMBER</span><br><span class="line">    //all primes till a number A : A*loglog(A)</span><br><span class="line">    //all highest primes till a number A: A*loglog(A)//all lowest primes till a number A: A*loglog(A)</span><br><span class="line">    //all the divisors of all numbers till a max number A: A*log(A)</span><br><span class="line">    //all the prime factors of N queries with max number A: A*loglog(A) + N*log(A)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    int main()&#123;</span><br><span class="line">        ios_base::sync_with_stdio(false);</span><br><span class="line">        cin.tie(NULL);ll int t;t=1;</span><br><span class="line">        ll int p=998244353;</span><br><span class="line">        for(int o=0;o&lt;t;o++)&#123;</span><br><span class="line">            ll int n;cin&gt;&gt;n;</span><br><span class="line">            ll int a[n+1]=&#123;0&#125;;</span><br><span class="line">            for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">                cin&gt;&gt;a[i];</span><br><span class="line">            &#125;</span><br><span class="line">            vector&lt;vector&lt;ll int&gt;&gt;dist=Sieve_all_prime_factors(*max_element(a+1,a+n+1));</span><br><span class="line">            for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">                vector&lt;ll int&gt;v=dist[a[i]];</span><br><span class="line">                ll int mul=1;</span><br><span class="line">                for(auto e:v)&#123;</span><br><span class="line">                    mul*=e;</span><br><span class="line">                &#125;</span><br><span class="line">                a[i]=mul;</span><br><span class="line">            &#125;</span><br><span class="line">            vector&lt;vector&lt;ll int&gt;&gt;divisors=Sieve_all_divisors(*max_element(a+1,a+n+1));</span><br><span class="line">/*            //testing</span><br><span class="line">            for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">                cout&lt;&lt;a[i]&lt;&lt;&quot; &quot;;</span><br><span class="line">            &#125;</span><br><span class="line">            cout&lt;&lt;endl;</span><br><span class="line">            for (auto e:dist)&#123;</span><br><span class="line">                for(auto e2:e)&#123;</span><br><span class="line">                    cout&lt;&lt;e2&lt;&lt;&quot; &quot;;</span><br><span class="line">                &#125;</span><br><span class="line">                cout&lt;&lt;endl;</span><br><span class="line">            &#125;</span><br><span class="line">            cout&lt;&lt;endl;cout&lt;&lt;endl;</span><br><span class="line">            for (auto e:divisors)&#123;</span><br><span class="line">                for(auto e2:e)&#123;</span><br><span class="line">                    cout&lt;&lt;e2&lt;&lt;&quot; &quot;;</span><br><span class="line">                &#125;</span><br><span class="line">                cout&lt;&lt;endl;</span><br><span class="line">            &#125;</span><br><span class="line">            cout&lt;&lt;&quot;TESTING 1 OVER&quot;&lt;&lt;endl;</span><br><span class="line">            //testing over*/</span><br><span class="line">            ll int temp[(*max_element(a+1,a+n+1))+1];memset(temp,0,sizeof(temp));</span><br><span class="line">            ll int dp[n+1]=&#123;0&#125;;</span><br><span class="line">            for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">                //cout&lt;&lt;&quot;i:&quot;&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">                ll int cnt=dist[a[i]].size();</span><br><span class="line">                //cout&lt;&lt;&quot;cnt:&quot;&lt;&lt;cnt&lt;&lt;endl;</span><br><span class="line">                ll int sum=0;</span><br><span class="line">                ll int mx=((1&lt;&lt;cnt)-1);</span><br><span class="line">                //cout&lt;&lt;&quot;mx:&quot;&lt;&lt;mx&lt;&lt;endl;</span><br><span class="line">                for(ll int j=1;j&lt;=mx;j++)&#123;</span><br><span class="line">                    ll int t=j;</span><br><span class="line">                    ll int pos=0;</span><br><span class="line">                    ll int x=1;ll int set=0;</span><br><span class="line">                    while(t&gt;0)&#123;</span><br><span class="line">                        if(t%2==1)&#123;</span><br><span class="line">                            x*=dist[a[i]][pos];set++;</span><br><span class="line">                        &#125;</span><br><span class="line">                        t/=2;</span><br><span class="line">                        pos++;</span><br><span class="line">/*                        cout&lt;&lt;&quot;pos:&quot;&lt;&lt;pos&lt;&lt;endl;</span><br><span class="line">                        cout&lt;&lt;&quot;t:&quot;&lt;&lt;t&lt;&lt;endl;</span><br><span class="line">                        cout&lt;&lt;&quot;x:&quot;&lt;&lt;x&lt;&lt;endl;*/</span><br><span class="line">                    &#125;</span><br><span class="line">                    ll int sign=1;if(set%2==0)sign=(ll int)(-1);</span><br><span class="line">                    sum+=temp[x]*sign;sum%=p;</span><br><span class="line">                &#125;</span><br><span class="line">                //cout&lt;&lt;&quot;sum:&quot;&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">                if(i==1)sum=1;</span><br><span class="line">                dp[i]=sum%p;</span><br><span class="line">                for(int j=0;j&lt;divisors[a[i]].size();j++)&#123;</span><br><span class="line">                    temp[divisors[a[i]][j]]+=sum;temp[divisors[a[i]][j]]%=p;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            cout&lt;&lt;((dp[n]%p)+p)%p&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>这份代码模板完全不想看究竟定义了什么，重载了什么，而且代码之间没有空格，显得十分紧凑，阅读观感也极差。因此，一份良好的代码起手模板只有两种：</p><ul><li>最基本的能保证运行的短代码模板</li><li>能够有着良好分区的长代码模板</li></ul><h3 id="算法模版"><a href="#算法模版" class="headerlink" title="算法模版"></a>算法模版</h3><p>良好的算法模板必须由lambda&#x2F;namespace&#x2F;struct&#x2F;template&#x2F;代码片段封装，以此保证代码的可移植性，可读性。算法模板一定不能是一段针对于该算法的模板题目可以运行的代码程序。</p><ol><li>lambda</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">djikstra(); djikstra(s); 不写默认s=1</span><br><span class="line"></span><br><span class="line">vector&lt;int&gt; dis(n + 1, 1E18);</span><br><span class="line">auto djikstra = [&amp;](int s = 1) -&gt; void &#123;</span><br><span class="line">    using PII = pair&lt;int, int&gt;;</span><br><span class="line">    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; q;</span><br><span class="line">    q.emplace(0, s);</span><br><span class="line">    dis[s] = 0;</span><br><span class="line">    vector&lt;int&gt; vis(n + 1);</span><br><span class="line">    while (!q.empty()) &#123;</span><br><span class="line">        int x = q.top().second;</span><br><span class="line">        q.pop();</span><br><span class="line">        if (vis[x]) continue;</span><br><span class="line">        vis[x] = 1;</span><br><span class="line">        for (auto [y, w] : ver[x]) &#123;</span><br><span class="line">            if (dis[y] &gt; dis[x] + w) &#123;</span><br><span class="line">                dis[y] = dis[x] + w;</span><br><span class="line">                q.emplace(dis[y], y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>namespace</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line">Geometry::Point&lt;int&gt; a, b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">cout &lt;&lt; a + b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">namespace Geometry &#123; // 平面几何基础</span><br><span class="line">    using ld = long double;</span><br><span class="line">    const ld PI = acos(-1);</span><br><span class="line">    const ld EPS = 1e-7;</span><br><span class="line">    const ld INF = numeric_limits&lt;ld&gt;::max();</span><br><span class="line">    #define cc(x) cout &lt;&lt; fixed &lt;&lt; setprecision(x);</span><br><span class="line"></span><br><span class="line">    ld fgcd(ld x, ld y) &#123; // 实数域gcd</span><br><span class="line">        return abs(y) &lt; EPS ? abs(x) : fgcd(y, fmod(x, y));</span><br><span class="line">    &#125;</span><br><span class="line">    template&lt;class T, class S&gt; bool equal(T x, S y) &#123;</span><br><span class="line">        return -EPS &lt; x - y &amp;&amp; x - y &lt; EPS;</span><br><span class="line">    &#125;</span><br><span class="line">    template&lt;class T&gt; int sign(T x) &#123;</span><br><span class="line">        if (-EPS &lt; x &amp;&amp; x &lt; EPS) return 0;</span><br><span class="line">        return x &lt; 0 ? -1 : 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    template&lt;class T&gt; struct Point &#123; // 在C++17下使用 emplace_back 绑定可能会导致CE！</span><br><span class="line">        T x, y;</span><br><span class="line">        Point(T x_ = 0, T y_ = 0) : x(x_), y(y_) &#123;&#125; // 初始化</span><br><span class="line">        template&lt;class U&gt; operator Point&lt;U&gt;() &#123; // 自动类型匹配</span><br><span class="line">            return Point&lt;U&gt;(U(x), U(y));</span><br><span class="line">        &#125;</span><br><span class="line">        Point &amp;operator+=(Point p) &amp; &#123; return x += p.x, y += p.y, *this; &#125;</span><br><span class="line">        Point &amp;operator+=(T t) &amp; &#123; return x += t, y += t, *this; &#125;</span><br><span class="line">        Point &amp;operator-=(Point p) &amp; &#123; return x -= p.x, y -= p.y, *this; &#125;</span><br><span class="line">        Point &amp;operator-=(T t) &amp; &#123; return x -= t, y -= t, *this; &#125;</span><br><span class="line">        Point &amp;operator*=(T t) &amp; &#123; return x *= t, y *= t, *this; &#125;</span><br><span class="line">        Point &amp;operator/=(T t) &amp; &#123; return x /= t, y /= t, *this; &#125;</span><br><span class="line">        Point operator-() const &#123; return Point(-x, -y); &#125;</span><br><span class="line">        friend Point operator+(Point a, Point b) &#123; return a += b; &#125;</span><br><span class="line">        friend Point operator+(Point a, T b) &#123; return a += b; &#125;</span><br><span class="line">        friend Point operator-(Point a, Point b) &#123; return a -= b; &#125;</span><br><span class="line">        friend Point operator-(Point a, T b) &#123; return a -= b; &#125;</span><br><span class="line">        friend Point operator*(Point a, T b) &#123; return a *= b; &#125;</span><br><span class="line">        friend Point operator*(T a, Point b) &#123; return b *= a; &#125;</span><br><span class="line">        friend Point operator/(Point a, T b) &#123; return a /= b; &#125;</span><br><span class="line">        friend bool operator&lt;(Point a, Point b) &#123;</span><br><span class="line">            return equal(a.x, b.x) ? a.y &lt; b.y - EPS : a.x &lt; b.x - EPS;</span><br><span class="line">        &#125;</span><br><span class="line">        friend bool operator&gt;(Point a, Point b) &#123; return b &lt; a; &#125;</span><br><span class="line">        friend bool operator==(Point a, Point b) &#123; return !(a &lt; b) &amp;&amp; !(b &lt; a); &#125;</span><br><span class="line">        friend bool operator!=(Point a, Point b) &#123; return a &lt; b || b &lt; a; &#125;</span><br><span class="line">        friend auto &amp;operator&gt;&gt;(istream &amp;is, Point &amp;p) &#123;</span><br><span class="line">            return is &gt;&gt; p.x &gt;&gt; p.y;</span><br><span class="line">        &#125;</span><br><span class="line">        friend auto &amp;operator&lt;&lt;(ostream &amp;os, Point p) &#123;</span><br><span class="line">            return os &lt;&lt; &quot;(&quot; &lt;&lt; p.x &lt;&lt; &quot;, &quot; &lt;&lt; p.y &lt;&lt; &quot;)&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    template&lt;class T&gt; struct Line &#123;</span><br><span class="line">        Point&lt;T&gt; a, b;</span><br><span class="line">        Line(Point&lt;T&gt; a_ = Point&lt;T&gt;(), Point&lt;T&gt; b_ = Point&lt;T&gt;()) : a(a_), b(b_) &#123;&#125;</span><br><span class="line">        template&lt;class U&gt; operator Line&lt;U&gt;() &#123; // 自动类型匹配</span><br><span class="line">            return Line&lt;U&gt;(Point&lt;U&gt;(a), Point&lt;U&gt;(b));</span><br><span class="line">        &#125;</span><br><span class="line">        friend auto &amp;operator&lt;&lt;(ostream &amp;os, Line l) &#123;</span><br><span class="line">            return os &lt;&lt; &quot;&lt;&quot; &lt;&lt; l.a &lt;&lt; &quot;, &quot; &lt;&lt; l.b &lt;&lt; &quot;&gt;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    template&lt;class T&gt; T cross(Point&lt;T&gt; a, Point&lt;T&gt; b) &#123; // 叉乘</span><br><span class="line">        return a.x * b.y - a.y * b.x;</span><br><span class="line">    &#125;</span><br><span class="line">    template&lt;class T&gt;</span><br><span class="line">    T cross(Point&lt;T&gt; p1, Point&lt;T&gt; p2, Point&lt;T&gt; p0) &#123; // 叉乘 (p1 - p0) x (p2 - p0);</span><br><span class="line">        return cross(p1 - p0, p2 - p0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    template&lt;class T&gt; T dot(Point&lt;T&gt; a, Point&lt;T&gt; b) &#123; // 点乘</span><br><span class="line">        return a.x * b.x + a.y * b.y;</span><br><span class="line">    &#125;</span><br><span class="line">    template&lt;class T&gt; T dot(Point&lt;T&gt; p1, Point&lt;T&gt; p2, Point&lt;T&gt; p0) &#123; // 点乘 (p1 - p0) * (p2 - p0);</span><br><span class="line">        return dot(p1 - p0, p2 - p0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    template&lt;class T&gt; ld dis(T x1, T y1, T x2, T y2) &#123;</span><br><span class="line">        ld val = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);</span><br><span class="line">        return sqrt(val);</span><br><span class="line">    &#125;</span><br><span class="line">    template&lt;class T&gt; ld dis(Point&lt;T&gt; a, Point&lt;T&gt; b) &#123;</span><br><span class="line">        return dis(a.x, a.y, b.x, b.y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    template&lt;class T&gt; T dis1(Point&lt;T&gt; p1, Point&lt;T&gt; p2) &#123; // 曼哈顿距离公式</span><br><span class="line">        return abs(p1.x - p2.x) + abs(p1.y - p2.y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Point&lt;ld&gt; standardize(Point&lt;ld&gt; vec) &#123; // 转换为单位向量</span><br><span class="line">        return vec / sqrt(vec.x * vec.x + vec.y * vec.y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    template&lt;class T&gt; Point&lt;T&gt; rotate(Point&lt;T&gt; p1, Point&lt;T&gt; p2) &#123; // 旋转</span><br><span class="line">        Point&lt;T&gt; vec = p1 - p2;</span><br><span class="line">        return &#123;-vec.y, vec.x&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; // namespace Geometry</span><br></pre></td></tr></table></figure><ol start="3"><li>struct</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br></pre></td><td class="code"><pre><span class="line">const int base = 1000000000;</span><br><span class="line">const int base_digits = 9; // 分解为九个数位一个数字</span><br><span class="line">struct bigint &#123;</span><br><span class="line">    vector&lt;int&gt; a;</span><br><span class="line">    int sign;</span><br><span class="line"></span><br><span class="line">    bigint() : sign(1) &#123;&#125;</span><br><span class="line">    bigint operator-() const &#123;</span><br><span class="line">        bigint res = *this;</span><br><span class="line">        res.sign = -sign;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">    bigint(long long v) &#123;</span><br><span class="line">        *this = v;</span><br><span class="line">    &#125;</span><br><span class="line">    bigint(const string &amp;s) &#123;</span><br><span class="line">        read(s);</span><br><span class="line">    &#125;</span><br><span class="line">    void operator=(const bigint &amp;v) &#123;</span><br><span class="line">        sign = v.sign;</span><br><span class="line">        a = v.a;</span><br><span class="line">    &#125;</span><br><span class="line">    void operator=(long long v) &#123;</span><br><span class="line">        a.clear();</span><br><span class="line">        sign = 1;</span><br><span class="line">        if (v &lt; 0) sign = -1, v = -v;</span><br><span class="line">        for (; v &gt; 0; v = v / base) &#123;</span><br><span class="line">            a.push_back(v % base);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 基础加减乘除</span><br><span class="line">    bigint operator+(const bigint &amp;v) const &#123;</span><br><span class="line">        if (sign == v.sign) &#123;</span><br><span class="line">            bigint res = v;</span><br><span class="line">            for (int i = 0, carry = 0; i &lt; (int)max(a.size(), v.a.size()) || carry; ++i) &#123;</span><br><span class="line">                if (i == (int)res.a.size()) &#123;</span><br><span class="line">                    res.a.push_back(0);</span><br><span class="line">                &#125;</span><br><span class="line">                res.a[i] += carry + (i &lt; (int)a.size() ? a[i] : 0);</span><br><span class="line">                carry = res.a[i] &gt;= base;</span><br><span class="line">                if (carry) &#123;</span><br><span class="line">                    res.a[i] -= base;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return res;</span><br><span class="line">        &#125;</span><br><span class="line">        return *this - (-v);</span><br><span class="line">    &#125;</span><br><span class="line">    bigint operator-(const bigint &amp;v) const &#123;</span><br><span class="line">        if (sign == v.sign) &#123;</span><br><span class="line">            if (abs() &gt;= v.abs()) &#123;</span><br><span class="line">                bigint res = *this;</span><br><span class="line">                for (int i = 0, carry = 0; i &lt; (int)v.a.size() || carry; ++i) &#123;</span><br><span class="line">                    res.a[i] -= carry + (i &lt; (int)v.a.size() ? v.a[i] : 0);</span><br><span class="line">                    carry = res.a[i] &lt; 0;</span><br><span class="line">                    if (carry) &#123;</span><br><span class="line">                        res.a[i] += base;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                res.trim();</span><br><span class="line">                return res;</span><br><span class="line">            &#125;</span><br><span class="line">            return -(v - *this);</span><br><span class="line">        &#125;</span><br><span class="line">        return *this + (-v);</span><br><span class="line">    &#125;</span><br><span class="line">    void operator*=(int v) &#123;</span><br><span class="line">        check(v);</span><br><span class="line">        for (int i = 0, carry = 0; i &lt; (int)a.size() || carry; ++i) &#123;</span><br><span class="line">            if (i == (int)a.size()) &#123;</span><br><span class="line">                a.push_back(0);</span><br><span class="line">            &#125;</span><br><span class="line">            long long cur = a[i] * (long long)v + carry;</span><br><span class="line">            carry = (int)(cur / base);</span><br><span class="line">            a[i] = (int)(cur % base);</span><br><span class="line">        &#125;</span><br><span class="line">        trim();</span><br><span class="line">    &#125;</span><br><span class="line">    void operator/=(int v) &#123;</span><br><span class="line">        check(v);</span><br><span class="line">        for (int i = (int)a.size() - 1, rem = 0; i &gt;= 0; --i) &#123;</span><br><span class="line">            long long cur = a[i] + rem * (long long)base;</span><br><span class="line">            a[i] = (int)(cur / v);</span><br><span class="line">            rem = (int)(cur % v);</span><br><span class="line">        &#125;</span><br><span class="line">        trim();</span><br><span class="line">    &#125;</span><br><span class="line">    int operator%(int v) const &#123;</span><br><span class="line">        if (v &lt; 0) &#123;</span><br><span class="line">            v = -v;</span><br><span class="line">        &#125;</span><br><span class="line">        int m = 0;</span><br><span class="line">        for (int i = a.size() - 1; i &gt;= 0; --i) &#123;</span><br><span class="line">            m = (a[i] + m * (long long)base) % v;</span><br><span class="line">        &#125;</span><br><span class="line">        return m * sign;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void operator+=(const bigint &amp;v) &#123;</span><br><span class="line">        *this = *this + v;</span><br><span class="line">    &#125;</span><br><span class="line">    void operator-=(const bigint &amp;v) &#123;</span><br><span class="line">        *this = *this - v;</span><br><span class="line">    &#125;</span><br><span class="line">    bigint operator*(int v) const &#123;</span><br><span class="line">        bigint res = *this;</span><br><span class="line">        res *= v;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">    bigint operator/(int v) const &#123;</span><br><span class="line">        bigint res = *this;</span><br><span class="line">        res /= v;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">    void operator%=(const int &amp;v) &#123;</span><br><span class="line">        *this = *this % v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bool operator&lt;(const bigint &amp;v) const &#123;</span><br><span class="line">        if (sign != v.sign) return sign &lt; v.sign;</span><br><span class="line">        if (a.size() != v.a.size()) return a.size() * sign &lt; v.a.size() * v.sign;</span><br><span class="line">        for (int i = a.size() - 1; i &gt;= 0; i--)</span><br><span class="line">            if (a[i] != v.a[i]) return a[i] * sign &lt; v.a[i] * sign;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    bool operator&gt;(const bigint &amp;v) const &#123;</span><br><span class="line">        return v &lt; *this;</span><br><span class="line">    &#125;</span><br><span class="line">    bool operator&lt;=(const bigint &amp;v) const &#123;</span><br><span class="line">        return !(v &lt; *this);</span><br><span class="line">    &#125;</span><br><span class="line">    bool operator&gt;=(const bigint &amp;v) const &#123;</span><br><span class="line">        return !(*this &lt; v);</span><br><span class="line">    &#125;</span><br><span class="line">    bool operator==(const bigint &amp;v) const &#123;</span><br><span class="line">        return !(*this &lt; v) &amp;&amp; !(v &lt; *this);</span><br><span class="line">    &#125;</span><br><span class="line">    bool operator!=(const bigint &amp;v) const &#123;</span><br><span class="line">        return *this &lt; v || v &lt; *this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bigint abs() const &#123;</span><br><span class="line">        bigint res = *this;</span><br><span class="line">        res.sign *= res.sign;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">    void check(int v) &#123; // 检查输入的是否为负数</span><br><span class="line">        if (v &lt; 0) &#123;</span><br><span class="line">            sign = -sign;</span><br><span class="line">            v = -v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    void trim() &#123; // 去除前导零</span><br><span class="line">        while (!a.empty() &amp;&amp; !a.back()) a.pop_back();</span><br><span class="line">        if (a.empty()) sign = 1;</span><br><span class="line">    &#125;</span><br><span class="line">    bool isZero() const &#123; // 判断是否等于零</span><br><span class="line">        return a.empty() || (a.size() == 1 &amp;&amp; !a[0]);</span><br><span class="line">    &#125;</span><br><span class="line">    friend bigint gcd(const bigint &amp;a, const bigint &amp;b) &#123;</span><br><span class="line">        return b.isZero() ? a : gcd(b, a % b);</span><br><span class="line">    &#125;</span><br><span class="line">    friend bigint lcm(const bigint &amp;a, const bigint &amp;b) &#123;</span><br><span class="line">        return a / gcd(a, b) * b;</span><br><span class="line">    &#125;</span><br><span class="line">    void read(const string &amp;s) &#123;</span><br><span class="line">        sign = 1;</span><br><span class="line">        a.clear();</span><br><span class="line">        int pos = 0;</span><br><span class="line">        while (pos &lt; (int)s.size() &amp;&amp; (s[pos] == &#x27;-&#x27; || s[pos] == &#x27;+&#x27;)) &#123;</span><br><span class="line">            if (s[pos] == &#x27;-&#x27;) sign = -sign;</span><br><span class="line">            ++pos;</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i = s.size() - 1; i &gt;= pos; i -= base_digits) &#123;</span><br><span class="line">            int x = 0;</span><br><span class="line">            for (int j = max(pos, i - base_digits + 1); j &lt;= i; j++) x = x * 10 + s[j] - &#x27;0&#x27;;</span><br><span class="line">            a.push_back(x);</span><br><span class="line">        &#125;</span><br><span class="line">        trim();</span><br><span class="line">    &#125;</span><br><span class="line">    friend istream &amp;operator&gt;&gt;(istream &amp;stream, bigint &amp;v) &#123;</span><br><span class="line">        string s;</span><br><span class="line">        stream &gt;&gt; s;</span><br><span class="line">        v.read(s);</span><br><span class="line">        return stream;</span><br><span class="line">    &#125;</span><br><span class="line">    friend ostream &amp;operator&lt;&lt;(ostream &amp;stream, const bigint &amp;v) &#123;</span><br><span class="line">        if (v.sign == -1) stream &lt;&lt; &#x27;-&#x27;;</span><br><span class="line">        stream &lt;&lt; (v.a.empty() ? 0 : v.a.back());</span><br><span class="line">        for (int i = (int)v.a.size() - 2; i &gt;= 0; --i)</span><br><span class="line">            stream &lt;&lt; setw(base_digits) &lt;&lt; setfill(&#x27;0&#x27;) &lt;&lt; v.a[i];</span><br><span class="line">        return stream;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* 大整数乘除大整数部分 */</span><br><span class="line">    typedef vector&lt;long long&gt; vll;</span><br><span class="line">    bigint operator*(const bigint &amp;v) const &#123; // 大整数乘大整数</span><br><span class="line">        vector&lt;int&gt; a6 = convert_base(this-&gt;a, base_digits, 6);</span><br><span class="line">        vector&lt;int&gt; b6 = convert_base(v.a, base_digits, 6);</span><br><span class="line">        vll a(a6.begin(), a6.end());</span><br><span class="line">        vll b(b6.begin(), b6.end());</span><br><span class="line">        while (a.size() &lt; b.size()) a.push_back(0);</span><br><span class="line">        while (b.size() &lt; a.size()) b.push_back(0);</span><br><span class="line">        while (a.size() &amp; (a.size() - 1)) a.push_back(0), b.push_back(0);</span><br><span class="line">        vll c = karatsubaMultiply(a, b);</span><br><span class="line">        bigint res;</span><br><span class="line">        res.sign = sign * v.sign;</span><br><span class="line">        for (int i = 0, carry = 0; i &lt; (int)c.size(); i++) &#123;</span><br><span class="line">            long long cur = c[i] + carry;</span><br><span class="line">            res.a.push_back((int)(cur % 1000000));</span><br><span class="line">            carry = (int)(cur / 1000000);</span><br><span class="line">        &#125;</span><br><span class="line">        res.a = convert_base(res.a, 6, base_digits);</span><br><span class="line">        res.trim();</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">    friend pair&lt;bigint, bigint&gt; divmod(const bigint &amp;a1,</span><br><span class="line">                                       const bigint &amp;b1) &#123; // 大整数除大整数，同时返回答案与余数</span><br><span class="line">        int norm = base / (b1.a.back() + 1);</span><br><span class="line">        bigint a = a1.abs() * norm;</span><br><span class="line">        bigint b = b1.abs() * norm;</span><br><span class="line">        bigint q, r;</span><br><span class="line">        q.a.resize(a.a.size());</span><br><span class="line">        for (int i = a.a.size() - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">            r *= base;</span><br><span class="line">            r += a.a[i];</span><br><span class="line">            int s1 = r.a.size() &lt;= b.a.size() ? 0 : r.a[b.a.size()];</span><br><span class="line">            int s2 = r.a.size() &lt;= b.a.size() - 1 ? 0 : r.a[b.a.size() - 1];</span><br><span class="line">            int d = ((long long)base * s1 + s2) / b.a.back();</span><br><span class="line">            r -= b * d;</span><br><span class="line">            while (r &lt; 0) r += b, --d;</span><br><span class="line">            q.a[i] = d;</span><br><span class="line">        &#125;</span><br><span class="line">        q.sign = a1.sign * b1.sign;</span><br><span class="line">        r.sign = a1.sign;</span><br><span class="line">        q.trim();</span><br><span class="line">        r.trim();</span><br><span class="line">        return make_pair(q, r / norm);</span><br><span class="line">    &#125;</span><br><span class="line">    static vector&lt;int&gt; convert_base(const vector&lt;int&gt; &amp;a, int old_digits, int new_digits) &#123;</span><br><span class="line">        vector&lt;long long&gt; p(max(old_digits, new_digits) + 1);</span><br><span class="line">        p[0] = 1;</span><br><span class="line">        for (int i = 1; i &lt; (int)p.size(); i++) p[i] = p[i - 1] * 10;</span><br><span class="line">        vector&lt;int&gt; res;</span><br><span class="line">        long long cur = 0;</span><br><span class="line">        int cur_digits = 0;</span><br><span class="line">        for (int i = 0; i &lt; (int)a.size(); i++) &#123;</span><br><span class="line">            cur += a[i] * p[cur_digits];</span><br><span class="line">            cur_digits += old_digits;</span><br><span class="line">            while (cur_digits &gt;= new_digits) &#123;</span><br><span class="line">                res.push_back((int)(cur % p[new_digits]));</span><br><span class="line">                cur /= p[new_digits];</span><br><span class="line">                cur_digits -= new_digits;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res.push_back((int)cur);</span><br><span class="line">        while (!res.empty() &amp;&amp; !res.back()) res.pop_back();</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">    static vll karatsubaMultiply(const vll &amp;a, const vll &amp;b) &#123;</span><br><span class="line">        int n = a.size();</span><br><span class="line">        vll res(n + n);</span><br><span class="line">        if (n &lt;= 32) &#123;</span><br><span class="line">            for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">                for (int j = 0; j &lt; n; j++) &#123;</span><br><span class="line">                    res[i + j] += a[i] * b[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return res;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int k = n &gt;&gt; 1;</span><br><span class="line">        vll a1(a.begin(), a.begin() + k);</span><br><span class="line">        vll a2(a.begin() + k, a.end());</span><br><span class="line">        vll b1(b.begin(), b.begin() + k);</span><br><span class="line">        vll b2(b.begin() + k, b.end());</span><br><span class="line"></span><br><span class="line">        vll a1b1 = karatsubaMultiply(a1, b1);</span><br><span class="line">        vll a2b2 = karatsubaMultiply(a2, b2);</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; k; i++) a2[i] += a1[i];</span><br><span class="line">        for (int i = 0; i &lt; k; i++) b2[i] += b1[i];</span><br><span class="line"></span><br><span class="line">        vll r = karatsubaMultiply(a2, b2);</span><br><span class="line">        for (int i = 0; i &lt; (int)a1b1.size(); i++) r[i] -= a1b1[i];</span><br><span class="line">        for (int i = 0; i &lt; (int)a2b2.size(); i++) r[i] -= a2b2[i];</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; (int)r.size(); i++) res[i + k] += r[i];</span><br><span class="line">        for (int i = 0; i &lt; (int)a1b1.size(); i++) res[i] += a1b1[i];</span><br><span class="line">        for (int i = 0; i &lt; (int)a2b2.size(); i++) res[i + n] += a2b2[i];</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void operator*=(const bigint &amp;v) &#123;</span><br><span class="line">        *this = *this * v;</span><br><span class="line">    &#125;</span><br><span class="line">    bigint operator/(const bigint &amp;v) const &#123;</span><br><span class="line">        return divmod(*this, v).first;</span><br><span class="line">    &#125;</span><br><span class="line">    void operator/=(const bigint &amp;v) &#123;</span><br><span class="line">        *this = *this / v;</span><br><span class="line">    &#125;</span><br><span class="line">    bigint operator%(const bigint &amp;v) const &#123;</span><br><span class="line">        return divmod(*this, v).second;</span><br><span class="line">    &#125;</span><br><span class="line">    void operator%=(const bigint &amp;v) &#123;</span><br><span class="line">        *this = *this % v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="4"><li>template</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">template&lt;class T&gt; struct Frac &#123;</span><br><span class="line">    T x, y;</span><br><span class="line">    Frac() : Frac(0, 1) &#123;&#125;</span><br><span class="line">    Frac(T x_) : Frac(x_, 1) &#123;&#125;</span><br><span class="line">    Frac(T x_, T y_) : x(x_), y(y_) &#123;</span><br><span class="line">        if (y &lt; 0) &#123;</span><br><span class="line">            y = -y;</span><br><span class="line">            x = -x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    constexpr double val() const &#123;</span><br><span class="line">        return 1. * x / y;</span><br><span class="line">    &#125;</span><br><span class="line">    constexpr Frac norm() const &#123; // 调整符号、转化为最简形式</span><br><span class="line">        T p = gcd(x, y);</span><br><span class="line">        return &#123;x / p, y / p&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    friend constexpr auto &amp;operator&lt;&lt;(ostream &amp;o, const Frac &amp;j) &#123;</span><br><span class="line">        T p = gcd(j.x, j.y);</span><br><span class="line">        if (j.y == p) &#123;</span><br><span class="line">            return o &lt;&lt; j.x / p;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return o &lt;&lt; j.x / p &lt;&lt; &quot;/&quot; &lt;&lt; j.y / p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    constexpr Frac &amp;operator/=(const Frac &amp;i) &#123;</span><br><span class="line">        x *= i.y;</span><br><span class="line">        y *= i.x;</span><br><span class="line">        if (y &lt; 0) &#123;</span><br><span class="line">            x = -x;</span><br><span class="line">            y = -y;</span><br><span class="line">        &#125;</span><br><span class="line">        return *this;</span><br><span class="line">    &#125;</span><br><span class="line">    constexpr Frac &amp;operator+=(const Frac &amp;i) &#123;</span><br><span class="line">        x = x * i.y + y * i.x;</span><br><span class="line">        y *= i.y;</span><br><span class="line">        return *this;</span><br><span class="line">    &#125;</span><br><span class="line">    constexpr Frac &amp;operator-=(const Frac &amp;i) &#123;</span><br><span class="line">        x = x * i.y - y * i.x;</span><br><span class="line">        y *= i.y;</span><br><span class="line">        return *this;</span><br><span class="line">    &#125;</span><br><span class="line">    constexpr Frac &amp;operator*=(const Frac &amp;i) &#123;</span><br><span class="line">        x *= i.x;</span><br><span class="line">        y *= i.y;</span><br><span class="line">        return *this;</span><br><span class="line">    &#125;</span><br><span class="line">    friend constexpr Frac operator+(const Frac i, const Frac j) &#123; return i += j; &#125;</span><br><span class="line">    friend constexpr Frac operator-(const Frac i, const Frac j) &#123; return i -= j; &#125;</span><br><span class="line">    friend constexpr Frac operator*(const Frac i, const Frac j) &#123; return i *= j; &#125;</span><br><span class="line">    friend constexpr Frac operator/(const Frac i, const Frac j) &#123; return i /= j; &#125;</span><br><span class="line">    friend constexpr Frac operator-(const Frac i) &#123; return Frac(-i.x, i.y); &#125;</span><br><span class="line">    friend constexpr bool operator&lt;(const Frac i, const Frac j) &#123; return i.x * j.y &lt; i.y * j.x; &#125;</span><br><span class="line">    friend constexpr bool operator&gt;(const Frac i, const Frac j) &#123; return i.x * j.y &gt; i.y * j.x; &#125;</span><br><span class="line">    friend constexpr bool operator==(const Frac i, const Frac j) &#123; return i.x * j.y == i.y * j.x; &#125;</span><br><span class="line">    friend constexpr bool operator!=(const Frac i, const Frac j) &#123; return i.x * j.y != i.y * j.x; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="5"><li>代码片段</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">int mul(int a, int b, int m) &#123;</span><br><span class="line">    int r = a * b - m * (int)(1.L / m * a * b);</span><br><span class="line">    return r - m * (r &gt;= m) + m * (r &lt; 0);</span><br><span class="line">&#125;</span><br><span class="line">int mypow(int a, int b, int m) &#123;</span><br><span class="line">    int res = 1 % m;</span><br><span class="line">    for (; b; b &gt;&gt;= 1, a = mul(a, a, m)) &#123;</span><br><span class="line">        if (b &amp; 1) &#123;</span><br><span class="line">            res = mul(res, a, m);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int B[] = &#123;2, 3, 5, 7, 11, 13, 17, 19, 23&#125;;</span><br><span class="line">bool MR(int n) &#123;</span><br><span class="line">    if (n &lt;= 1) return 0;</span><br><span class="line">    for (int p : B) &#123;</span><br><span class="line">        if (n == p) return 1;</span><br><span class="line">        if (n % p == 0) return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    int m = (n - 1) &gt;&gt; __builtin_ctz(n - 1);</span><br><span class="line">    for (int p : B) &#123;</span><br><span class="line">        int t = m, a = mypow(p, m, n);</span><br><span class="line">        while (t != n - 1 &amp;&amp; a != 1 &amp;&amp; a != n - 1) &#123;</span><br><span class="line">            a = mul(a, a, n);</span><br><span class="line">            t *= 2;</span><br><span class="line">        &#125;</span><br><span class="line">        if (a != n - 1 &amp;&amp; t % 2 == 0) return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br><span class="line">int PR(int n) &#123;</span><br><span class="line">    for (int p : B) &#123;</span><br><span class="line">        if (n % p == 0) return p;</span><br><span class="line">    &#125;</span><br><span class="line">    auto f = [&amp;](int x) -&gt; int &#123;</span><br><span class="line">        x = mul(x, x, n) + 1;</span><br><span class="line">        return x &gt;= n ? x - n : x;</span><br><span class="line">    &#125;;</span><br><span class="line">    int x = 0, y = 0, tot = 0, p = 1, q, g;</span><br><span class="line">    for (int i = 0; (i &amp; 255) || (g = gcd(p, n)) == 1; i++, x = f(x), y = f(f(y))) &#123;</span><br><span class="line">        if (x == y) &#123;</span><br><span class="line">            x = tot++;</span><br><span class="line">            y = f(x);</span><br><span class="line">        &#125;</span><br><span class="line">        q = mul(p, abs(x - y), n);</span><br><span class="line">        if (q) p = q;</span><br><span class="line">    &#125;</span><br><span class="line">    return g;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;int&gt; fac(int n) &#123;</span><br><span class="line">    #define pb emplace_back</span><br><span class="line">    if (n == 1) return &#123;&#125;;</span><br><span class="line">    if (MR(n)) return &#123;n&#125;;</span><br><span class="line">    int d = PR(n);</span><br><span class="line">    auto v1 = fac(d), v2 = fac(n / d);</span><br><span class="line">    auto i1 = v1.begin(), i2 = v2.begin();</span><br><span class="line">    vector&lt;int&gt; ans;</span><br><span class="line">    while (i1 != v1.end() || i2 != v2.end()) &#123;</span><br><span class="line">        if (i1 == v1.end()) &#123;</span><br><span class="line">            ans.pb(*i2++);</span><br><span class="line">        &#125; else if (i2 == v2.end()) &#123;</span><br><span class="line">            ans.pb(*i1++);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if (*i1 &lt; *i2) &#123;</span><br><span class="line">                ans.pb(*i1++);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                ans.pb(*i2++);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述五份代码，如果有良好的C++代码阅读基础，很容易看得懂，可移植性也非常高，分别为迪杰斯特拉，平面几何，高精度运算，分数四则运算，素数检测。</p><p>每一份代码都保证了该种算法的大体最优时间复杂度，而不是未经优化的基础算法模版。</p><p>综上，一份良好的算法模版应具有如下几点要求：</p><ul><li>用lambda&#x2F;namespace&#x2F;struct&#x2F;template&#x2F;代码片段封装，大体为struct&gt;template&gt;namespace&gt;lambda&gt;代码片段封装，实际也需要根据算法的类型，长度，难易程度等来相应调整使用的方法。</li><li>具有优化后的大体最优时间复杂度</li><li>绝大多数情况是一段不可运行的代码，是算法模板，而不是可运行代码</li><li>保证可移植性，可读性等，例如Segt的模板不能只解决某一个特定区间问题，应该同时解决区间修改，区间询问等多种相关问题</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在平时写算法的时候看到别人的代码，有的时候代码很短，但是一言难尽；也有的人代码很长，但是却可以看得下去，几乎不影响观感。那么这就引申出一个问题，代码怎么写才能看起来更加的“规范”，“美观”，代码模板怎么写才能够保证“泛用性”，“可读性”。&lt;/p&gt;
&lt;h3 id=&quot;代码的格式</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>个人训练赛20241211</title>
    <link href="https://www.lansganbs.cn/posts/ae028ed9.html"/>
    <id>https://www.lansganbs.cn/posts/ae028ed9.html</id>
    <published>2024-12-31T12:47:08.000Z</published>
    <updated>2024-12-31T12:51:55.584Z</updated>
    
    <content type="html"><![CDATA[<h1 id="个人训练赛20241211"><a href="#个人训练赛20241211" class="headerlink" title="个人训练赛20241211"></a>个人训练赛20241211</h1><ul><li><a href="#c-diamond-miner">C. Diamond Miner</a></li><li><a href="#c-mp3">C. MP3</a></li><li><a href="#d-nezzar-and-board">D. Nezzar and Board</a></li><li><a href="#e-hiking">E. Hiking</a></li></ul><hr><h3 id="E-Hiking"><a href="#E-Hiking" class="headerlink" title="E. Hiking"></a><a href="https://codeforces.com/contest/489/problem/E">E. Hiking</a></h3><p>Date：Aug.31, 2019 | Rating：2522 | Number of accepted:66(1.53%) | Number of attempts:185(4.30%) | Total:4303</p><p>Tag：二分 动态规划 数论和线性代数</p><p>可以涉及的算法：二分 DP 01分数规划</p><p>读完题意就可以转化为尽量减少$ \frac{\sum \sqrt{\left| l - r\right |}}{\sum b} $</p><p>下面介绍一下01分数规划问题：给定两个都包含$n$个正整数的正数数列{$a_1,a_2,a_3,…,a_n$}和{$b_1,b_2,b_3,…,b_n$}，同时选出k个a和b，求max$\frac{\sum_{i&#x3D;1}^{n}a_i s_i }{\sum_{i&#x3D;1}^{n}b_i s_i }$，其中$s_i&#x3D;1$或$s_i&#x3D;0$表示选或不选第$i$个数，且$\sum_{i&#x3D;1}^{n} s_i&#x3D;k$。</p><p>为了加快速度，我们可以用“猜”的方法，猜一个数$x$，使</p><ul><li>$\frac{\sum_{i&#x3D;1}^{n}a_i s_i }{\sum_{i&#x3D;1}^{n}b_i s_i } \ge x$</li></ul><p>移项得$f &#x3D; \sum_{i&#x3D;1}^{n}(a_i - x b_i)\ge k$</p><p>01分数规划有两种解决办法：二分法，Dinkelbach算法。</p><p>下面利用二分来找到零点：</p><p>我们需要最小化一个分式。经典的方法是将分式的最小化问题转化为参数$\lambda$的函数，然后通过二分法寻找最优的$\lambda$。</p><p>将原问题转化：</p><p>具体来说我们的目标是最小化：</p><p>$ \frac{\text{总挫败感}}{\text{所用休息点的风景值总和}} &#x3D; \frac{\sum \sqrt{|l - r_j|}}{\sum b_j} $</p><ol><li>设目标函数为：</li></ol><p>$ \lambda &#x3D; \frac{\sum \sqrt{|l - r_j|}}{\sum b_j} $</p><ol start="2"><li>为了最小化这个分式，我们可以令：</li></ol><p>$ \sum \sqrt{|l - r_j|} - \lambda \sum b_j &#x3D; 0 $</p><ol start="3"><li>我们可以看成是对于给定的$\lambda$，判断是否存在一条路径，使得：</li></ol><p>$ \sum \sqrt{|l - r_j|} \leq \lambda \sum b_j $</p><ol start="4"><li>如果存在这样的路径，我们就尝试更小的$\lambda$；如果不存在，则尝试更大的$\lambda$。</li></ol><p>使用二分法寻找最优的$\lambda$：</p><ol start="5"><li>由于$\lambda$是连续的，我们可以在一个范围内对$\lambda$进行二分搜索，直到找到最小的$\lambda$。</li></ol><p>我们可以将休息点看成图中的节点，两个休息点之间的边权为：</p><p>$\text{边权} &#x3D; \sqrt{|l - (x_i - x_j)|} - \lambda b_i$</p><p>其中，$ x_i $ 是休息点的坐标，$ b_i $是休息点的风景值。</p><p>我们需要找到从起点到终点的最小代价路径，使得总代价$\leq 0$。如果存在这样的路径，那么对于当前的 $\lambda$，答案就是可行的。</p><p>一些注意点：</p><p>实际上思路正确的话，除了二分应该不太会有导致WA的点</p><ul><li>二分的判断调节不是hi &#x3D;&#x3D; lo，因为hi和lo是double，所以要设定一个极小值来进行比较，不然直接比较是有误差的<br>  不妨可以试一试下面的代码输出0还是1</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">double</span> a = <span class="number">0.1</span>, b = <span class="number">0.2</span>, c = <span class="number">0.3</span>;</span><br><span class="line">  cout &lt;&lt; (a + b == c) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上保留20位小数，a,b,c分别为0.10000000000000000555，0.20000000000000001110，0.29999999999999998890</p><p>最后这道题的时间复杂度为$O(n^{2}log(\sum\sqrt{|l - r_j|}))$</p><p>std：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> i64 = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2.01e6</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">1.01e3</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-7</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;C:/Users/70510/Desktop/Others/algo/debug.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(...) 42</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">double</span> l;</span><br><span class="line"><span class="type">double</span> x[N], b[N];</span><br><span class="line"><span class="type">double</span> d[N];</span><br><span class="line"><span class="type">int</span> pre[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">double</span> mid)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    d[i] = <span class="number">1e30</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  d[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  pre[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">      <span class="type">double</span> frustration = <span class="built_in">sqrt</span>(<span class="built_in">abs</span>(l - (x[i] - x[j])));</span><br><span class="line">      <span class="type">double</span> cost = d[j] + frustration - mid * b[i];</span><br><span class="line">      <span class="keyword">if</span> (d[i] &gt; cost) &#123;</span><br><span class="line">        d[i] = cost;</span><br><span class="line">        pre[i] = j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> d[n] &lt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  cin &gt;&gt; n &gt;&gt; l;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    cin &gt;&gt; x[i] &gt;&gt; b[i];</span><br><span class="line">  &#125;</span><br><span class="line">  x[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  b[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="type">double</span> lo = <span class="number">0</span>, hi = <span class="number">1e6</span>;</span><br><span class="line">  <span class="keyword">while</span> (hi - lo &gt; eps) &#123;</span><br><span class="line">    <span class="type">double</span> mid = (lo + hi) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) &#123;</span><br><span class="line">      hi = mid;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      lo = mid;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">check</span>(hi);</span><br><span class="line">  vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = n; i != <span class="number">-1</span>; i = pre[i]) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">      ans.<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">reverse</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)ans.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">    cout &lt;&lt; ans[i] &lt;&lt; <span class="string">&quot; \n&quot;</span>[i == (<span class="type">int</span>)ans.<span class="built_in">size</span>() - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">  cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// cin &gt;&gt; T;</span></span><br><span class="line">  <span class="keyword">while</span> (T--) <span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>01分数规划相关题目：<a href="http://poj.org/problem?id=2976">Dropping tests</a></p></blockquote><hr><h3 id="D-Nezzar-and-Board"><a href="#D-Nezzar-and-Board" class="headerlink" title="D. Nezzar and Board"></a><a href="https://codeforces.com/contest/1478/problem/D">D. Nezzar and Board</a></h3><p>Date：Jan.28, 2021 | Rating：1972 | Number of accepted:1244(7.68%) | Number of attempts:1672(10.33%) | Total:16192</p><p>Tag：构造 数学 数论</p><p>可以涉及的算法：裴蜀定理 二元线性丢番图方程</p><p>问题描述</p><p>给定一个整数序列$x_1, x_2, \dots, x_n$，可以进行以下操作任意次：</p><ul><li>选择任意两个整数 $x$ 和 $y$，计算$2x - y$，并将结果视为新的整数。</li></ul><p>现在，给定一个目标值$k$，问是否可以通过上述操作，从序列中的某个元素出发，经过若干次操作，得到$k$。</p><p>为了方便分析，我们先对操作进行等价变换，并理解其本质。</p><p>操作等价变换<br>原操作：$2x - y$</p><p>可以看作：</p><ol><li><p>$ 2x - y &#x3D; x + x - y$<br> 这样，我们可以将操作视为：从一个元素$x$开始，加上任意两个数的差$x - y$。</p></li><li><p>由于$x - y$可以为正数或负数，因此，操作的本质是：从某个元素开始，加上任意数对的差。</p></li></ol><p>考虑序列元素之间的差，我们定义序列：</p><ul><li><p>$a_i &#x3D; x_i - x_{i-1}$，对于$i &#x3D; 2,3,\dots,n$<br>  这样，我们可以表示任意两个元素之间的差：</p></li><li><p>$x_i - x_j &#x3D; \sum_{k &#x3D; j+1}^{i} a_k$，当 $i &gt; j$<br>  因此，任意的$x_i$ 都可以表示为：</p></li><li><p>$x_i &#x3D; x_1 + \sum_{k &#x3D; 2}^{i} a_k$</p></li></ul><p>于是问题转化为：从某个$x_i $出发，通过加上若干个差$x_p - x_q$（即$ a$ 的线性组合），得到目标值$k$。</p><p>由于差 $x_p - x_q$可以表示为 $a $ 的线性组合，且系数为整数（可能为负数），因此，我们可以表示目标值与$x_i $之间的差为：<br>$k - x_i &#x3D; z_1 a_1 + z_2 a_2 + \dots + z_{n-1} a_{n-1}$其中，$z_j$为整数。</p><p>那么就可以利用裴蜀定理：对于整数序列$a_1, a_2, \dots, a_{n-1}$，存在整数解$z_1, z_2, \dots, z_{n-1}$，使得线性组合等于某个值的充要条件是，该值是这些数的最大公约数$g$的倍数。</p><p>因此，我们的问题转化为： 是否存在序列中的某个元素$x_i$，使得$k - x_i$ 是$ g$的倍数。</p><p>注意到，所有的$x_i$都满足：$x_i \equiv x_1 \pmod{g}$</p><p>因为$x_i - x_1 &#x3D; \sum_{k&#x3D;2}^{i} a_k$，所以$x_i - x_1$ 是$g$的倍数。</p><p>因此，只需检查$k$是否与$ x_1 $同余于模$g$意义下，即： 如果$(k - x_1) \mod g &#x3D; 0$，总体时间复杂度$O(nlog(max(x[i])))$。</p><p>另外通过丢番图方程入手也可以解决这道题目，手算前几项的递推式可以发现是线性丢番图方程，殊途同归。</p><p>科普一个没啥用的小知识：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::__gcd和std::gcd实现并不同，std::__gcd是euclid算法，std::gcd是stein算法，一般来说，随机数据后者效率高，但实际上没人卡这个就是了。</span><br></pre></td></tr></table></figure><p>std:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> i64 = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2.01e6</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">1.01e3</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;C:/Users/70510/Desktop/Others/algo/debug.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(...) 42</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> n, k;</span><br><span class="line">  cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">  <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">x</span><span class="params">(n)</span></span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    cin &gt;&gt; x[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> g = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">    g = __gcd(g, <span class="built_in">abs</span>(x[i] - x[i - <span class="number">1</span>]));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> delta = <span class="built_in">abs</span>(k - x[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">if</span> (delta % g == <span class="number">0</span>) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">  cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">  cin &gt;&gt; T;</span><br><span class="line">  <span class="keyword">while</span> (T--) <span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>裴蜀定理：<a href="https://www.luogu.com.cn/problem/P4549">【模板】裴蜀定理</a></p><p>裴蜀定理：<a href="https://codeforces.com/contest/510/problem/D">D. Fox And Jumping</a></p><p>裴蜀定理：<a href="https://acm.hdu.edu.cn/showproblem.php?pid=5512">Pagodas</a></p><p>裴蜀定理：<a href="http://poj.org/problem?id=1579">Function Run Fun</a></p><p>拓展欧几里得算法与二元丢番图方程的解：<a href="https://www.luogu.com.cn/problem/P1516">P1516 青蛙的约会</a></p></blockquote><hr><h3 id="C-Diamond-Miner"><a href="#C-Diamond-Miner" class="headerlink" title="C. Diamond Miner"></a><a href="https://codeforces.com/contest/1496/problem/C">C. Diamond Miner</a></h3><p>Date：March.10, 2021 | Rating：1176 | Number of accepted:5878(53.86%) | Number of attempts:6593 (60.41%) | Total:10914</p><p>Tag：计算几何 贪心 排序</p><p>题意：略</p><p>因为坐标每个象限都是等效的，所以我们可以把所有的坐标全都移到同一个想先，为了方便起见，全部都移到第一象限，保证坐标全部为正数，方便计算。</p><p>引用官方题解的一张图方便解释：</p><p><img src="https://www.helloimg.com/i/2024/12/31/6773e86e6ae45.png" alt="codeforces"></p><p>我们知道，在三角形中任意两边的长度大于第三遍的长度，在此假设有四个点$A,B,C,D$存在，有两种挖矿的方法</p><ol><li>$B$挖$C$ $D$挖$A$ 那么花费的能量为$|BC|+|AD|$</li><li>$B$挖$A$ $D$挖$C$ 那么花费的能量为$|AB|+|CD|&#x3D;|AO|+|DO|+|BO|+|CO|&gt;|BC|+|AD|$</li></ol><p>显然如果想要花费的能量最小，就是让任意两条线段之间除了定点都不相交</p><p>可以将所有的点在$x$轴$y$轴上排序，累加所有的线段就可以得到最小值，时间复杂度为$O(nlogn)$</p><p>std:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> i64 = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2.01e6</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">1.01e3</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;C:/Users/70510/Desktop/Others/algo/debug.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(...) 42</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x[N], y[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  cin &gt;&gt; n;</span><br><span class="line">  vector&lt;<span class="type">double</span>&gt; xx;</span><br><span class="line">  vector&lt;<span class="type">double</span>&gt; yy;</span><br><span class="line">  <span class="type">int</span> totalPoints = n * <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; totalPoints; ++i) &#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">    cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">0</span>) &#123;</span><br><span class="line">      yy.<span class="built_in">push_back</span>(<span class="built_in">abs</span>(y));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (y == <span class="number">0</span>) &#123;</span><br><span class="line">      xx.<span class="built_in">push_back</span>(<span class="built_in">abs</span>(x));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">sort</span>(yy.<span class="built_in">begin</span>(), yy.<span class="built_in">end</span>());</span><br><span class="line">  <span class="built_in">sort</span>(xx.<span class="built_in">begin</span>(), xx.<span class="built_in">end</span>());</span><br><span class="line">  <span class="type">double</span> ans = <span class="number">0.0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="type">double</span> dis = <span class="built_in">sqrt</span>(yy[i] * yy[i] + xx[i] * xx[i]);</span><br><span class="line">    ans += dis;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; fixed &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">15</span>) &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">  cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">  cin &gt;&gt; T;</span><br><span class="line">  <span class="keyword">while</span> (T--) <span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="C-MP3"><a href="#C-MP3" class="headerlink" title="C. MP3"></a><a href="https://codeforces.com/contest/1199/problem/C">C. MP3</a></h3><p>Date：July 30, 2019 | Rating：1748 | Number of accepted:1884(26.85%) | Number of attempts:4402(62.74%) | Total:7016</p><p>Tag：双指针</p><p>题意：略</p><p>首先，我们需要计算在给定磁盘大小下，数组中最多可以有多少个不同的值。</p><p>每个值需要的位数为 $k &#x3D; \lceil \log_2 K \rceil$，总共需要的位数为 $n \times k$。磁盘大小为 $I$ 字节，即 $8I$ 位。</p><p>因此，需要满足：$n \times k \leq 8I$，即：$k \leq \dfrac{8I}{n}$，由于 $k$ 为非负整数，我们取其下界。</p><p>然后，不同值的最大数量 $K$ 满足：$K \leq 2^k$，由于 $k &#x3D; \lceil \log_2 K \rceil$，所以：$K \leq 2^{\frac{8I}{n}}$</p><p>但是，$K$ 最多为 $n$，因为数组长度为 $n$。</p><p>为了避免 $K$ 过大（当 $n$ 很小时，$2^{\frac{8I}{n}}$ 可能很大），我们可以设定一个上限，比如 $K_{\text{max}} &#x3D; n$。</p><p>我们可以对数组进行预处理：排序+统计数组中不同元素的值及其出现次数， 进而滑动窗口寻找最优区间</p><p>我们的目标是：</p><ul><li>选择一个包含不超过 $K$ 个不同值的子区间（这些值是连续的，因为经过排序）；</li><li>使得在这个区间内的元素数量尽可能多，从而被修改的元素数量尽可能少；</li></ul><p>具体来讲：</p><ul><li>设定一个滑动窗口，初始化左端点和右端点；</li><li>枚举所有可能的左右端点组合，使得窗口内的不同值数量不超过 $K$；</li><li>计算每种情况下需要修改的元素数量，即总元素数减去窗口内的元素数量；</li><li>取需要修改元素数量最小的方案；</li></ul><p>总时间复杂度为 $O(n \log n)$。</p><p>std:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> i64 = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2.01e6</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">1.01e3</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;C:/Users/70510/Desktop/Others/algo/debug.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(...) 42</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> n, I;</span><br><span class="line">  cin &gt;&gt; n &gt;&gt; I;</span><br><span class="line">  <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    cin &gt;&gt; a[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">  vector&lt;<span class="type">int</span>&gt; val;</span><br><span class="line">  vector&lt;<span class="type">int</span>&gt; count;</span><br><span class="line">  <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">pre</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">  <span class="type">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == n || a[i] != a[i - <span class="number">1</span>]) &#123;</span><br><span class="line">      val.<span class="built_in">push_back</span>(a[i - <span class="number">1</span>]);</span><br><span class="line">      count.<span class="built_in">push_back</span>(cnt);</span><br><span class="line">      pre.<span class="built_in">push_back</span>(pre.<span class="built_in">back</span>() + cnt);</span><br><span class="line">      cnt = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> max_bits = (<span class="number">8</span> * I) / n;</span><br><span class="line">  <span class="type">int</span> K;</span><br><span class="line">  <span class="keyword">if</span> (max_bits &gt;= <span class="number">20</span>) &#123;</span><br><span class="line">    K = val.<span class="built_in">size</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    K = <span class="built_in">min</span>((<span class="type">int</span>)val.<span class="built_in">size</span>(), <span class="number">1LL</span> &lt;&lt; max_bits);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> cht = n;</span><br><span class="line">  <span class="type">int</span> tot_val = val.<span class="built_in">size</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> lo = <span class="number">0</span>, hi = <span class="number">0</span>; hi &lt; tot_val; hi++) &#123;</span><br><span class="line">    <span class="keyword">while</span> (hi - lo + <span class="number">1</span> &gt; K) &#123;</span><br><span class="line">      lo++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> unchanged = pre[hi + <span class="number">1</span>] - pre[lo];</span><br><span class="line">    <span class="type">int</span> changes = n - unchanged;</span><br><span class="line">    cht = <span class="built_in">min</span>(cht, changes);</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; cht &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">  cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// cin &gt;&gt; T;</span></span><br><span class="line">  <span class="keyword">while</span> (T--) <span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;个人训练赛20241211&quot;&gt;&lt;a href=&quot;#个人训练赛20241211&quot; class=&quot;headerlink&quot; title=&quot;个人训练赛20241211&quot;&gt;&lt;/a&gt;个人训练赛20241211&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#c-diamond-</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>分块莫队</title>
    <link href="https://www.lansganbs.cn/posts/65b2d74f.html"/>
    <id>https://www.lansganbs.cn/posts/65b2d74f.html</id>
    <published>2024-12-30T13:34:19.000Z</published>
    <updated>2025-01-02T02:21:15.202Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分块算法"><a href="#分块算法" class="headerlink" title="分块算法"></a>分块算法</h1><h2 id="什么是分块算法"><a href="#什么是分块算法" class="headerlink" title="什么是分块算法"></a>什么是分块算法</h2><p>分块是一种思想，对整块整体处理，对零散快单独处理。</p><p>分块实际上就是暴力，不过可以被称为“优雅的暴力”。分块能解决很多类型的问题，很多算法也利用了分块的思想并进行优化。莫队的很多题目中也会一并使用分块来解决。</p><p>另外分块也可以分为图论分块，数论分块，字符串分块，数据结构分块等等，分块所设计的领域非常广，往往也可以使用分块来解决一些看似需要高深算法来解决的问题。</p><p>例如：<a href="https://www.luogu.com.cn/problem/P3372">P3372 【模板】线段树 1</a></p><p>显然利用现在所学知识无法在 $O(nlogn)$ 的时间复杂度下来解决此问题，那么这时我们可以考虑使用这种算法。</p><h2 id="何时分块"><a href="#何时分块" class="headerlink" title="何时分块"></a>何时分块</h2><p>再给出一个块，块长为$N$，要求求解区间 $[l,r]$ 的部分相关问题，如求解区间 $[l,r]$ 的最大值，最小值和区间和等问题。这时我们可以来维护区间 $[l,r]$内的块和附近的少量元素。</p><h2 id="如何分块"><a href="#如何分块" class="headerlink" title="如何分块"></a>如何分块</h2><h3 id="块长"><a href="#块长" class="headerlink" title="块长"></a>块长</h3><p>首先我们考虑这个块应该分多长</p><ul><li>长度为$1$？长度为$n$？如分</li><li>长度为$\frac{n}{2}$ 依然很难维护</li><li>长度为$logn$ 需要维护$\frac{n}{logn}$的块 假设数据范围为$2e5$ 是大约$38000$个块</li><li>长度为$\sqrt{n}$ 需要维护$\sqrt{n}$的块 只需要维护$450$个块</li></ul><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li>$n$次询问，长度为$m$，时间复杂度为 $O(n\sqrt{m})$，准确来说为$O(n\sqrt{n}+n\sqrt{m})$</li></ul><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>我们具体需要维护的有如下三点：</p><ul><li>在前面的一部分零散的元素</li><li>中间的若干个整块</li><li>后面的一部分零散的元素</li></ul><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><p><a href="https://www.luogu.com.cn/problem/P3372">P3372 【模板】线段树 1</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;bits/extc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// using namespace __gnu_pbds;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ture true</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> flase false</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pow power</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) begin(x), end(x)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gcd(a, b) gcdint(a, b)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lcm(a, b) (a / gcd(a, b) * b)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(x) (int)x.size()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EPS 1e-7</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> i64 long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> i128 __int128</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> tcT template &lt;class T</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> tcTU tcT, class U</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">unsyncIO</span><span class="params">()</span> </span>&#123; cin.<span class="built_in">tie</span>(<span class="number">0</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setPrec</span><span class="params">()</span> </span>&#123; cout &lt;&lt; fixed &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">15</span>); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setIO</span><span class="params">()</span> </span>&#123; <span class="built_in">unsyncIO</span>(), <span class="built_in">setPrec</span>(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">gcdint</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> b ? <span class="built_in">gcdint</span>(b, a % b) : a; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> i128 <span class="title">gcd128</span><span class="params">(i128 a, i128 b)</span> </span>&#123; <span class="keyword">return</span> b ? <span class="built_in">gcd128</span>(b, a % b) : a; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">cdiv</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a / b + ((a ^ b) &gt; <span class="number">0</span> &amp;&amp; a % b); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">fdiv</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a / b - ((a ^ b) &lt; <span class="number">0</span> &amp;&amp; a % b); &#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; <span class="keyword">using</span> V = vector&lt;T&gt;;</span><br><span class="line">tcTU &gt; <span class="keyword">using</span> PR = pair&lt;T, U&gt;;</span><br><span class="line">tcTU &gt; <span class="keyword">using</span> MP = map&lt;T, U&gt;;</span><br><span class="line">tcTU &gt; <span class="keyword">using</span> VP = vector&lt;pair&lt;T, U&gt;&gt;;</span><br><span class="line">tcT &gt; <span class="keyword">using</span> pqg = priority_queue&lt;T, vector&lt;T&gt;, greater&lt;T&gt;&gt;;</span><br><span class="line">tcT &gt; <span class="keyword">using</span> pql = priority_queue&lt;T, vector&lt;T&gt;, less&lt;T&gt;&gt;;</span><br><span class="line"></span><br><span class="line">tcTU &gt; istream &amp;<span class="keyword">operator</span>&gt;&gt;(istream &amp;in, pair&lt;T, U&gt; &amp;a) &#123;</span><br><span class="line">  <span class="keyword">return</span> in &gt;&gt; a.first &gt;&gt; a.second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; istream &amp;<span class="keyword">operator</span>&gt;&gt;(istream &amp;in, vector&lt;T&gt; &amp;a) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) &#123;</span><br><span class="line">    in &gt;&gt; x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="type">const</span> pair&lt;T, U&gt; &amp;a) &#123;</span><br><span class="line">  <span class="keyword">return</span> out &lt;&lt; a.first &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; a.second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="type">const</span> vector&lt;pair&lt;T, U&gt;&gt; &amp;a) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) &#123;</span><br><span class="line">    out &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="type">const</span> vector&lt;T&gt; &amp;a) &#123;</span><br><span class="line">  <span class="type">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">  <span class="keyword">if</span> (!n) &#123;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">  &#125;</span><br><span class="line">  out &lt;&lt; a[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">    out &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; a[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, i128 n) &#123;</span><br><span class="line">  std::string s;</span><br><span class="line">  <span class="keyword">while</span> (n) &#123;</span><br><span class="line">    s += <span class="string">&#x27;0&#x27;</span> + n % <span class="number">10</span>;</span><br><span class="line">    n /= <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  std::<span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">  <span class="keyword">return</span> os &lt;&lt; s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">power</span><span class="params">(<span class="type">int</span> a, i64 b, <span class="type">int</span> p = <span class="number">1e9</span> + <span class="number">7</span>)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; b; b /= <span class="number">2</span>, a = <span class="number">1LL</span> * a * a % p) &#123;</span><br><span class="line">    <span class="keyword">if</span> (b % <span class="number">2</span>) &#123;</span><br><span class="line">      res = <span class="number">1LL</span> * res * a % p;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; <span class="function"><span class="type">bool</span> <span class="title">ckmin</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> b &lt; a ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line">tcT &gt; <span class="function"><span class="type">bool</span> <span class="title">ckmax</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; <span class="function"><span class="type">void</span> <span class="title">remDup</span><span class="params">(vector&lt;T&gt; &amp;v)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">sort</span>(<span class="built_in">all</span>(v));</span><br><span class="line">  v.<span class="built_in">erase</span>(<span class="built_in">unique</span>(<span class="built_in">all</span>(v)), <span class="built_in">end</span>(v));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; <span class="function"><span class="type">void</span> <span class="title">erase</span><span class="params">(T &amp;t, <span class="type">const</span> U &amp;u)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">auto</span> it = t.<span class="built_in">find</span>(u);</span><br><span class="line">  <span class="built_in">assert</span>(it != <span class="built_in">end</span>(t));</span><br><span class="line">  t.<span class="built_in">erase</span>(it);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; <span class="function">T <span class="title">fstTrue</span><span class="params">(T lo, T hi, U f)</span> </span>&#123;</span><br><span class="line">  hi++;</span><br><span class="line">  <span class="built_in">assert</span>(lo &lt;= hi);</span><br><span class="line">  <span class="keyword">while</span> (lo &lt; hi) &#123;</span><br><span class="line">    T mid = lo + (hi - lo) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">f</span>(mid) ? hi = mid : lo = mid + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> lo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; <span class="function">T <span class="title">lstTrue</span><span class="params">(T lo, T hi, U f)</span> </span>&#123;</span><br><span class="line">  lo--;</span><br><span class="line">  <span class="built_in">assert</span>(lo &lt;= hi);</span><br><span class="line">  <span class="keyword">while</span> (lo &lt; hi) &#123;</span><br><span class="line">    T mid = lo + (hi - lo + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">f</span>(mid) ? lo = mid : hi = mid - <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> lo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N = <span class="number">1.01e6</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> M = <span class="number">2.01e3</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;C:/Users/70510/Desktop/Others/algo/debug.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(...) 42</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[N], st[N], ed[N], sum[N], add[N], len, id[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (id[l] == id[r]) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= r; i++) &#123;</span><br><span class="line">      a[i] += k;</span><br><span class="line">      sum[id[i]] += k;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= ed[l]; i++) &#123;</span><br><span class="line">      a[i] += k;</span><br><span class="line">      sum[id[i]] += k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = st[r]; i &lt;= r; i++) &#123;</span><br><span class="line">      a[i] += k;</span><br><span class="line">      sum[id[i]] += k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = id[l] + <span class="number">1</span>; i &lt; id[r]; i++) &#123;</span><br><span class="line">      add[i] += k;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (id[l] == id[r]) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= r; i++) &#123;</span><br><span class="line">      ans += a[i] + add[id[i]];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= ed[l]; i++) &#123;</span><br><span class="line">      ans += a[i] + add[id[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = st[r]; i &lt;= r; i++) &#123;</span><br><span class="line">      ans += a[i] + add[id[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = id[l] + <span class="number">1</span>; i &lt; id[r]; i++) &#123;</span><br><span class="line">      ans += sum[i] + add[i] * (ed[i] - st[i] + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> n, m;</span><br><span class="line">  cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">  len = <span class="built_in">sqrt</span>(n);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    cin &gt;&gt; a[i];</span><br><span class="line">    id[i] = (i - <span class="number">1</span>) / len + <span class="number">1</span>;</span><br><span class="line">    st[i] = (id[i] - <span class="number">1</span>) * len + <span class="number">1</span>;</span><br><span class="line">    ed[i] = <span class="built_in">min</span>(id[i] * len, n);</span><br><span class="line">    sum[id[i]] += a[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">    <span class="type">int</span> op, x, y, k;</span><br><span class="line">    cin &gt;&gt; op &gt;&gt; x &gt;&gt; y;</span><br><span class="line">    <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">      cin &gt;&gt; k;</span><br><span class="line">      <span class="built_in">change</span>(x, y, k);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      cout &lt;&lt; <span class="built_in">query</span>(x, y) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">setIO</span>();</span><br><span class="line">  <span class="type">int</span> tt = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// cin &gt;&gt; tt;</span></span><br><span class="line">  <span class="keyword">while</span> (tt--) &#123;</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.luogu.com.cn/problem/P3865">P3865 【模板】ST 表 &amp;&amp; RMQ 问题</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;bits/extc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// using namespace __gnu_pbds;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ture true</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> flase false</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pow power</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) begin(x), end(x)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gcd(a, b) gcdint(a, b)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lcm(a, b) (a / gcd(a, b) * b)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(x) (int)x.size()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EPS 1e-7</span></span><br><span class="line"><span class="comment">// #define int ll</span></span><br><span class="line"><span class="comment">// #define ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> i64 long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> i128 __int128</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> tcT template &lt;class T</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> tcTU tcT, class U</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">unsyncIO</span><span class="params">()</span> </span>&#123; cin.<span class="built_in">tie</span>(<span class="number">0</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setPrec</span><span class="params">()</span> </span>&#123; cout &lt;&lt; fixed &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">15</span>); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setIO</span><span class="params">()</span> </span>&#123; <span class="built_in">unsyncIO</span>(), <span class="built_in">setPrec</span>(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">gcdint</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> b ? <span class="built_in">gcdint</span>(b, a % b) : a; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> i128 <span class="title">gcd128</span><span class="params">(i128 a, i128 b)</span> </span>&#123; <span class="keyword">return</span> b ? <span class="built_in">gcd128</span>(b, a % b) : a; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">cdiv</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a / b + ((a ^ b) &gt; <span class="number">0</span> &amp;&amp; a % b); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">fdiv</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a / b - ((a ^ b) &lt; <span class="number">0</span> &amp;&amp; a % b); &#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; <span class="keyword">using</span> V = vector&lt;T&gt;;</span><br><span class="line">tcTU &gt; <span class="keyword">using</span> PR = pair&lt;T, U&gt;;</span><br><span class="line">tcTU &gt; <span class="keyword">using</span> MP = map&lt;T, U&gt;;</span><br><span class="line">tcTU &gt; <span class="keyword">using</span> VP = vector&lt;pair&lt;T, U&gt;&gt;;</span><br><span class="line">tcT &gt; <span class="keyword">using</span> pqg = priority_queue&lt;T, vector&lt;T&gt;, greater&lt;T&gt;&gt;;</span><br><span class="line">tcT &gt; <span class="keyword">using</span> pql = priority_queue&lt;T, vector&lt;T&gt;, less&lt;T&gt;&gt;;</span><br><span class="line"></span><br><span class="line">tcTU &gt; istream &amp;<span class="keyword">operator</span>&gt;&gt;(istream &amp;in, pair&lt;T, U&gt; &amp;a) &#123;</span><br><span class="line">  <span class="keyword">return</span> in &gt;&gt; a.first &gt;&gt; a.second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; istream &amp;<span class="keyword">operator</span>&gt;&gt;(istream &amp;in, vector&lt;T&gt; &amp;a) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) &#123;</span><br><span class="line">    in &gt;&gt; x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="type">const</span> pair&lt;T, U&gt; &amp;a) &#123;</span><br><span class="line">  <span class="keyword">return</span> out &lt;&lt; a.first &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; a.second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="type">const</span> vector&lt;pair&lt;T, U&gt;&gt; &amp;a) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) &#123;</span><br><span class="line">    out &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="type">const</span> vector&lt;T&gt; &amp;a) &#123;</span><br><span class="line">  <span class="type">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">  <span class="keyword">if</span> (!n) &#123;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">  &#125;</span><br><span class="line">  out &lt;&lt; a[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">    out &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; a[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, i128 n) &#123;</span><br><span class="line">  std::string s;</span><br><span class="line">  <span class="keyword">while</span> (n) &#123;</span><br><span class="line">    s += <span class="string">&#x27;0&#x27;</span> + n % <span class="number">10</span>;</span><br><span class="line">    n /= <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  std::<span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">  <span class="keyword">return</span> os &lt;&lt; s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">power</span><span class="params">(<span class="type">int</span> a, i64 b, <span class="type">int</span> p = <span class="number">1e9</span> + <span class="number">7</span>)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; b; b /= <span class="number">2</span>, a = <span class="number">1LL</span> * a * a % p) &#123;</span><br><span class="line">    <span class="keyword">if</span> (b % <span class="number">2</span>) &#123;</span><br><span class="line">      res = <span class="number">1LL</span> * res * a % p;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; <span class="function"><span class="type">bool</span> <span class="title">ckmin</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> b &lt; a ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line">tcT &gt; <span class="function"><span class="type">bool</span> <span class="title">ckmax</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; <span class="function"><span class="type">void</span> <span class="title">remDup</span><span class="params">(vector&lt;T&gt; &amp;v)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">sort</span>(<span class="built_in">all</span>(v));</span><br><span class="line">  v.<span class="built_in">erase</span>(<span class="built_in">unique</span>(<span class="built_in">all</span>(v)), <span class="built_in">end</span>(v));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; <span class="function"><span class="type">void</span> <span class="title">erase</span><span class="params">(T &amp;t, <span class="type">const</span> U &amp;u)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">auto</span> it = t.<span class="built_in">find</span>(u);</span><br><span class="line">  <span class="built_in">assert</span>(it != <span class="built_in">end</span>(t));</span><br><span class="line">  t.<span class="built_in">erase</span>(it);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; <span class="function">T <span class="title">fstTrue</span><span class="params">(T lo, T hi, U f)</span> </span>&#123;</span><br><span class="line">  hi++;</span><br><span class="line">  <span class="built_in">assert</span>(lo &lt;= hi);</span><br><span class="line">  <span class="keyword">while</span> (lo &lt; hi) &#123;</span><br><span class="line">    T mid = lo + (hi - lo) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">f</span>(mid) ? hi = mid : lo = mid + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> lo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; <span class="function">T <span class="title">lstTrue</span><span class="params">(T lo, T hi, U f)</span> </span>&#123;</span><br><span class="line">  lo--;</span><br><span class="line">  <span class="built_in">assert</span>(lo &lt;= hi);</span><br><span class="line">  <span class="keyword">while</span> (lo &lt; hi) &#123;</span><br><span class="line">    T mid = lo + (hi - lo + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">f</span>(mid) ? lo = mid : hi = mid - <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> lo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N = <span class="number">1.01e6</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> M = <span class="number">2.01e3</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;C:/Users/70510/Desktop/Others/algo/debug.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(...) 42</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> st[N], ed[N], mx[N], id[N], a[N], len;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> l, r;</span><br><span class="line">  cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">  <span class="keyword">if</span> (id[l] == id[r]) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= r; i++) &#123;</span><br><span class="line">      ans = <span class="built_in">max</span>(ans, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= ed[id[l]]; i++) &#123;</span><br><span class="line">      ans = <span class="built_in">max</span>(ans, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = st[id[r]]; i &lt;= r; i++) &#123;</span><br><span class="line">      ans = <span class="built_in">max</span>(ans, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = id[l] + <span class="number">1</span>; i &lt;= id[r] - <span class="number">1</span>; i++) &#123;</span><br><span class="line">      ans = <span class="built_in">max</span>(ans, mx[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> n, m;</span><br><span class="line">  cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">  len = <span class="built_in">sqrt</span>(n);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    cin &gt;&gt; a[i];</span><br><span class="line">    id[i] = (i - <span class="number">1</span>) / len + <span class="number">1</span>;</span><br><span class="line">    st[id[i]] = (id[i] - <span class="number">1</span>) * len + <span class="number">1</span>;</span><br><span class="line">    ed[id[i]] = id[i] * len;</span><br><span class="line">    mx[id[i]] = (i == st[id[i]]) ? a[i] : <span class="built_in">max</span>(mx[id[i]], a[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">query</span>() &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">setIO</span>();</span><br><span class="line">  <span class="type">int</span> tt = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// cin &gt;&gt; tt;</span></span><br><span class="line">  <span class="keyword">while</span> (tt--) &#123;</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="莫队算法"><a href="#莫队算法" class="headerlink" title="莫队算法"></a>莫队算法</h1><h2 id="莫队？"><a href="#莫队？" class="headerlink" title="莫队？"></a>莫队？</h2><p><img src="https://www.helloimg.com/i/2024/12/31/67739c7de6971.png"></p><p><img src="https://www.helloimg.com/i/2024/12/31/67739c80732bc.png"></p><h2 id="何为莫队算法"><a href="#何为莫队算法" class="headerlink" title="何为莫队算法"></a>何为莫队算法</h2><p>为了解决区间问题，最开始的区间问题是前缀和，然后出现越来越难的问题，越来越困难的算法：分块，RMQ，树状数组，线段树等等，于是莫队算法出现，就是为了解决这类的区间问题。</p><h2 id="分块算法和莫队算法的异同"><a href="#分块算法和莫队算法的异同" class="headerlink" title="分块算法和莫队算法的异同"></a>分块算法和莫队算法的异同</h2><p>同：</p><ul><li>都是为了解决区间问题而存在</li></ul><p>异：</p><ul><li>莫队查询的更快 但是只能离线查询</li><li>分块查询的更慢 但是可以在线查询</li></ul><blockquote><p>离线查询：查询操作是在已知所有查询的情况下进行的。也就是说，在开始查询之前，所有的查询都已经确定并且可以提前处理。</p><p>在线查询：查询操作是在不知道所有查询内容的情况下进行的。每次查询时都立即处理，不会提前对查询进行任何优化。查询顺序通常是动态的。</p></blockquote><h2 id="莫队算法基本原理"><a href="#莫队算法基本原理" class="headerlink" title="莫队算法基本原理"></a>莫队算法基本原理</h2><p>利用双指针来进行区间的移动查询</p><h2 id="莫队算法的核心"><a href="#莫队算法的核心" class="headerlink" title="莫队算法的核心"></a>莫队算法的核心</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (l &gt; q[i].l) &#123;</span><br><span class="line">  <span class="built_in">add</span>(a[--l]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (r &lt; q[i].r) &#123;</span><br><span class="line">  <span class="built_in">add</span>(a[++r]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (l &lt; q[i].l) &#123;</span><br><span class="line">  <span class="built_in">del</span>(a[l++]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (r &gt; q[i].r) &#123;</span><br><span class="line">      <span class="built_in">del</span>(a[r--]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体实现</p><p><a href="https://www.luogu.com.cn/problem/P1494">P1494 [国家集训队] 小 Z 的袜子</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;bits/extc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// using namespace __gnu_pbds;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ture true</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> flase false</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pow power</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) begin(x), end(x)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gcd(a, b) gcdint(a, b)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lcm(a, b) (a / gcd(a, b) * b)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(x) (int)x.size()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EPS 1e-7</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> i64 long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> i128 __int128</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> tcT template &lt;class T</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> tcTU tcT, class U</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">unsyncIO</span><span class="params">()</span> </span>&#123; cin.<span class="built_in">tie</span>(<span class="number">0</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setPrec</span><span class="params">()</span> </span>&#123; cout &lt;&lt; fixed &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">15</span>); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setIO</span><span class="params">()</span> </span>&#123; <span class="built_in">unsyncIO</span>(), <span class="built_in">setPrec</span>(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">gcdint</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> b ? <span class="built_in">gcdint</span>(b, a % b) : a; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> i128 <span class="title">gcd128</span><span class="params">(i128 a, i128 b)</span> </span>&#123; <span class="keyword">return</span> b ? <span class="built_in">gcd128</span>(b, a % b) : a; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">cdiv</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a / b + ((a ^ b) &gt; <span class="number">0</span> &amp;&amp; a % b); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">fdiv</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a / b - ((a ^ b) &lt; <span class="number">0</span> &amp;&amp; a % b); &#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; <span class="keyword">using</span> V = vector&lt;T&gt;;</span><br><span class="line">tcTU &gt; <span class="keyword">using</span> PR = pair&lt;T, U&gt;;</span><br><span class="line">tcTU &gt; <span class="keyword">using</span> MP = map&lt;T, U&gt;;</span><br><span class="line">tcTU &gt; <span class="keyword">using</span> VP = vector&lt;pair&lt;T, U&gt;&gt;;</span><br><span class="line">tcT &gt; <span class="keyword">using</span> pqg = priority_queue&lt;T, vector&lt;T&gt;, greater&lt;T&gt;&gt;;</span><br><span class="line">tcT &gt; <span class="keyword">using</span> pql = priority_queue&lt;T, vector&lt;T&gt;, less&lt;T&gt;&gt;;</span><br><span class="line"></span><br><span class="line">tcTU &gt; istream &amp;<span class="keyword">operator</span>&gt;&gt;(istream &amp;in, pair&lt;T, U&gt; &amp;a) &#123;</span><br><span class="line">  <span class="keyword">return</span> in &gt;&gt; a.first &gt;&gt; a.second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; istream &amp;<span class="keyword">operator</span>&gt;&gt;(istream &amp;in, vector&lt;T&gt; &amp;a) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) &#123;</span><br><span class="line">    in &gt;&gt; x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="type">const</span> pair&lt;T, U&gt; &amp;a) &#123;</span><br><span class="line">  <span class="keyword">return</span> out &lt;&lt; a.first &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; a.second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="type">const</span> vector&lt;pair&lt;T, U&gt;&gt; &amp;a) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) &#123;</span><br><span class="line">    out &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="type">const</span> vector&lt;T&gt; &amp;a) &#123;</span><br><span class="line">  <span class="type">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">  <span class="keyword">if</span> (!n) &#123;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">  &#125;</span><br><span class="line">  out &lt;&lt; a[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">    out &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; a[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, i128 n) &#123;</span><br><span class="line">  std::string s;</span><br><span class="line">  <span class="keyword">while</span> (n) &#123;</span><br><span class="line">    s += <span class="string">&#x27;0&#x27;</span> + n % <span class="number">10</span>;</span><br><span class="line">    n /= <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  std::<span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">  <span class="keyword">return</span> os &lt;&lt; s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">power</span><span class="params">(<span class="type">int</span> a, i64 b, <span class="type">int</span> p = <span class="number">1e9</span> + <span class="number">7</span>)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; b; b /= <span class="number">2</span>, a = <span class="number">1LL</span> * a * a % p) &#123;</span><br><span class="line">    <span class="keyword">if</span> (b % <span class="number">2</span>) &#123;</span><br><span class="line">      res = <span class="number">1LL</span> * res * a % p;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; <span class="function"><span class="type">bool</span> <span class="title">ckmin</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> b &lt; a ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line">tcT &gt; <span class="function"><span class="type">bool</span> <span class="title">ckmax</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; <span class="function"><span class="type">void</span> <span class="title">remDup</span><span class="params">(vector&lt;T&gt; &amp;v)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">sort</span>(<span class="built_in">all</span>(v));</span><br><span class="line">  v.<span class="built_in">erase</span>(<span class="built_in">unique</span>(<span class="built_in">all</span>(v)), <span class="built_in">end</span>(v));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; <span class="function"><span class="type">void</span> <span class="title">erase</span><span class="params">(T &amp;t, <span class="type">const</span> U &amp;u)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">auto</span> it = t.<span class="built_in">find</span>(u);</span><br><span class="line">  <span class="built_in">assert</span>(it != <span class="built_in">end</span>(t));</span><br><span class="line">  t.<span class="built_in">erase</span>(it);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; <span class="function">T <span class="title">fstTrue</span><span class="params">(T lo, T hi, U f)</span> </span>&#123;</span><br><span class="line">  hi++;</span><br><span class="line">  <span class="built_in">assert</span>(lo &lt;= hi);</span><br><span class="line">  <span class="keyword">while</span> (lo &lt; hi) &#123;</span><br><span class="line">    T mid = lo + (hi - lo) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">f</span>(mid) ? hi = mid : lo = mid + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> lo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; <span class="function">T <span class="title">lstTrue</span><span class="params">(T lo, T hi, U f)</span> </span>&#123;</span><br><span class="line">  lo--;</span><br><span class="line">  <span class="built_in">assert</span>(lo &lt;= hi);</span><br><span class="line">  <span class="keyword">while</span> (lo &lt; hi) &#123;</span><br><span class="line">    T mid = lo + (hi - lo + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">f</span>(mid) ? lo = mid : hi = mid - <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> lo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N = <span class="number">1.01e6</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> M = <span class="number">2.01e3</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;C:/Users/70510/Desktop/Others/algo/debug.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(...) 42</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[N], sum, ans1[N], len, ans2[N], cnt[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">query</span> &#123;</span><br><span class="line">  <span class="type">int</span> l, r, id;</span><br><span class="line">&#125; q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">  sum += cnt[x];</span><br><span class="line">  cnt[x]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">  cnt[x]--;</span><br><span class="line">  sum -= cnt[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> n, m;</span><br><span class="line">  cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">  len = <span class="built_in">sqrt</span>(n);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    cin &gt;&gt; a[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">    cin &gt;&gt; q[i].l &gt;&gt; q[i].r;</span><br><span class="line">    q[i].id = i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">sort</span>(q + <span class="number">1</span>, q + m + <span class="number">1</span>, [](<span class="type">const</span> query &amp;lhs, <span class="type">const</span> query &amp;rhs) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((lhs.l - <span class="number">1</span>) / len != (rhs.l - <span class="number">1</span>) / len) <span class="keyword">return</span> lhs.l &lt; rhs.l;</span><br><span class="line">    <span class="keyword">return</span> lhs.r &lt; rhs.r;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, l = <span class="number">1</span>, r = <span class="number">0</span>; i &lt;= m; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (q[i].l == q[i].r) &#123;</span><br><span class="line">      ans1[q[i].id] = <span class="number">0</span>;</span><br><span class="line">      ans2[q[i].id] = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (l &gt; q[i].l) &#123;</span><br><span class="line">      <span class="built_in">add</span>(a[--l]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (r &lt; q[i].r) &#123;</span><br><span class="line">      <span class="built_in">add</span>(a[++r]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; q[i].l) &#123;</span><br><span class="line">      <span class="built_in">del</span>(a[l++]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (r &gt; q[i].r) &#123;</span><br><span class="line">      <span class="built_in">del</span>(a[r--]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sum == <span class="number">0</span>) &#123;</span><br><span class="line">      ans1[q[i].id] = <span class="number">0</span>;</span><br><span class="line">      ans2[q[i].id] = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ans1[q[i].id] = sum;</span><br><span class="line">    ans2[q[i].id] = (r - l + <span class="number">1</span>) * (r - l) / <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> t = __gcd(ans1[q[i].id], ans2[q[i].id]);</span><br><span class="line">    ans1[q[i].id] /= t;</span><br><span class="line">    ans2[q[i].id] /= t;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">    cout &lt;&lt; ans1[i] &lt;&lt; <span class="string">&#x27;/&#x27;</span> &lt;&lt; ans2[i] &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">setIO</span>();</span><br><span class="line">  <span class="type">int</span> tt = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// cin &gt;&gt; tt;</span></span><br><span class="line">  <span class="keyword">while</span> (tt--) &#123;</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="普通莫队的优化"><a href="#普通莫队的优化" class="headerlink" title="普通莫队的优化"></a>普通莫队的优化</h2><h3 id="奇偶排序优化"><a href="#奇偶排序优化" class="headerlink" title="奇偶排序优化"></a>奇偶排序优化</h3><p>对于如下数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">设块的大小为2</span><br><span class="line">1 1</span><br><span class="line">2 100</span><br><span class="line">3 1</span><br><span class="line">4 100</span><br></pre></td></tr></table></figure><p>经过排序后的等效数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 1</span><br><span class="line">2 100</span><br><span class="line">3 1</span><br><span class="line">4 100</span><br></pre></td></tr></table></figure><p>手动模拟一下可以发现， 指针的移动次数大概为$ 300 $次，我们处理完第一个<strong>块</strong>之后$(l&#x3D;2，r&#x3D;100)$，此时只需要移动2次指针到$l&#x3D;4, r&#x3D;100$就可以得到第四个询问的答案，再移动$100$次到$l&#x3D;3，r&#x3D;1$就可以得到第三次询问的答案，但是我们却将指针移动$100$次到$l&#x3D;3，r&#x3D;1$来获取第三个询问的答案，再移动$100$次到$l&#x3D;4，r&#x3D;100$获取第四个询问的答案，这样多了$98$次的指针移动。我们怎么优化这个地方呢？</p><p>这里我们就要用到奇偶化排序。什么是奇偶化排序？奇偶化排序即对于属于奇数块的询问，$r$按从小到大排序，对于属于偶数块的排序，$r$从大到小排序，这样我们的$r$指针在处理完这个奇数块的问题后，将在返回的途中处理偶数块的问题，再向$n$移动处理下一个奇数块的问题，优化了$r$指针的移动次数，理论上能快一倍。</p><p>优化后并排序后的等效数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 1</span><br><span class="line">2 100</span><br><span class="line">4 100</span><br><span class="line">3 1</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sort</span>(q + <span class="number">1</span>, q + m + <span class="number">1</span>, [](<span class="type">const</span> query &amp;lhs, <span class="type">const</span> query &amp;rhs) &#123;</span><br><span class="line">  <span class="keyword">if</span> ((lhs.l - <span class="number">1</span>) / len != (rhs.l - <span class="number">1</span>) / len) &#123;</span><br><span class="line">    <span class="keyword">return</span> lhs.l &lt; rhs.l;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (((lhs.l - <span class="number">1</span>) / len + <span class="number">1</span>) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> lhs.r &lt; rhs.r;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> lhs.r &gt; rhs.r;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> pos[a.l] ^ pos[b.l] ? pos[a.l] &lt; pos[b.l] : pos[a.l] &amp; <span class="number">1</span> ? a.r &lt; b.r : a.r &gt; b.r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="块的大小优化"><a href="#块的大小优化" class="headerlink" title="块的大小优化"></a>块的大小优化</h3><p><img src="https://www.helloimg.com/i/2024/12/31/67739c8b76491.png" alt="image-20241230191612258"></p><p>网上大多都说分块大小取$\sqrt{m}$最优，此时时间复杂度为$O(n\sqrt{n})$，实际上这是不严谨的，当$n$，$m$差距较大时使用$\sqrt{n}$作为分块大小效率会明显降低。</p><hr><p>$n$次询问，长度为$m$，块大小为$\sqrt{m}$的莫队，时间复杂度为$O(n\sqrt{n})$</p><p>具体证明方法有多种：</p><ul><li>第一种（By yihang_01）</li></ul><p><img src="https://www.helloimg.com/i/2024/12/31/67739c875b97b.png"></p><ul><li>第二种</li></ul><p><img src="https://www.helloimg.com/i/2024/12/31/67739c8105268.png"></p><ul><li>第三种</li></ul><p>分块相同时，右端点递增是$O(n)$的，分块共有$O(\sqrt{n})$个，复杂度为$n^{1.5}$</p><p>分块转移时，右端点最多变化$N$，分块共有$O(\sqrt{n})$个，复杂度为$n^{1.5}$</p><p>分块相同时，左端点最多变化$\sqrt{n}$，分块转移时，左端点最多变化$2\sqrt{n}$</p><p>共有$N$个询问，复杂度为$n^{1.5}$</p><hr><p>$n$次询问，长度为$m$，块大小为$\sqrt{m}$的莫队，时间复杂度为$O(n\sqrt{m})$</p><p>设每一块的大小为$T$，序列长为$n$，询问个数为$m$。</p><p>那么最多有$\frac{n}{T}$块。</p><p>对于右端点的移动，每一块最多移动$n$次，有$\frac{n}{T}$块，所以右端点时间复杂度为$ O\left(\frac{n^2}{T}\right)$。</p><p>对于左端点的移动，每一次最多移动$T$次，有$m$次移动，所以左端点时间复杂度为$O(mT)$。</p><p>那么总时间复杂度为$O\left(\frac{n^2}{T} + mT\right)$。</p><p>设$\frac{n^2}{T} + mT &#x3D; S$。</p><p>原式等于$n^2 + mT^2 - ST &#x3D; 0$。</p><p>这样变为一个经典的二次函数求最小值的问题。</p><p>$\Delta &#x3D; S^2 - 4mn^2 \geq 0$</p><p>为取到最小值，$\Delta &#x3D; 0$。</p><p>那么$S^2 - 4mn^2 &#x3D; 0$。</p><p>$S^2 &#x3D; 4mn^2$</p><p>$S &#x3D; 2\sqrt{mn}$</p><p>代入回$x &#x3D; -\frac{b}{2a} + \frac{\sqrt{\Delta}}{2a}$</p><p>算出$T &#x3D; \frac{n}{\sqrt{m}}$</p><h2 id="其他莫队"><a href="#其他莫队" class="headerlink" title="其他莫队"></a>其他莫队</h2><h3 id="带修莫队"><a href="#带修莫队" class="headerlink" title="带修莫队"></a>带修莫队</h3><p>前面说过，普通莫队只能解决没有修改的问题，那么如果想解决修改问题呢？</p><p><a href="https://www.luogu.com.cn/problem/P1903">P1903 [国家集训队] 数颜色 &#x2F; 维护队列</a></p><p>那就需要带修莫队，带修莫队就是一种支持修改查询的莫队。</p><p>普通莫队是把点经过排序，下一次询问是从上一次询问转移而来，但是有修改的问题在经过排序后，查询的结果也会随着排序而改变，把所有的修改操作加上一个时间戳$[l,r,time]$。</p><p>排序规则：第一关键字为左端点所在块$\frac{l}{B}$，第二关键字为右端点所在块$\frac{r}{B}$，第三关键字是时间$t$。</p><p>每次询问先做区间拓展，再考虑时间戳，也就是之前的修改对当次查询的影响。</p><p>(1)$j$ &gt; $i$，则把$i+1$到$j$个修改的贡献加上</p><p>(2)$j$ &lt; $i$，则把$i$到$j+1$个修改的贡献还原</p><h4 id="带修莫队的时间复杂度证明"><a href="#带修莫队的时间复杂度证明" class="headerlink" title="带修莫队的时间复杂度证明"></a>带修莫队的时间复杂度证明</h4><p>块的大小为$B^{\frac{2}{3}}$,修改个数为$c$，询问次数为$q$，则总移动次数为$O(\frac{cn^{2}}{B^{2}}+qB+\frac{n^{2}}{B})$，操作次数为$m$的话，则为$O(\frac{mn^{2}}{B^{2}}+mB+\frac{n^{2}}{B})$。</p><p>$B$可以取$B&#x3D;\frac{n^2}{3^{\frac{1}{2}}(9m^3n^2+\sqrt{3}\sqrt{27m^6n^4-m^3n^6})^{\frac{1}{3}}}+ \frac{(9m^3n^2+\sqrt{3}\sqrt{27m^6n^4 - m^3n^6})^{\frac{1}{3}}}{3^{\frac{2}{3}}m}$</p><p>正常写题时肯定不回去算这么离谱的一个块长$B$，直接视作$n&#x3D;m$的话，就可以得到总移动次数为$O(\frac{n^{3}}{B^{2}}+nB+\frac{n^{2}}{B})$，那么当$B&#x3D;n^{\frac{2}{3}}$时，取得最小值，此时最小值为$O(n^{\frac{5}{3}})$</p><p>综上，带修莫队的渐进时间复杂度为$O(nlogn+n^{\frac{5}{3}})$（视作$n&#x3D;m$），认为是$O(n^{\frac{5}{3}})$。</p><h4 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h4><p>对于询问，我们记录以下值：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">kkk</span> &#123;</span><br><span class="line">  <span class="type">int</span> l;<span class="comment">//左端点</span></span><br><span class="line">  <span class="type">int</span> r;<span class="comment">//右端点</span></span><br><span class="line">  <span class="type">int</span> t;<span class="comment">//此询问前修改数量</span></span><br><span class="line">  <span class="type">int</span> id;<span class="comment">//询问编号</span></span><br><span class="line">&#125;q[maxn];</span><br></pre></td></tr></table></figure><p>对于修改，我们记录以下值：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ttt</span> &#123;</span><br><span class="line">  <span class="type">int</span> id;<span class="comment">//修改位置</span></span><br><span class="line">  <span class="type">int</span> val;<span class="comment">//修改值</span></span><br><span class="line">&#125;c[maxn];</span><br></pre></td></tr></table></figure><p>将原来值对答案的影响抹去，再将修改值对答案的影响加上，然后更新该位置的值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> add(x) &#123;</span></span><br><span class="line">  <span class="keyword">if</span>(++vis[x]==<span class="number">1</span>)sum++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> del(x) &#123;</span></span><br><span class="line">  <span class="keyword">if</span>(--vis[x]==<span class="number">0</span>)sum--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(c[x].id&gt;=l&amp;&amp;c[x].id&lt;=r)&#123;<span class="built_in">del</span>(v[c[x].id]);</span><br><span class="line">  <span class="built_in">add</span>(c[x].val);&#125;<span class="comment">//改变影响</span></span><br><span class="line">  <span class="built_in">swap</span>(c[x].val,v[c[x].id]);<span class="comment">//值更新 *</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">while</span>(now&lt;q[i].t)<span class="built_in">change</span>(++now);<span class="comment">//修改</span></span><br><span class="line"><span class="keyword">while</span>(now&gt;q[i].t)<span class="built_in">change</span>(now--);<span class="comment">//修改</span></span><br></pre></td></tr></table></figure><h3 id="回滚莫队"><a href="#回滚莫队" class="headerlink" title="回滚莫队"></a>回滚莫队</h3><p>当删除或增加的其中一个在操作时，不能或者不方便统计答案时，可以尝试使用回滚莫队解决。</p><p>原题链接</p><p><a href="https://www2.ioi-jp.org/camp/2014/2014-sp-tasks/2014-sp-d1.pdf">歴史の研究(Historical Research)</a><br><a href="https://www2.ioi-jp.org/camp/2014/2014-sp-tasks/index.html">第１３回日本情報オリンピック　春季トレーニング合宿</a></p><p>zh-CN链接</p><p><a href="https://vjudge.net/contest/603288#problem/K">歴史の研究</a></p><h4 id="实现过程-1"><a href="#实现过程-1" class="headerlink" title="实现过程"></a>实现过程</h4><ol><li>对于左右端点在同一块的暴力计算。</li><li>跟普通莫队一样排序，左端点换块时清空答案，把左指针设为左端点所在块的下一块的开头，把右指针设为左端点所在块的最后一位。这样右指针是单调递增的，每处理一个询问时，先记录一些信息（比如答案），再左移左指针并更新答案，然后把左指针移回左端点所在块的下一块的开头，过程中回滚除记录下的信息以外的其它影响，最后把记录下的信息恢复。如：先右移右指针，再记录 ans，然后左移左指针时增加 $cnt$ 并更新 $ans$，回滚时把增加的 $cnt$ 减掉，最后把 $ans$ 回滚为记录的值。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> ONLINE_JUDGE</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N = <span class="number">1e3</span> + <span class="number">7</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, a[N], len, cnt1[N], cnt2[N], ans[N], st[N], ed[N], id[N], b[N], p;<span class="comment">//cnt1 为统计数字个数的桶，cnt2 为处理暴力结果的桶，ans 为答案数组，b 为离散化后的数组，p 为离散化后的数组长度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">query</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r, id;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> query &amp;rhs) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (::id[l] != ::id[rhs.l]) <span class="keyword">return</span> l &lt; rhs.l;</span><br><span class="line">        <span class="keyword">return</span> r &lt; rhs.r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> &amp;tmp)</span> </span>&#123;</span><br><span class="line">    ++cnt1[x];</span><br><span class="line">    tmp = <span class="built_in">max</span>(tmp, cnt1[x] * b[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; --cnt1[x]; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    len = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        b[i] = a[i];</span><br><span class="line">        id[i] = (i - <span class="number">1</span>) / len + <span class="number">1</span>;</span><br><span class="line">        st[i] = (id[i] - <span class="number">1</span>) * len + <span class="number">1</span>;</span><br><span class="line">        ed[i] = <span class="built_in">min</span>(id[i] * len, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        cin &gt;&gt; q[i].l &gt;&gt; q[i].r;</span><br><span class="line">        q[i].id = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(q + <span class="number">1</span>, q + m + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 离散化</span></span><br><span class="line">    <span class="built_in">sort</span>(b + <span class="number">1</span>, b + n + <span class="number">1</span>);</span><br><span class="line">    p = <span class="built_in">unique</span>(b + <span class="number">1</span>, b + n + <span class="number">1</span>) - b - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        a[i] = <span class="built_in">lower_bound</span>(b + <span class="number">1</span>, b + p + <span class="number">1</span>, a[i]) - b;<span class="comment">//a 数组现在存放的是离散化后的值</span></span><br><span class="line">    <span class="type">int</span> now = <span class="number">0</span>, last = <span class="number">0</span>, lstl = <span class="number">0</span>, tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, l = <span class="number">1</span>, r = <span class="number">0</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (id[q[i].l] == id[q[i].r]) &#123;  <span class="comment">// 左右区间属于同一块则进行暴力处理答案</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = q[i].l; j &lt;= q[i].r; j++) ++cnt2[a[j]];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = q[i].l; j &lt;= q[i].r; j++)</span><br><span class="line">                ans[q[i].id] = <span class="built_in">max</span>(ans[q[i].id], cnt2[a[j]] * b[a[j]]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = q[i].l; j &lt;= q[i].r; j++) --cnt2[a[j]];</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 访问到了新的块，先把上一个块的答案清空</span></span><br><span class="line">        <span class="keyword">if</span> (id[q[i].l] != last) &#123;           </span><br><span class="line">            <span class="keyword">while</span> (r &gt; ed[q[i].l]) <span class="built_in">del</span>(a[r--]);   <span class="comment">// 右指针移至上一个区间的右端点</span></span><br><span class="line">            <span class="keyword">while</span> (l &lt;= ed[q[i].l]) <span class="built_in">del</span>(a[l++]);  <span class="comment">// 左指针右移至下一个区间的左端点</span></span><br><span class="line">            tmp = <span class="number">0</span>;</span><br><span class="line">            last = id[q[i].l];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 扩展右指针</span></span><br><span class="line">        <span class="keyword">while</span> (r &lt; q[i].r) <span class="built_in">add</span>(a[++r], tmp);</span><br><span class="line">        lstl = l;  <span class="comment">// 准确来说 l 才是原先的左指针</span></span><br><span class="line">        now = tmp;  <span class="comment">// 非常重要</span></span><br><span class="line">        <span class="comment">// 扩展左指针</span></span><br><span class="line">        <span class="keyword">while</span> (lstl &gt; q[i].l) <span class="built_in">add</span>(a[--lstl], now);</span><br><span class="line">        ans[q[i].id] = now;</span><br><span class="line">        <span class="comment">// 回滚左指针</span></span><br><span class="line">        <span class="keyword">while</span> (lstl &lt; l) <span class="built_in">del</span>(a[lstl++]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) cout &lt;&lt; ans[i] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">NULL</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// cin&gt;&gt;T;</span></span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// system(&quot;pause&quot;);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="树上莫队"><a href="#树上莫队" class="headerlink" title="树上莫队"></a>树上莫队</h3><p>莫队算法的出现正是为了解决数据结构而存在，当然可以上树。</p><p><a href="https://www.luogu.com.cn/problem/P2325">P2325 [SCOI2005] 王室联邦</a></p><h4 id="分块方式"><a href="#分块方式" class="headerlink" title="分块方式"></a>分块方式</h4><p>这里提供一种构造方式，证明略</p><p>dfs，并创建一个栈，dfs一个点时先记录初始栈顶高度，每dfs完当前节点的一棵子树就判断栈内（相对于刚开始dfs时）新增节点的数量是否≥B，是则将栈内所有新增点分为同一块，核心点为当前dfs的点，当前节点结束dfs时将当前节点入栈，整个dfs结束后将栈内所有剩余节点归入已经分好的最后一个块。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> t=top;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i=head[u];i;i=nxt[i])</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">int</span> v=to[i];</span><br><span class="line">    <span class="keyword">if</span> (v!=fa)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">dfs</span>(v,u);</span><br><span class="line">      <span class="keyword">if</span> (top-t&gt;=B)</span><br><span class="line">      &#123;</span><br><span class="line">        key[++tot]=u;</span><br><span class="line">        <span class="keyword">while</span> (top&gt;t) bl[stk[top--]]=tot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  stk[++top]=u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//.......</span></span><br><span class="line">  <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> (!tot) ++tot;</span><br><span class="line">  key[tot]=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (top) bl[stk[top--]]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="修改方式"><a href="#修改方式" class="headerlink" title="修改方式"></a>修改方式</h4><p>所谓“修改”，就是由询问 $(cu, cv)$更新至询问$(tu, tv)$。</p><p>如果把两条路径上的点全部修改，复杂度是和暴力一样的，所以需要做一些处理。</p><p>$T(u, v)$ 表示 $u$ 到 $v$的路径上除 $lca(u, v)$ 外的所有点构成的集合，$S(u, v)$ 代表$u$ 到$v$的路径，$xor$表示集合对称差（就跟异或差不多）。</p><ol><li>两个指针 $cu, cv$（相当于序列队的$l, r$ 两个指针），$ans$ 记录 $T(cu, cv)$ 的答案，$vis$ 数组记录每个节点是否在 $T(cu, cv)$内。</li><li>由 $T(cu, cv)$ 更新至$T(tu, tv)$ 时，将 $T(cu, tu)$和 $T(cv, tv)$的 $vis$分别取反，并相应地更新答案。</li><li>将答案记录到 $out$数组（离线后用于输出那个）时对 $lca(cu, cv)$（此时的 $cu, cv$ 已更新为上一步中的 $tu, tv$）的 $vis$ 取反并更新答案，记录完再改回来（因为$lca$处理比较麻烦，这样搞比较方便）。</li></ol><p>$ T(cu, cv) \oplus T(tu, tv)$</p><p>$ &#x3D; (S(cu, root) \oplus S(cv, root)) \oplus (S(tu, root) \oplus S(tv, root))$</p><p>$&#x3D; (S(cu, root) \oplus S(tu, root)) \oplus (S(cv, root) \oplus S(tv, root))$</p><p>$&#x3D; T(cu, tu) \oplus T(cv, tu)$</p><p>之所以要把$T(cu, cv) \oplus T(tu, tv)$ 转化成$T(cu, tu) \oplus T(cv, tu)$，是因为这样的话就能通过对询问排序来保证复杂度。排序方式就是以$u$所在块编号为第一关键字，$v$的编号为第二关键字排序。如果结合了带修莫队，就还要以时间为第三关键字。</p><h4 id="时间复杂度-1"><a href="#时间复杂度-1" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>不带修：$O(n \sqrt{m})$，带修：$O(n^{\frac{5}{3}})$</p><p><a href="https://uoj.ac/problem/58">#58. 【WC2013】糖果公园</a></p><h3 id="莫队的在线化改造"><a href="#莫队的在线化改造" class="headerlink" title="莫队的在线化改造"></a>莫队的在线化改造</h3><p><a href="https://www.luogu.com.cn/article/wdg1s2hw">你以为莫队只能离线？莫队的在线化改造</a></p><h3 id="二维莫队"><a href="#二维莫队" class="headerlink" title="二维莫队"></a>二维莫队</h3><p><a href="https://ouuan.github.io/post/%E4%BA%8C%E7%BB%B4%E8%8E%AB%E9%98%9F%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/">二维莫队解题报告</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;分块算法&quot;&gt;&lt;a href=&quot;#分块算法&quot; class=&quot;headerlink&quot; title=&quot;分块算法&quot;&gt;&lt;/a&gt;分块算法&lt;/h1&gt;&lt;h2 id=&quot;什么是分块算法&quot;&gt;&lt;a href=&quot;#什么是分块算法&quot; class=&quot;headerlink&quot; title=&quot;什么是</summary>
      
    
    
    
    
  </entry>
  
</feed>
