<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LANSGANBS</title>
  
  <subtitle>红叶最多情 一舞寄相思</subtitle>
  <link href="https://www.lansganbs.cn/atom.xml" rel="self"/>
  
  <link href="https://www.lansganbs.cn/"/>
  <updated>2025-07-02T11:40:03.113Z</updated>
  <id>https://www.lansganbs.cn/</id>
  
  <author>
    <name>LANSGANBS</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>孤独摇滚!插曲《ギターと孤独と蒼い惑星》日语及罗马音发音</title>
    <link href="https://www.lansganbs.cn/posts/72c025d3.html"/>
    <id>https://www.lansganbs.cn/posts/72c025d3.html</id>
    <published>2025-07-02T11:32:54.000Z</published>
    <updated>2025-07-02T11:40:03.113Z</updated>
    
    <content type="html"><![CDATA[<p>【歌词及罗马音发音】孤独摇滚!插曲 - 「ギターと孤独と蒼い惑星」 / 纽带乐队</p><p>填词：ZAQ</p><p>谱曲：音羽-otoha-</p><p>编曲：akkin</p><p>歌曲原唱：纽带乐队</p><p><img src="http://image.lansganbs.cn/c393f2bdedb7396452732707fcfa3ddd.jpg" alt=""></p><p><a href="https://music.apple.com/cn/album/%E3%82%AE%E3%82%BF%E3%83%BC%E3%81%A8%E5%AD%A4%E7%8B%AC%E3%81%A8%E8%92%BC%E3%81%84%E6%83%91%E6%98%9F/1650726162?i=1650726430">ギターと孤独と蒼い惑星</a></p><hr><p>to tsu <u>ze n</u> &emsp; <u>hu ru yu u</u>~da chi a a </p><p>突然(とつぜん)降(ふ)る夕立(ゆうだち)あぁ</p><p>突然下起的骤雨</p><p>ka sa &emsp; mo na &emsp; i ya i ya </p><p>傘(かさ) もな いや嫌(いや)</p><p>讨厌没带雨伞的自己</p><p>so ra no go ki ge <span style="color: red;">n</span> na <span style="color: gray;">n</span> ka shi ra~<u>na i</u> </p><p>空(そら)のご機嫌(きげん)なんか知(し)らない</p><p>才懒得在乎天空的心情</p><p>ki <u>se tsu</u> &emsp; <u>no ka wa ri</u> &emsp; me no hu ku wa</p><p>季節(きせつ)の変(か)わり目(め)の服(ふく)は</p><p>季节交换之际</p><p>na ni &emsp; ki rya &emsp; i~<u>i n</u> da ro </p><p>何(なに) 着(き)リゃ いいんだろ</p><p>该换上什么外衣</p><p>ha ru to a ki &emsp; do ko i ccha tta <span style="color: gray;">n</span> da yo </p><p>春(はる)と秋(あき) どこいっちゃったんだよ</p><p>春天和秋天 究竟消失去了何处</p><p>i ki mo &emsp; de ki &emsp; na i &emsp; jyo o ho <span style="color: gray;">o</span> no a tsu ryo ku </p><p>息(いき)も出来(でき)ない 情報(じょうほう)の圧力(あつリょく)</p><p>资讯时代的压力 令人喘不过气</p><p><u>me ma</u> i no &emsp; ra se <span style="color: gray;">n</span> da &emsp; wa ta shi wa do ko ni <span style="color: gray;">i</span> ru </p><p>めまいの  螺旋(らせん)だ  わたしはどこにいる</p><p>陷入了令人晕眩的螺旋之中 我又到底身在何方</p><p>ko n na ni &emsp; ko n na ni &emsp; i ki no o to ga su ru no ni </p><p>こんなに こんなに 息(いき)の音(おと)がするのに</p><p>明明充满如此多的 如此多的呼吸声</p><p><u>he n</u>~da ne &emsp;  se &emsp; ka i no &emsp; o to ga &emsp; shi na i </p><p>変(へん)だね 世界(せかい)の音(おと)が しない</p><p>真奇怪啊 世界却悄然沉寂</p><p>ta ri na <span style="color: gray;">i</span> &emsp; ta ri na <span style="color: gray;">i</span></p><p>足(た)リない 足(た)リない</p><p>还不够 还不够</p><p>da re ni mo ki zu ka re na i</p><p>誰(だれ)にも気(き~)づかれない</p><p>还没有任何人发现</p><p><u>na gu ri ga ki</u> &emsp; mi ta <span style="color: gray;">i</span> &emsp; na o to </p><p>殴(なぐ)リ書(が)きみたい な音(おと)</p><p>杂乱无章的音色</p><p>da se na i  jyo u(o) ta i de sa ke n da yo </p><p>出(だ)せない 状態(じょうたい)で叫(さけ)んだよ</p><p>不成声低咆哮着</p><p>a ri &emsp; no ma ma &emsp; <u>na n</u> te </p><p>「あリのまま」なんて</p><p>所谓的”真实自我”</p><p>da re ni mi se &emsp; <span style="color: red;">lu</span> <span style="color: gray;">n</span>~da </p><p>誰(だれ)に見(み)せ るんだ</p><p>又该让谁看见</p><p>ba ka &emsp; na wa <u>ta shi wa</u> &emsp; u ta u da ke</p><p>馬鹿(ばか)なわたしは歌(うた)うだけ</p><p>傻瓜如我唯有放声高歌</p><p>bu chi ma ke ccha <u>o o</u> ka &emsp; <u>ho shi</u> ni</p><p>ぶちまけちゃおうか 星(ほし)に</p><p>对着星星倾吐一切吧</p><p>e ri ku sa &emsp; ni ha ri ka e &emsp; <u>ru sa gyo <span style="color: gray;">u</span></u> &emsp; mo na nn &emsp; to na &emsp; <u>ku na nn</u> da </p><p>エリクサーに張(は)リ替(か)える作業(さぎょう)もなんとなくなんだ</p><p>即便换上伊利克斯琴弦音色也不尽人意</p><p>ka ke ta tsu ne wo su ko shi sa <u>wa ru</u></p><p>欠(か)けた爪(つめ)を少(すこ)し触(さわ)る</p><p>轻抚那边缘缺损的指甲</p><p>ha nn ke <span style="color: gray;">i</span> <u>sa nn</u> &emsp; <u>bya ku</u> mi ri no <u>ka ra da</u> &emsp; de hi &emsp; sshi ni &emsp; na i te ru </p><p>半径(はんけい)300(さんびゃく)mm(みリ)の体(からだ)で必死(ひっし)に嗚(な)いてる</p><p>以这半径300mm的身躯拼命奏响吉他</p><p><u>o nn</u> <u>ga ku ni</u> to ccya ko ko ga ti <u>kyu u</u> <u>da na</u></p><p>音楽(おんがく)にとっちゃココが地球(ちきゅう)だな</p><p>对于音乐来说这副身躯便是地球啊</p><p><u>ku u</u> ki wo &emsp; ni gi (i) tte &emsp; so ra wo na gu ru yo </p><p>空気(くうき)を握(にぎ)って 空(そら)を殴(なぐ)るよ</p><p>握紧空气 挥向天空</p><p><u>na <span style="color: red;">nn</span></u> ni mo &emsp; o ki na i &emsp; wa ta shi wa mu ryo ku sa </p><p>なんにも起(お)きない わたしは無力(むリょく)さ</p><p>却无事发生 我是如此的无力啊</p><p>da ke do sa &emsp; so no te de &emsp; ko no te tsu wo ha ji <span style="color: red;">i</span> da ra </p><p>だけどさ その手(て)でこの鉄(てつ)を弾(はじ)いたら</p><p>但是啊 用这手弹起这铁弦时</p><p>na <u>ni ka ga</u> &emsp; ka wa (ra) tte &emsp; mi e da &emsp; yo u na </p><p>何(なに)かが変(か)わって見(み)えた ような</p><p>就好像能看到有什么发生变化一样啊</p><p>ma bu shi <span style="color: gray;">i</span> &emsp; ma bu shi <span style="color: gray;">i</span></p><p>眩(まぶ)しい 眩(まぶ)しい</p><p>眼前的万丈光芒</p><p>so <span style="color: red;">nn</span> na ni hi ka ru na yo </p><p>そんなに光(ひか)るなよ</p><p>请不要如此明亮啊</p><p><u>wa ta shi no da</u> &emsp; <u>sa <span style="color: red;">i</span></u> &emsp; <u>ka ge ga</u> </p><p>わたしのダサい影(かげ)が</p><p>那只会更加凸显出</p><p><u>yo ri i</u> &emsp; <u>ro ko ku na</u> &emsp; tte shi ma <span style="color: gray;">u</span> da ro </p><p>よリ色濃(いろこ)くなってしまうだろ</p><p>我那丑陋影子 不是吗</p><p>na nn de &emsp; ko nn na &emsp; a tsu ku &emsp; na ccya tte <span style="color: gray;">nn</span> da to &emsp; ma <span style="color: gray;">nn</span> na i </p><p>なんでこんな熱(あつ)くなっちゃってんだ 止(と)まんない</p><p>为何我内心会变得如此炽热 无法停止</p><p>ba ka &emsp; na wa <u>ta shi wa</u> &emsp; u ta u da ke</p><p>馬鹿(ばか)なわたしは歌(うた)うだけ</p><p>傻瓜如我唯有放声高歌</p><p>u ru sa i nn da tte &emsp; <u>shi nn</u> zo <span style="color: gray;">u</span></p><p>うるさいんだって 心臓(しんぞう)</p><p>鼓动愈加喧嚣的心脏</p><p>a <u>o i</u> &emsp; wa ku se i hi to <u>ri bo</u> (o) chi</p><p>蒼(あお)い惑星(わくせい)ひとリぼっち</p><p>我在这蓝色星球上孤独一人</p><p>i <u>ppa i no</u> &emsp; o to wo ki i te~ki ta </p><p>いっぱいの音(おと)を聞(き)いてきた</p><p>聆听到了众多声音</p><p>ma wa &emsp; ri tsu zu ke te i <u>ku o</u> <u>ku ne <span style="color: gray;">nn</span></u></p><p>回(まわ)リ続(つづ)けて  幾(いく)億(おく)年(ねん)</p><p>地球自转数亿年</p><p>i ssyu nn &emsp; de mo <span style="color: red;">i</span> <span style="color: red;">i</span> ka ra~a~a~</p><p>一瞬(いっしゅん) でもいいから ああ</p><p>所以一瞬也好啊</p><p>ki i te &emsp; ki ke yo </p><p>聞(き)いて 聴(き)けよ</p><p>请聆听 聆听我的声音啊</p><p>wa ta shi &emsp; wa ta shi &emsp; wa ta shi wa ko ko ni <span style="color: red;">i</span> ru </p><p>わたし わたし わたしはここにいる</p><p>孤独的 孤独的我就存在于此啊</p><p><u>na gu ri ga ki</u> &emsp; mi <u>ta i</u> &emsp; na o to </p><p>殴(なぐ)リ書(が)きみたい な音(おと)</p><p>杂乱无章的音色</p><p>da se <u>na i</u> &emsp; jyo o ta i de &emsp; sa ke n da yo </p><p>出(だ)せない 状態(じょうたい)で叫(さけ)んだよ</p><p>不成声低咆哮着</p><p><u>na nn ka ni</u> <u>na ru ta i</u> <u>na ru ta i</u></p><p>なんかになリたいなリたい</p><p>仅是想成为 想成为</p><p>na ni mo no ka de~i~i~</p><p>何者(なにもの)かでいい</p><p>无论什么人都好</p><p>ba ka &emsp; na wa <u>ta shi wa</u> &emsp; u ta u da ke</p><p>馬鹿(ばか)なわたしは歌(うた)うだけ</p><p>傻瓜如我唯有放声高歌</p><p>bu chi ma ke ccha <u>o o</u> ka &emsp; <u>ho shi</u> ni</p><p>ぶちまけちゃおうか 星(ほし)に</p><p>对着星星倾吐一切吧</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;【歌词及罗马音发音】孤独摇滚!插曲 - 「ギターと孤独と蒼い惑星」 / 纽带乐队&lt;/p&gt;
&lt;p&gt;填词：ZAQ&lt;/p&gt;
&lt;p&gt;谱曲：音羽-otoha-&lt;/p&gt;
&lt;p&gt;编曲：akkin&lt;/p&gt;
&lt;p&gt;歌曲原唱：纽带乐队&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image</summary>
      
    
    
    
    
    <category term="歌曲" scheme="https://www.lansganbs.cn/tags/%E6%AD%8C%E6%9B%B2/"/>
    
  </entry>
  
  <entry>
    <title>中岛美嘉《僕が死のうと思ったのは》歌词及罗马音发音</title>
    <link href="https://www.lansganbs.cn/posts/b342039f.html"/>
    <id>https://www.lansganbs.cn/posts/b342039f.html</id>
    <published>2025-06-09T18:38:11.000Z</published>
    <updated>2025-07-02T11:40:03.113Z</updated>
    
    <content type="html"><![CDATA[<p>【歌词及罗马音发音】『僕が死のうと思ったのは（曾经我也想过一了百了）』 - 中岛美嘉</p><p>填词：秋田弘</p><p>谱曲：秋田弘</p><p>编曲：出羽良彰</p><p>歌曲原唱：中岛美嘉</p><p><img src="http://image.lansganbs.cn/e4e64c4befc3c7cc41f0bd8015f3b49d.png" alt=""></p><p><a href="https://music.apple.com/cn/album/%E5%83%95%E3%81%8C%E6%AD%BB%E3%81%AE%E3%81%86%E3%81%A8%E6%80%9D%E3%81%A3%E3%81%9F%E3%81%AE%E3%81%AF-from-the-first-take/1598331321?i=1598331322">僕が死のうと思ったのは - From THE FIRST TAKE</a></p><hr><p>bo ku ga &emsp; <u>shi no</u> o to &emsp; <u>o mo</u> tta no wa</p><p>僕（ぼく）が死（し）のうと思（おも）ったのは</p><p>曾经我也想过一了百了 </p><p><u>u mi ne ko ga sa nn~ba shi de</u> &emsp; na i ta ka ra</p><p>ウミネコが桟桥（さんばし）で鸣（な）いたから</p><p>因为有海猫在码头悲鸣</p><p>na mi no~<u>ma ni</u> <u>ma ni</u> &emsp; u ka nn de ki e ru</p><p>波（なみ）の随意（まにま）に浮（う）かんで消（き）える</p><p>随着浪花起伏消没</p><p>ka ko mo tu i <u>ba nn</u>~de &emsp; to nn~de yo ke</p><p>过去（かこ）も啄（つい）ばんで飞（と）んでいけ</p><p>叼啄着往昔飞离不见</p><p>bo ku ga &emsp; <u>shi no</u> o to &emsp; <u>o mo</u> tta no wa</p><p>仆（ぼく）が死（し）のうと思（おも）ったのは</p><p>曾经我也想过一了百了</p><p>ta nn <u>jyo o bi ni</u> <u>a nn</u> zu no <u>ha na ga sa i ta ka ra</u></p><p>诞生日（たんじょうび）に杏（あんず）の花（はな）が咲（さ）いたから</p><p>因为生日那天杏花开放</p><p>so no ko <u>mo re</u> <u>bi de</u> &emsp; u <u>ta ta</u> ne shi ta ra</p><p>その木漏（こも）れ日（び）でうたた寝（ね）したら</p><p>若是在那洒下的阳光里打盹</p><p>mu shi no shi <u>ga i</u> to &emsp; <u>tsu chi ni na re</u>~ru ka na</p><p>虫（むし）の死骸（しがい）と土（つち）になれるかな </p><p>能否与虫之死骸一同化为尘土呢</p><p>ha &emsp; <u>kka a</u> me &emsp; gyo <u>ko o</u> no <u>to o</u> <u>da i</u></p><p>薄荷饴（はっかあめ）渔港（ぎょこう）の灯台（とうだい）</p><p>薄荷糖 渔港的灯塔 </p><p>sa bi ta <span style="color: red;">a</span> <u>chi kyo o</u> &emsp; <u>su te ta</u> ji te nn sya</p><p>锖（さ）びたアーチ桥（きょう） 舍（す）てた自転车（じてんしゃ）</p><p>生锈的拱桥 丢弃的自行车</p><p>mo ku <u>zo o</u> <u>no e ki no</u> <u>su to o</u> bu no ma e de</p><p>木造（もくぞう）の駅（えき）のストーブの前（まえ）で</p><p>木造车站的暖炉前 </p><p><u>do ko ni mo</u> &emsp; <u>ta bi da te</u> &emsp; <u><span style="color: red;">na i</span> ko ko ro</u></p><p>どこにも旅立（たびだ）てない心（こころ）</p><p>无处可去的心灵</p><p><u>kyo o wa ma ru de</u> &emsp; <u>ki no <span style="opacity: 0.5;">o</span> mi ta i da</u></p><p>今日（きょう）はまるで昨日（きのう）みたいだ</p><p>今天与昨天如此相像</p><p><u>a su wo</u> &emsp; <u>ka e ru na ra</u> &emsp; <u>kyo o <span style="opacity: 0.5;">wo</span></u> &emsp; <u>ka e na kya</u></p><p>明日（あす）を変（か）えるなら 今日（きょう）を変（か）えなきゃ</p><p>想改变明天 须改变今天</p><p><u>wa ka</u> tte ru &emsp; <u>wa ka</u> tte ru &emsp; <u>ke re</u> do</p><p>分（わ）かってる 分（わ）かってる    けれど</p><p>我知道  我知道  但是  </p><p>bo ku ga &emsp; <u>shi no</u> o to &emsp; <u>o mo</u> tta no wa</p><p>仆（ぼく）が死（し）のうと思（おも）ったのは</p><p>曾经我也想过一了百了</p><p>ko ko ro ga ka ra &emsp; ppo ni &emsp; na &emsp; tta ka ra</p><p>心（こころ）が空（から）っぽになったから</p><p>因为心中已空无一物  </p><p>mi ta sa re na i to &emsp; na <u>i te</u> &emsp; <u>i ru</u> <u>no wa</u></p><p>満（み）たされないと泣（な）いているのは</p><p>感到空虚而哭泣 </p><p>ki <u>tto mi ta sa re ta i to</u> &emsp; <u>ne ga</u> u ka ra</p><p>きっと満（み）たされたいと愿（ねが）うから</p><p>一定是渴望得到充实</p><hr><p>bo ku ga &emsp; <u>shi no</u> o to &emsp; <u>o mo</u> tta no wa</p><p>仆（ぼく）が死（し）のうと思（おも）ったのは</p><p>曾经我也想过一了百了 </p><p>ku <u>tsu hi mo ga</u> &emsp; ho do ke &emsp; ta ka ra</p><p>靴纽（くつひも）が解（と）けたから</p><p>因为鞋带松开了 </p><p>mu su bi na o <span style="opacity: 0.5;">su</span> no wa &emsp; ni ga te na nn da yo</p><p>結（むす）びなおすのは苦手（にがて）なんだよ</p><p>不擅长重新系起 </p><p>hi to to no &emsp; <u>tsu na ga ri mo ma ta</u> &emsp; <u>shi ka ri</u></p><p>人（ひ）との繋（つな）がりもまた然（しか）り</p><p>与人的牵绊亦是如此</p><p>bo ku ga &emsp; <u>shi no</u> o to &emsp; <u>o mo</u> tta no wa</p><p>仆（ぼく）が死（し）のうと思（おも）ったのは</p><p>曾经我也想过一了百了 </p><p>syo o ne nn <u>ga bo ku wo</u> &emsp; <u>mi tsu me te i</u> ta ka ra</p><p>少年（しょうねん）が僕（ぼく）を見（み）つめていたから</p><p>因为少年深情凝视着我</p><p>be~ddo no u e de &emsp; do ge za shi te ru yo</p><p>ベッドの上（うえ）で土下座（どげざ）してるよ</p><p>抱膝跪在床上 </p><p><u>a no hi no bo ku ni</u> &emsp; go me nn na sa i to</p><p>あの日（ひ）の僕（ぼく）にごめんなさいと</p><p>向那天的我说抱歉</p><p>pa so <u>ko nn</u> no &emsp; <u>u su</u> a ka ri</p><p>パソコンの薄明（うすあ）かり</p><p>屏幕的微光 </p><p><u>jyo o</u> <u>ka i</u> <u>no he ya no</u> <u>se e</u> ka tsu o nn</p><p>上階（じょうかい）の部屋（へや）の生活音（せいかつおん）<br>楼上的噪音</p><p>i nn ta-<u>fo nn</u> no <u>cha i</u> mu no o to</p><p>インターフォンのチャイムの音（おと）</p><p>电话的铃声 </p><p><u>mi mi wo</u> &emsp; <u>hu sa gu to ri</u> &emsp; <u>ka go no</u> &emsp; <u>syo o ne nn</u></p><p>耳（みみ）を塞（ふさ）ぐ鳥（とり）かごの少年（しょうねん）</p><p>紧塞住双耳 那笼中的少年</p><p><u>mi e na i te ki to</u> &emsp; <u>ta ta ka~tte ru</u></p><p>見（み）えない敵（てき）と戦（たたか）ってる </p><p>与看不见的敌人战斗着</p><p><u>ro ku jyo o</u> &emsp; <u>hi to ma no</u> &emsp; <u>do nn ki ho-te</u></p><p>六畳一間（ろくじょうひとま）のドンキホーテ</p><p>六畳一间的堂吉诃德</p><p>go-ru wa &emsp; <u>do o~se mi ni ku i</u> &emsp; mo no sa</p><p>ゴールはどうせ醜（みにく）いものさ </p><p>反正目的也是一样丑陋 </p><p>bo ku ga &emsp; <u>shi no</u> o to &emsp; <u>o mo</u> tta no wa</p><p>僕（ぼく）が死（し）のうと思（おも）ったのは</p><p>曾经我也想过一了百了</p><p>tsu me ta i hi to to &emsp; <u>i wa re</u> &emsp; ta ka ra</p><p>冷（つめ）たい人（ひと）と言（い）われたから </p><p>因为被人说是冷血</p><p>a i sa re ta i to &emsp; na i te i ru no wa</p><p>愛（あい）されたいと泣（な）いているのは</p><p>想要被爱而哭泣</p><p><u>hi to no nu ku mo ri wo shi</u> &emsp; <u>tte shi ma</u> tta ka ra</p><p>人（ひと）の温（ぬく）もりを知（し）ってしまったから</p><p>是因为尝到了人的温暖</p><hr><p>bo ku ga &emsp; <u>shi no</u> o to &emsp; <u>o mo</u> tta no wa</p><p>僕（ぼく）が死（し）のうと思（おも）ったのは</p><p>曾经我也想过一了百了</p><p>a na ta ga &emsp; ki <u>re e</u> ni &emsp; wa ra u ka ra</p><p>あなたが綺麗（きれい）に笑（わら）うから</p><p>因为你灿烂的笑容</p><p>shi nu ko to ba ka ri &emsp; <u>ka nn ga <span style="opacity: 0.5;">e</span> </u> te shi ma <span style="opacity: 0.5;">u</span> no wa </p><p>死（し）ぬことばかり考（かんが）えてしまうのは</p><p>尽考虑着死的事</p><p>ki <u>tto i ki ru ko to ni</u> &emsp; <u>ma ji me</u> <u>su gi ru ka ra</u></p><p>きっと生（い）きる事（こと）に真面目（まじめ）すぎるから</p><p>一定是因为太过认真地活</p><p>bo ku ga &emsp; <u>shi no</u> o to &emsp; <u>o mo</u> tta no wa</p><p>僕（ぼく）が死（し）のうと思（おも）ったのは </p><p>曾经我也想过一了百了</p><p>ma da a na ta ni de a tte &emsp; na ka &emsp; tta ka ra</p><p>まだあなたに出会（であ）ってなかったから</p><p>因为还未与你相遇</p><p>a na ta~no yo o na &emsp; hi to ga~u ma re ta </p><p>あなたのような人（ひと）が生（う）まれた </p><p>因为有像你这样的人出生</p><p><u>se ka i wo su ko shi</u> &emsp; <u>su ki ni</u> na tta yo</p><p>世界（せかい）を少（すこ）し好（す）きになったよ</p><p>我对世界稍微有了好感</p><p>a na ta no yo o na &emsp; hi to ga i ki te ru</p><p>あなたのような人（ひと）が生（い）きてる </p><p>因为有像你这样的人活在这个世上</p><p>se ka <u>i ni su ko shi</u> &emsp; ki ta i~&emsp; su ru &emsp; yo~</p><p>世界（せかい）に少（すこ）し期待（きたい）するよ </p><p>我对世界稍微有了期待</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;【歌词及罗马音发音】『僕が死のうと思ったのは（曾经我也想过一了百了）』 - 中岛美嘉&lt;/p&gt;
&lt;p&gt;填词：秋田弘&lt;/p&gt;
&lt;p&gt;谱曲：秋田弘&lt;/p&gt;
&lt;p&gt;编曲：出羽良彰&lt;/p&gt;
&lt;p&gt;歌曲原唱：中岛美嘉&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.lans</summary>
      
    
    
    
    
    <category term="歌曲" scheme="https://www.lansganbs.cn/tags/%E6%AD%8C%E6%9B%B2/"/>
    
  </entry>
  
  <entry>
    <title>一些常用的外挂标签</title>
    <link href="https://www.lansganbs.cn/posts/a709fab5.html"/>
    <id>https://www.lansganbs.cn/posts/a709fab5.html</id>
    <published>2025-05-20T21:03:35.000Z</published>
    <updated>2025-07-02T11:40:03.113Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分栏"><a href="#分栏" class="headerlink" title="分栏"></a>分栏</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs 分栏 %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 第一个Tab的名字 --&gt;</span><br><span class="line"></span><br><span class="line">第一个Tab的内容</span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 第二个Tab的名字 --&gt;</span><br><span class="line"></span><br><span class="line">第二个Tab的内容</span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 第三个Tab的名字 --&gt;</span><br><span class="line"></span><br><span class="line">第三个Tab的内容</span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><details class="folding-tag" ><summary> 查看代码 </summary>              <div class='content'>              <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs 分栏 %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab C++ --&gt;</span><br><span class="line"></span><br><span class="line"><span class="code">```C++</span></span><br><span class="line"><span class="code">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="code">int main() &#123;</span></span><br><span class="line"><span class="code">    std::cout &lt;&lt; &quot;Hello, World!&quot; &lt;&lt; std::endl;</span></span><br><span class="line"><span class="code">    return 0;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab Java --&gt;</span><br><span class="line"></span><br><span class="line"><span class="code">```Java</span></span><br><span class="line"><span class="code">public class HelloWorld &#123;</span></span><br><span class="line"><span class="code">    public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="code">        System.out.println(&quot;Hello, World!&quot;);</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab Kotlin --&gt;</span><br><span class="line"></span><br><span class="line"><span class="code">```Kotlin</span></span><br><span class="line"><span class="code">fun main() &#123;</span></span><br><span class="line"><span class="code">    println(&quot;Hello, World!&quot;)</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">C++</button></li><li class="tab"><button type="button" data-href="#分栏-2">Java</button></li><li class="tab"><button type="button" data-href="#分栏-3">Kotlin</button></li><li class="tab"><button type="button" data-href="#分栏-4">Python</button></li><li class="tab"><button type="button" data-href="#分栏-5">Go</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Hello, World!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    println(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, World!&quot;</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-5"><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="行内文本-span"><a href="#行内文本-span" class="headerlink" title="行内文本 span"></a>行内文本 span</h1><div class="tabs" id="行内文本-span"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#行内文本-span-1">标签语法</button></li><li class="tab"><button type="button" data-href="#行内文本-span-2">配置参数</button></li><li class="tab"><button type="button" data-href="#行内文本-span-3">样式预览</button></li><li class="tab"><button type="button" data-href="#行内文本-span-4">示例代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="行内文本-span-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="行内文本-span-2"><ul><li><p>字体: logo, code</p></li><li><p>颜色: red,yellow,green,cyan,blue,gray</p></li><li><p>大小: small, h4, h3, h2, h1, large, huge, ultra</p></li><li><p>left, center, right</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="行内文本-span-3"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<br><span class='p center logo large'>Volantis</span><br><span class='p center small'>A Wonderful Theme for Hexo</span></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="行内文本-span-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">  在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">  文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">  &#123;% span center logo large, Volantis %&#125;</span><br><span class="line">  &#123;% span center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="label-标签"><a href="#label-标签" class="headerlink" title="label 标签"></a>label 标签</h1><div class="tabs" id="label-标签"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#label-标签-1">标签语法</button></li><li class="tab"><button type="button" data-href="#label-标签-2">配置参数</button></li><li class="tab"><button type="button" data-href="#label-标签-3">样式预览</button></li><li class="tab"><button type="button" data-href="#label-标签-4">示例代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="label-标签-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label text color %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="label-标签-2"><div class="table-container"><table><thead><tr><th style="text-align:center">参数</th><th>含义</th></tr></thead><tbody><tr><td style="text-align:center">text</td><td>文字</td></tr><tr><td style="text-align:center">color</td><td>【可选】背景颜色，默认为 default，default/blue/pink/red/purple/orange/green</td></tr></tbody></table></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="label-标签-3"><p>臣亮言：<mark class="hl-label default">先帝</mark> 创业未半，而<mark class="hl-label blue">中道崩殂</mark> 。今天下三分，<mark class="hl-label pink">益州疲敝</mark> ，此诚<mark class="hl-label red">危急存亡之秋</mark> 也！然侍衞之臣，不懈于内；<mark class="hl-label purple">忠志之士</mark> ，忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气；不宜妄自菲薄，引喻失义，以塞忠谏之路也。<br>宫中、府中，俱为一体；陟罚臧否，不宜异同。若有<mark class="hl-label orange">作奸</mark> 、<mark class="hl-label green">犯科</mark> ，及为忠善者，宜付有司，论其刑赏，以昭陛下平明之治；不宜偏私，使内外异法也。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="label-标签-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">臣亮言：&#123;% label 先帝 %&#125;创业未半，而&#123;% label 中道崩殂 blue %&#125;。今天下三分，&#123;% label 益州疲敝 pink %&#125;，此诚&#123;% label 危急存亡之秋 red %&#125;也！然侍衞之臣，不懈于内；&#123;% label 忠志之士 purple %&#125;，忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气；不宜妄自菲薄，引喻失义，以塞忠谏之路也。</span><br><span class="line">宫中、府中，俱为一体；陟罚臧否，不宜异同。若有&#123;% label 作奸 orange %&#125;、&#123;% label 犯科 green %&#125;，及为忠善者，宜付有司，论其刑赏，以昭陛下平明之治；不宜偏私，使内外异法也。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="折叠框-folding"><a href="#折叠框-folding" class="headerlink" title="折叠框 folding"></a>折叠框 folding</h1><div class="tabs" id="折叠框-folding"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#折叠框-folding-1">标签语法</button></li><li class="tab"><button type="button" data-href="#折叠框-folding-2">配置参数</button></li><li class="tab"><button type="button" data-href="#折叠框-folding-3">样式预览</button></li><li class="tab"><button type="button" data-href="#折叠框-folding-4">示例代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="折叠框-folding-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 参数（可选）, 标题 %&#125;</span><br><span class="line">![](<span class="link">https://bu.dusays.com/2023/06/01/64788d71c832d.webp</span>)</span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="折叠框-folding-2"><ul><li><p>颜色：blue, cyan, green, yellow, red</p></li><li><p>状态：状态填写 open 代表默认打开。</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="折叠框-folding-3"><details class="folding-tag" ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="https://bu.dusays.com/2023/06/01/64788d71c832d.webp" alt=""></p>              </div>            </details><details class="folding-tag" cyan open><summary> 查看默认打开的折叠框 </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details class="folding-tag" green><summary> 查看代码测试 </summary>              <div class='content'>              <p>假装这里有代码块（代码块没法嵌套代码块）</p>              </div>            </details><details class="folding-tag" yellow><summary> 查看列表测试 </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><details class="folding-tag" red><summary> 查看嵌套测试 </summary>              <div class='content'>              <details class="folding-tag" ><summary> 查看嵌套测试2 </summary>              <div class='content'>              <details class="folding-tag" ><summary> 查看嵌套测试3 </summary>              <div class='content'>              <p>hahaha <span><img src='https://bu.dusays.com/2023/06/01/64788cd5a356b.png' style='height:24px'></span></p>              </div>            </details>              </div>            </details>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="折叠框-folding-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 查看图片测试 %&#125;</span><br><span class="line"></span><br><span class="line">![](<span class="link">https://bu.dusays.com/2023/06/01/64788d71c832d.webp</span>)</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;</span><br><span class="line"></span><br><span class="line">这是一个默认打开的折叠框。</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding green, 查看代码测试 %&#125;</span><br><span class="line">假装这里有代码块（代码块没法嵌套代码块）</span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding yellow, 查看列表测试 %&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> haha</span><br><span class="line"><span class="bullet">-</span> hehe</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding red, 查看嵌套测试 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding, 查看嵌套测试2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding 查看嵌套测试3 %&#125;</span><br><span class="line"></span><br><span class="line">hahaha <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://bu.dusays.com/2023/06/01/64788cd5a356b.png&#x27;</span> <span class="attr">style</span>=<span class="string">&#x27;height:24px&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;分栏&quot;&gt;&lt;a href=&quot;#分栏&quot; class=&quot;headerlink&quot; title=&quot;分栏&quot;&gt;&lt;/a&gt;分栏&lt;/h1&gt;&lt;figure class=&quot;highlight markdown&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;sp</summary>
      
    
    
    
    
    <category term="杂谈" scheme="https://www.lansganbs.cn/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>SEU 2025 SUMMER PRETEST STD</title>
    <link href="https://www.lansganbs.cn/posts/ca0a9da5.html"/>
    <id>https://www.lansganbs.cn/posts/ca0a9da5.html</id>
    <published>2025-05-20T20:38:12.000Z</published>
    <updated>2025-07-02T11:40:03.112Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/gym/105895">The 21st Southeast University Programming Contest (Summer)</a></p><p><strong>下文链接均为验题链接</strong>，题目序号并<strong>不与正赛题目一一对应</strong>，请在上述正赛链接中<strong>自行对照</strong>。</p><p><strong>题目难度</strong>：</p><p>A &lt; E J M &lt; I &lt; N F &lt; D G B &lt; L H</p><p><strong>Created And Written By</strong>:</p><font color="orange">Huan_YP2002</font>, <font color="orange">limithym</font>, <font color="orange">jackylova_fan_fan_fan</font><p><strong>Tester</strong>:</p><font color="Red">Tobo</font>, <font color="Red">Anonyme</font>, <font color="Orange">thisislike_fan</font>, <font color="Purple">LANSGANBS</font>, <font color="Blue">sakuya_maid_fans</font>, <font color="Blue">xukuan</font>, <font color="#03A89E">9756</font>, <font color="#03A89E">king_of_gamers</font><p><strong>Std</strong>:</p><p><font color="Red">Anonyme</font>:</p><ul><li><a href="https://codeforces.com/gym/574109/problem/D">Kings Game (Hard Version)</a></li><li><a href="https://codeforces.com/gym/574109/problem/I">So Far Away</a></li></ul><p><font color="Red">Tobo</font>:</p><ul><li><a href="https://codeforces.com/gym/574109/problem/L">LRU is Best? (Hard Version)</a></li><li><a href="https://codeforces.com/gym/574109/problem/N">混沌数字</a></li></ul><p><font color="orange">thisislike_fan</font>:</p><ul><li><a href="https://codeforces.com/gym/574109/problem/B">Royale Bataille</a></li><li><a href="https://codeforces.com/gym/574109/problem/F">Yuhina City</a></li></ul><p><font color="purple">LANSGANBS</font>:</p><ul><li><a href="https://codeforces.com/gym/574109/problem/A">一卡通</a></li><li><a href="https://codeforces.com/gym/574109/problem/M">猫娘部署</a></li><li><a href="https://codeforces.com/gym/574109/problem/E">十六行诗</a></li><li><a href="https://codeforces.com/gym/574109/problem/J">MEX Should Be Same</a></li></ul><h1 id="一卡通"><a href="#一卡通" class="headerlink" title="一卡通"></a><a href="https://codeforces.com/gym/574109/problem/A">一卡通</a></h1><details class="folding-tag" ><summary> Coding By <font color=purple>LANSGANBS</font> </summary>              <div class='content'>              <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  string s;</span><br><span class="line">  cin &gt;&gt; s;</span><br><span class="line">  <span class="function">regex <span class="title">ss</span><span class="params">(<span class="string">&quot;^21[34]\\d&#123;2&#125;(?!0000)\\d&#123;4&#125;$&quot;</span>)</span></span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">regex_match</span>(s, ss)) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><h1 id="Royale-Bataille"><a href="#Royale-Bataille" class="headerlink" title="Royale Bataille"></a><a href="https://codeforces.com/gym/574109/problem/B">Royale Bataille</a></h1><details class="folding-tag" ><summary> Coding By <font color=orange>thisislike_fan</font> </summary>              <div class='content'>              <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) cin &gt;&gt; a[i];</span><br><span class="line">    </span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">auto</span> process = [&amp;](vector&lt;tuple&lt;<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>&gt;&gt; lim, <span class="type">int</span> n, <span class="type">int</span> m) -&gt; <span class="type">int</span> &#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">auto</span> check = [&amp;](<span class="type">int</span> s, <span class="type">int</span> t, <span class="type">int</span> l, <span class="type">int</span> r) -&gt; <span class="type">int</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> l &lt;= s &amp;&amp; r &lt;= t &amp;&amp; s &lt;= r;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">int</span> flag1 = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> flag2 = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> last = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lim.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">auto</span> [left, right, left_inner, right_inner, all_r, all_g] = lim[i];</span><br><span class="line">            <span class="keyword">if</span> (!all_g) last = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">f</span>(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lim.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">auto</span> [left, right, left_inner, right_inner, all_r, all_g] = lim[i];</span><br><span class="line">            </span><br><span class="line">            vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">tf</span>(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m));</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> l1 = <span class="number">0</span>; l1 &lt; m; l1++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> r1 = l1; r1 &lt; m; r1++) &#123;</span><br><span class="line">                    <span class="comment">//l1 &lt;= r2 &lt;= r1</span></span><br><span class="line">                    <span class="comment">//l2 &lt;= l1</span></span><br><span class="line">                    (tf[l1][r1] += f[l1][r1]) %= mod;</span><br><span class="line">                    <span class="keyword">if</span> (l1) (tf[l1][l1 - <span class="number">1</span>] -= f[l1][r1]) %= mod;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> l = m - <span class="number">1</span>; l &gt;= <span class="number">0</span>; l--) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> r = m - <span class="number">1</span>; r &gt;= <span class="number">0</span>; r--) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (l + <span class="number">1</span> &lt; m) (tf[l][r] += tf[l + <span class="number">1</span>][r]) %= mod;</span><br><span class="line">                    <span class="keyword">if</span> (r + <span class="number">1</span> &lt; m) (tf[l][r] += tf[l][r + <span class="number">1</span>]) %= mod;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">max</span>(l, r) + <span class="number">1</span> &lt; m) (tf[l][r] -= tf[l + <span class="number">1</span>][r + <span class="number">1</span>]) %= mod;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">0</span>; l &lt; m; l++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> r = l; r &lt; m; r++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (left &lt;= l &amp;&amp; l &lt;= left_inner &amp;&amp; right_inner &lt;= r &amp;&amp; r &lt;= right) &#123;</span><br><span class="line">                        </span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        tf[l][r] = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag1) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> l = left; l &lt;= left_inner; l++) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> r = <span class="built_in">max</span>(l, right_inner); r &lt;= right; r++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (i &amp;&amp; r + <span class="number">1</span> &lt; m) <span class="keyword">continue</span>;</span><br><span class="line">                        tf[l][r]++;</span><br><span class="line">                        tf[l][r] %= mod;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i + <span class="number">1</span> &gt;= last) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">0</span>; l &lt; m; l++) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> r = l; r &lt; m; r++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (i + <span class="number">1</span> &lt; n &amp;&amp; l) <span class="keyword">continue</span>;</span><br><span class="line">                        ans += tf[l][r];</span><br><span class="line">                        ans %= mod;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            flag1 &amp;= all_r;</span><br><span class="line">            flag2 &amp;= all_g;</span><br><span class="line">            f.<span class="built_in">swap</span>(tf);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//out2(flag1, flag2);</span></span><br><span class="line">        ans += flag1 + flag2;</span><br><span class="line">        ans %= mod;</span><br><span class="line">        ans += mod;</span><br><span class="line">        ans %= mod;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> solve_row = [&amp;]() -&gt; <span class="type">void</span> &#123;</span><br><span class="line">        vector&lt;tuple&lt;<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="type">int</span> left = <span class="number">0</span>, right = n - <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> left_inner = n - <span class="number">1</span>, right_inner = <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[j][i] != <span class="string">&#x27;?&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (a[j][i] == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">                            left_inner = right_inner = j;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            right_inner = j;</span><br><span class="line">                        &#125;</span><br><span class="line">                        flag = <span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[j][i] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                        left = <span class="built_in">max</span>(left, j + <span class="number">1</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[j][i] == <span class="string">&#x27;2&#x27;</span>) &#123;</span><br><span class="line">                        right = <span class="built_in">min</span>(right, j - <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans.<span class="built_in">emplace_back</span>(left, right, left_inner, right_inner, !flag &amp;&amp; right == n - <span class="number">1</span>, !flag &amp;&amp; left == <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">process</span>(ans, m, n) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> solve_col = [&amp;]() -&gt; <span class="type">void</span> &#123;</span><br><span class="line">        vector&lt;tuple&lt;<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> left = <span class="number">0</span>, right = m - <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> left_inner = m - <span class="number">1</span>, right_inner = <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[i][j] != <span class="string">&#x27;?&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (a[i][j] == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">                            left_inner = right_inner = j;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            right_inner = j;</span><br><span class="line">                        &#125;</span><br><span class="line">                        flag = <span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[i][j] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                        left = <span class="built_in">max</span>(left, j + <span class="number">1</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[i][j] == <span class="string">&#x27;2&#x27;</span>) &#123;</span><br><span class="line">                        right = <span class="built_in">min</span>(right, j - <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans.<span class="built_in">emplace_back</span>(left, right, left_inner, right_inner, !flag &amp;&amp; right == m - <span class="number">1</span>, !flag &amp;&amp; left == <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">process</span>(ans, n, m) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (m &lt;= n) <span class="built_in">solve_col</span>();</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">solve_row</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><h1 id="Kings-Game-Hard-Version"><a href="#Kings-Game-Hard-Version" class="headerlink" title="Kings Game (Hard Version)"></a><a href="https://codeforces.com/gym/574109/problem/D">Kings Game (Hard Version)</a></h1><details class="folding-tag" ><summary> Coding By <font color=Red>Anonyme</font> </summary>              <div class='content'>              <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #undef LOCAL</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> LOCAL</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NDEBUG</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;D:\c++\Algo\Debug.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG <span class="keyword">if</span> (true)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(...) (void)0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG <span class="keyword">if</span> (false)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="keyword">namespace</span> Anonyme &#123;</span><br><span class="line"><span class="function">mt19937_64 <span class="title">rnd</span><span class="params">(chrono::steady_clock::now().time_since_epoch().count())</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> range(x, l, r) begin(x) + l, begin(x) + r + 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) begin(x), end(x)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(x) (int)x.size()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> file(x) freopen(x <span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin), freopen(x <span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout)</span></span><br><span class="line"><span class="keyword">using</span> u32 = <span class="type">unsigned</span> <span class="type">int</span>;</span><br><span class="line"><span class="keyword">using</span> i64 = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> u64 = <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> i128 = __int128;</span><br><span class="line"><span class="keyword">using</span> u128 = <span class="type">unsigned</span> __int128;</span><br><span class="line"><span class="keyword">using</span> d32 = <span class="type">double</span>;</span><br><span class="line"><span class="keyword">using</span> d64 = <span class="type">long</span> <span class="type">double</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="keyword">using</span> vc = vector&lt;T&gt;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="keyword">inline</span> <span class="type">void</span> <span class="keyword">operator</span> += (vc&lt;T&gt; &amp;x, <span class="type">const</span> T &amp;y) &#123;x.<span class="built_in">push_back</span>(y);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>, <span class="keyword">class</span> <span class="title class_">U</span>&gt; <span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">ckmax</span><span class="params">(T &amp;x, U &amp;&amp;y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? (x = y, <span class="literal">true</span>) : <span class="literal">false</span>;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>, <span class="keyword">class</span> <span class="title class_">U</span>&gt; <span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">ckmin</span><span class="params">(T &amp;x, U &amp;&amp;y)</span> </span>&#123;<span class="keyword">return</span> y &lt; x ? (x = y, <span class="literal">true</span>) : <span class="literal">false</span>;&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf32 = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> i64 inf64 = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line">vc&lt;<span class="type">int</span>&gt; pr, vis, mn;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">vis.<span class="built_in">assign</span>(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">mn.<span class="built_in">assign</span>(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!vis[i]) pr += i, mn[i] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> j : pr) &#123;</span><br><span class="line"><span class="keyword">if</span> (i * j &gt; n) <span class="keyword">break</span>;</span><br><span class="line">vis[i * j] = <span class="number">1</span>;</span><br><span class="line">mn[i * j] = j;</span><br><span class="line"><span class="keyword">if</span> (i % j == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">namespace</span> MTool &#123;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Cadd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;<span class="keyword">return</span> (i64)a + b &gt;= mod ? (i64)a + b - mod : a + b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Cdel</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;<span class="keyword">return</span> a - b &lt; <span class="number">0</span> ? a - b + mod : a - b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Cmul</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;<span class="keyword">return</span> <span class="number">1ll</span> * a * b % mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sqr</span><span class="params">(<span class="type">int</span> a)</span> </span>&#123;<span class="keyword">return</span> <span class="number">1ll</span> * a * a % mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Madd</span><span class="params">(<span class="type">int</span> &amp;a, <span class="type">int</span> b)</span> </span>&#123;a = (i64)a + b &gt;= mod ? (i64)a + b - mod : a + b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Mdel</span><span class="params">(<span class="type">int</span> &amp;a, <span class="type">int</span> b)</span> </span>&#123;a = a - b &lt; <span class="number">0</span> ? a - b + mod : a - b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Mmul</span><span class="params">(<span class="type">int</span> &amp;a, <span class="type">int</span> b)</span> </span>&#123;a = <span class="number">1ll</span> * a * b % mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">neg</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;<span class="keyword">return</span> !x ? <span class="number">0</span> : mod - x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">norm</span><span class="params">(i64 x)</span> </span>&#123;<span class="keyword">return</span> (x % mod + mod) % mod;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ...Args&gt; <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Cadd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, Args ...args)</span> </span>&#123;<span class="keyword">return</span> <span class="built_in">Cadd</span>(<span class="built_in">Cadd</span>(a, b), args...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ...Args&gt; <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Cdel</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, Args ...args)</span> </span>&#123;<span class="keyword">return</span> <span class="built_in">Cdel</span>(<span class="built_in">Cdel</span>(a, b), args...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ...Args&gt; <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Cmul</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, Args ...args)</span> </span>&#123;<span class="keyword">return</span> <span class="built_in">Cmul</span>(<span class="built_in">Cmul</span>(a, b), args...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ...Args&gt; <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Madd</span><span class="params">(<span class="type">int</span> &amp;a, <span class="type">int</span> b, Args ...args)</span> </span>&#123;<span class="built_in">Madd</span>(a, b), <span class="built_in">Madd</span>(a, args...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ...Args&gt; <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Mdel</span><span class="params">(<span class="type">int</span> &amp;a, <span class="type">int</span> b, Args ...args)</span> </span>&#123;<span class="built_in">Mdel</span>(a, b), <span class="built_in">Mdel</span>(a, args...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ...Args&gt; <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Mmul</span><span class="params">(<span class="type">int</span> &amp;a, <span class="type">int</span> b, Args ...args)</span> </span>&#123;<span class="built_in">Mmul</span>(a, b), <span class="built_in">Mmul</span>(a, args...);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> a, i64 b, <span class="type">int</span> Mod = mod)</span> </span>&#123;<span class="type">int</span> ans = <span class="number">1</span>; <span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>, a = <span class="number">1ll</span> * a * a % Mod) <span class="keyword">if</span> (b &amp; <span class="number">1</span>) ans = <span class="number">1ll</span> * ans * a % Mod; <span class="keyword">return</span> ans;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> MTool;</span><br><span class="line"></span><br><span class="line">vc&lt;<span class="type">int</span>&gt; p, tim;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">5</span>; i &gt;= <span class="number">0</span>; i--) <span class="keyword">if</span> (x &gt;&gt; i &amp; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!p[i]) &#123;</span><br><span class="line">p[i] = x, tim[i] = id;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (tim[i] &lt; id) &#123;</span><br><span class="line"><span class="built_in">swap</span>(p[i], x), <span class="built_in">swap</span>(tim[i], id);</span><br><span class="line">&#125;</span><br><span class="line">x ^= p[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">vc&lt;<span class="type">int</span>&gt; pw;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, q;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line"><span class="function">vc&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, x; i &lt; n; i++) &#123;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line"><span class="keyword">while</span> (x != <span class="number">1</span>) &#123;</span><br><span class="line">a[i]++;</span><br><span class="line">x /= mn[x];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">debug</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="function">vc&lt;<span class="type">int</span>&gt; <span class="title">sum</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">sum[i] = (i ? sum[i - <span class="number">1</span>] : <span class="number">0</span>) + (a[i] == <span class="number">1</span>);</span><br><span class="line"><span class="function">vc&lt;<span class="type">int</span>&gt; <span class="title">rsum</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">rsum[i] = (i ? rsum[i - <span class="number">1</span>] : <span class="number">0</span>) + (a[i] == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="function">vc&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(q)</span></span>;</span><br><span class="line">vc&lt;vc&lt;array&lt;<span class="type">int</span>, 2&gt;&gt;&gt; <span class="built_in">ask</span>(n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; q; i++) &#123;</span><br><span class="line"><span class="type">int</span> l, r;</span><br><span class="line">cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">l--, r--;</span><br><span class="line"><span class="type">int</span> rc = rsum[r] - (l ? rsum[l - <span class="number">1</span>] : <span class="number">0</span>), c = sum[r] - (l ? sum[l - <span class="number">1</span>] : <span class="number">0</span>);</span><br><span class="line"><span class="built_in">Madd</span>(ans[i], pw[r - l + <span class="number">1</span>]);</span><br><span class="line"><span class="built_in">Mdel</span>(ans[i], <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (!c) <span class="built_in">Madd</span>(ans[i], <span class="built_in">Cdel</span>(pw[rc], <span class="number">1</span>));</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">Mdel</span>(ans[i], <span class="number">1</span>);</span><br><span class="line">ask[r] += &#123;l, i&#125;;</span><br><span class="line">&#125;</span><br><span class="line">p.<span class="built_in">assign</span>(<span class="number">6</span>, <span class="number">0</span>), tim.<span class="built_in">assign</span>(<span class="number">6</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">ins</span>(a[i], i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> [l, id] : ask[i]) &#123;</span><br><span class="line"><span class="type">int</span> c = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">5</span>; j++)</span><br><span class="line"><span class="keyword">if</span> (tim[j] &gt;= l) c++;</span><br><span class="line"><span class="built_in">Mdel</span>(ans[id], <span class="built_in">Cdel</span>(pw[i - l + <span class="number">1</span> - c], <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; q; i++) cout &lt;&lt; ans[i] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main01</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">file</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>) -&gt; <span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">init</span>(<span class="number">1e7</span>);</span><br><span class="line">pw.<span class="built_in">resize</span>(<span class="number">1000005</span>);</span><br><span class="line">pw[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="built_in">sz</span>(pw); i++) pw[i] = <span class="built_in">Cadd</span>(pw[i - <span class="number">1</span>], pw[i - <span class="number">1</span>]);</span><br><span class="line"><span class="type">int</span> t = <span class="number">1</span>;</span><br><span class="line">cin &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span> (t--) <span class="built_in">solve</span>();</span><br><span class="line">&#125;&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> Anonyme::<span class="built_in">main01</span>(), <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><h1 id="十六行诗"><a href="#十六行诗" class="headerlink" title="十六行诗"></a><a href="https://codeforces.com/gym/574109/problem/E">十六行诗</a></h1><details class="folding-tag" ><summary> Coding By <font color=purple>LANSGANBS</font> </summary>              <div class='content'>              <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  cin &gt;&gt; n;</span><br><span class="line">  <span class="function">V&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    cin &gt;&gt; a[i];</span><br><span class="line">  &#125;</span><br><span class="line">  V&lt;<span class="type">int</span>&gt; tmp = a;</span><br><span class="line">  <span class="built_in">remDup</span>(tmp);</span><br><span class="line">  <span class="type">int</span> d = tmp.<span class="built_in">size</span>();</span><br><span class="line">  <span class="keyword">auto</span> get = [&amp;](<span class="type">int</span> x) &#123;</span><br><span class="line">    <span class="built_in">return</span> (<span class="built_in">lower_bound</span>(tmp.<span class="built_in">begin</span>() + <span class="number">1</span>, tmp.<span class="built_in">end</span>(), x) - (tmp.<span class="built_in">begin</span>()));</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    a[i] = <span class="built_in">get</span>(a[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  V&lt;V&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">nxt</span>(n + <span class="number">2</span>, <span class="built_in">V</span>&lt;<span class="type">int</span>&gt;(d + <span class="number">1</span>, n + <span class="number">1</span>));</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> v = <span class="number">1</span>; v &lt;= d; v++) &#123;</span><br><span class="line">    nxt[n + <span class="number">1</span>][v] = n + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> v = <span class="number">1</span>; v &lt;= d; v++) &#123;</span><br><span class="line">      nxt[i][v] = nxt[i + <span class="number">1</span>][v];</span><br><span class="line">    &#125;</span><br><span class="line">    nxt[i][a[i]] = i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">V&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">2</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">    dp[i] = dp[i + <span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> j = nxt[i + <span class="number">1</span>][a[i]];</span><br><span class="line">    <span class="keyword">if</span> (j &lt;= n) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> b = <span class="number">1</span>; b &lt;= d; b++) &#123;</span><br><span class="line">        <span class="type">int</span> k = nxt[j + <span class="number">1</span>][b];</span><br><span class="line">        <span class="keyword">if</span> (k &gt; n) &#123;</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> l = nxt[k + <span class="number">1</span>][b];</span><br><span class="line">        <span class="keyword">if</span> (l &gt; n) &#123;</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[i] = <span class="built_in">max</span>(dp[i], <span class="number">1</span> + dp[l + <span class="number">1</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">      <span class="type">int</span> k = nxt[j + <span class="number">1</span>][a[i]];</span><br><span class="line">      <span class="keyword">if</span> (k &gt; n) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="type">int</span> l = nxt[k + <span class="number">1</span>][a[j]];</span><br><span class="line">      <span class="keyword">if</span> (l &gt; n) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      dp[i] = <span class="built_in">max</span>(dp[i], <span class="number">1</span> + dp[l + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">      <span class="type">int</span> k = nxt[j + <span class="number">1</span>][a[j]];</span><br><span class="line">      <span class="keyword">if</span> (k &gt; n) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="type">int</span> l = nxt[k + <span class="number">1</span>][a[i]];</span><br><span class="line">      <span class="keyword">if</span> (l &gt; n) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      dp[i] = <span class="built_in">max</span>(dp[i], <span class="number">1</span> + dp[l + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; dp[<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><h1 id="Yuhina-City"><a href="#Yuhina-City" class="headerlink" title="Yuhina City"></a><a href="https://codeforces.com/gym/574109/problem/F">Yuhina City</a></h1><details class="folding-tag" ><summary> Coding By <font color=orange>thisislike_fan</font> </summary>              <div class='content'>              <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m, q;</span><br><span class="line">    n = <span class="built_in">read</span>(), m = <span class="built_in">read</span>(), q = <span class="built_in">read</span>();</span><br><span class="line">    <span class="function">vector&lt;ll&gt; <span class="title">r</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) r[i] = <span class="built_in">read_ll</span>();</span><br><span class="line">    </span><br><span class="line">    vector&lt;vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&gt; <span class="built_in">g</span>(n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="type">int</span> u, v, w;</span><br><span class="line">        u = <span class="built_in">read</span>(), v = <span class="built_in">read</span>(), w = <span class="built_in">read</span>();</span><br><span class="line">        g[u].<span class="built_in">emplace_back</span>(v, w);</span><br><span class="line">        g[v].<span class="built_in">emplace_back</span>(u, w);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#123;</span><br><span class="line">        priority_queue&lt;pair&lt;ll, <span class="type">int</span>&gt;, vector&lt;pair&lt;ll, <span class="type">int</span>&gt;&gt;, less&lt;pair&lt;ll, <span class="type">int</span>&gt;&gt;&gt; q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) q.<span class="built_in">push</span>(&#123;r[i], i&#125;);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> [d, u] = q.<span class="built_in">top</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (r[u] != d) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> [v, w] : g[u]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (d - w &gt; r[v]) &#123;</span><br><span class="line">                    r[v] = d - w;</span><br><span class="line">                    q.<span class="built_in">push</span>(&#123;r[v], v&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;ll&gt; <span class="title">k</span><span class="params">(r)</span></span>;</span><br><span class="line">    <span class="built_in">sort</span>(k.<span class="built_in">begin</span>(), k.<span class="built_in">end</span>());</span><br><span class="line">    k.<span class="built_in">erase</span>(<span class="built_in">unique</span>(k.<span class="built_in">begin</span>(), k.<span class="built_in">end</span>()), k.<span class="built_in">end</span>());</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">auto</span> check = [&amp;](<span class="type">int</span> u, <span class="type">int</span> v, ll f, <span class="type">int</span> k) -&gt; <span class="type">int</span> &#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; <span class="built_in">dist</span>(n + <span class="number">1</span>, infi);</span><br><span class="line">        dist[u] = r[u] &gt; f;</span><br><span class="line">        deque&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; que;</span><br><span class="line">        que.<span class="built_in">push_back</span>(&#123;dist[u], u&#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> [d, u] = que.<span class="built_in">front</span>(); que.<span class="built_in">pop_front</span>();</span><br><span class="line">            <span class="keyword">if</span> (dist[u] != d) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> [v, _] : g[u]) &#123;</span><br><span class="line">                <span class="type">int</span> w = r[v] &gt; f;</span><br><span class="line">                <span class="keyword">if</span> (dist[v] &gt; d + w) &#123;</span><br><span class="line">                    dist[v] = d + w;</span><br><span class="line">                    <span class="keyword">if</span> (w) que.<span class="built_in">push_back</span>(&#123;dist[v], v&#125;);</span><br><span class="line">                    <span class="keyword">else</span> que.<span class="built_in">push_front</span>(&#123;dist[v], v&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dist[v] &lt;= k;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="type">int</span> u, v, c;</span><br><span class="line">        u = <span class="built_in">read</span>(), v = <span class="built_in">read</span>(), c = <span class="built_in">read</span>();</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = k.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        ll ans = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">check</span>(u, v, k[mid], c)) &#123;</span><br><span class="line">                ans = k[mid];</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Print</span>(ans, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Write</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><h1 id="So-Far-Away"><a href="#So-Far-Away" class="headerlink" title="So Far Away"></a><a href="https://codeforces.com/gym/574109/problem/I">So Far Away</a></h1><details class="folding-tag" ><summary> Coding By <font color=Red>Anonyme</font> </summary>              <div class='content'>              <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, q;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function">vc&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) cin &gt;&gt; x;</span><br><span class="line">set&lt;array&lt;<span class="type">int</span>, 2&gt;&gt; s;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) s.<span class="built_in">insert</span>(&#123;a[i], i&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="function">vc&lt;<span class="type">int</span>&gt; <span class="title">idx</span><span class="params">(n, <span class="number">-1</span>)</span></span>;</span><br><span class="line"><span class="keyword">while</span> (q--) &#123;</span><br><span class="line"><span class="type">int</span> op;</span><br><span class="line">cin &gt;&gt; op;</span><br><span class="line"><span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="type">int</span> x, w;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; w;</span><br><span class="line">x--;</span><br><span class="line">s.<span class="built_in">erase</span>(&#123;a[x], x&#125;);</span><br><span class="line">a[x] = w;</span><br><span class="line">s.<span class="built_in">insert</span>(&#123;a[x], x&#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">int</span> u, v, k;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v &gt;&gt; k;</span><br><span class="line">u--, v--;</span><br><span class="line"> </span><br><span class="line">vc&lt;<span class="type">int</span>&gt; pos;</span><br><span class="line">pos += u, pos += v;</span><br><span class="line">idx[u] = <span class="number">0</span>, idx[v] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> [d, i] : s) <span class="keyword">if</span> (i != u &amp;&amp; i != v) &#123;</span><br><span class="line">idx[i] = <span class="built_in">sz</span>(pos), pos += i;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">sz</span>(pos) == <span class="number">12</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> m = <span class="built_in">sz</span>(pos);</span><br><span class="line">vc&lt;vc&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">f</span>(m, <span class="built_in">vc</span>&lt;<span class="type">int</span>&gt; (m, inf32));</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++) </span><br><span class="line">f[i][j] = <span class="built_in">min</span>(a[pos[i]], a[pos[j]]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) f[i][i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line"><span class="type">int</span> x, y;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">x--, y--;</span><br><span class="line"><span class="keyword">if</span> (idx[x] == <span class="number">-1</span> || idx[y] == <span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">f[idx[x]][idx[y]] = f[idx[y]][idx[x]] = inf32;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++) </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; m; k++)</span><br><span class="line"><span class="built_in">ckmin</span>(f[j][k], f[j][i] + f[i][k]);</span><br><span class="line"> </span><br><span class="line">cout &lt;&lt; f[<span class="number">0</span>][<span class="number">1</span>] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">sz</span>(pos); i++) idx[pos[i]] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><h1 id="MEX-Should-Be-Same"><a href="#MEX-Should-Be-Same" class="headerlink" title="MEX Should Be Same"></a><a href="https://codeforces.com/gym/574109/problem/J">MEX Should Be Same</a></h1><details class="folding-tag" ><summary> Coding By <font color=purple>LANSGANBS</font> </summary>              <div class='content'>              <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  cin &gt;&gt; n;</span><br><span class="line">  V&lt;V&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">b</span>(n, <span class="built_in">V</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>));</span><br><span class="line">  <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : b) &#123;</span><br><span class="line">    cin &gt;&gt; x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : b) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;y : x) &#123;</span><br><span class="line">      <span class="keyword">if</span> (y == <span class="number">0</span>) &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> maxx = <span class="built_in">div</span>&lt;<span class="type">int</span>&gt;(n * n, <span class="number">2</span>, flase);</span><br><span class="line">  <span class="type">int</span> ok = (cnt &lt;= maxx ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : b) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;y : x) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((ok <span class="keyword">and</span> y == <span class="number">0</span>) <span class="built_in">or</span> (ok == <span class="number">0</span> <span class="keyword">and</span> y)) &#123;</span><br><span class="line">        y = ok;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : b) &#123;</span><br><span class="line">    cout &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><h1 id="LRU-is-Best-Hard-Version"><a href="#LRU-is-Best-Hard-Version" class="headerlink" title="LRU is Best? (Hard Version)"></a><a href="https://codeforces.com/gym/574109/problem/L">LRU is Best? (Hard Version)</a></h1><details class="folding-tag" ><summary> Coding By <font color=Red>Tobo</font> </summary>              <div class='content'>              <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> i64 = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">800</span> * <span class="number">3</span>;</span><br><span class="line"><span class="type">const</span> i64 INF = <span class="number">1e18</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">    <span class="type">int</span> to, cap, cost, rev;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">vector&lt;Edge&gt; G[MAXN];</span><br><span class="line">i64 dist[MAXN];</span><br><span class="line"><span class="type">int</span> prevv[MAXN], preve[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加边的函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_edge</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> cap, <span class="type">int</span> cost)</span> </span>&#123;</span><br><span class="line">    G[from].<span class="built_in">push_back</span>(&#123;to, cap, cost, (<span class="type">int</span>)G[to].<span class="built_in">size</span>()&#125;);</span><br><span class="line">    G[to].<span class="built_in">push_back</span>(&#123;from, <span class="number">0</span>, -cost, (<span class="type">int</span>)G[from].<span class="built_in">size</span>() - <span class="number">1</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求解最大费用流</span></span><br><span class="line"><span class="function">pair&lt;<span class="type">int</span>, i64&gt; <span class="title">min_cost_flow</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t, <span class="type">int</span> f)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> flow = <span class="number">0</span>;</span><br><span class="line">    i64 cost = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (flow &lt; f) &#123;</span><br><span class="line">        <span class="built_in">fill</span>(dist, dist + MAXN, -INF);</span><br><span class="line">        dist[s] = <span class="number">0</span>;</span><br><span class="line">        <span class="type">bool</span> update = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (update) &#123;</span><br><span class="line">            update = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> v = <span class="number">0</span>; v &lt; MAXN; v++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dist[v] == -INF) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[v].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">                    Edge &amp;e = G[v][i];</span><br><span class="line">                    <span class="keyword">if</span> (e.cap &gt; <span class="number">0</span> &amp;&amp; dist[e.to] &lt; dist[v] + e.cost) &#123;</span><br><span class="line">                        dist[e.to] = dist[v] + e.cost;</span><br><span class="line">                        prevv[e.to] = v;</span><br><span class="line">                        preve[e.to] = i;</span><br><span class="line">                        update = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dist[t] == -INF) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;flow, cost&#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> d = f - flow;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> v = t; v != s; v = prevv[v]) &#123;</span><br><span class="line">            d = <span class="built_in">min</span>(d, G[prevv[v]][preve[v]].cap);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> v = t; v != s; v = prevv[v]) &#123;</span><br><span class="line">            Edge &amp;e = G[prevv[v]][preve[v]];</span><br><span class="line">            e.cap -= d;</span><br><span class="line">            G[v][e.rev].cap += d;</span><br><span class="line">            cost += <span class="number">1ll</span> * d * e.cost;</span><br><span class="line">        &#125;</span><br><span class="line">        flow += d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;flow, cost&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="type">int</span> n, m;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        i64 ans = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span>, x </span>= a, y = a, z = a;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            cin &gt;&gt; a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            cin &gt;&gt; x[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            cin &gt;&gt; y[i];</span><br><span class="line">            ans -= y[i];</span><br><span class="line">            x[i] += y[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            cin &gt;&gt; z[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> tot = <span class="number">0</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">id</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n + <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            id[i] = id[i - <span class="number">1</span>];</span><br><span class="line">            id[i][<span class="number">0</span>] = ++tot;</span><br><span class="line">            id[i][a[i]] = ++tot;</span><br><span class="line">            <span class="built_in">add_edge</span>(id[i][a[i]], id[i][<span class="number">0</span>], <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="built_in">add_edge</span>(id[i][<span class="number">0</span>], id[i][a[i]], <span class="number">1</span>, -z[i]);</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="built_in">add_edge</span>(id[i - <span class="number">1</span>][<span class="number">0</span>], id[i][<span class="number">0</span>], m, <span class="number">0</span>);</span><br><span class="line">                <span class="built_in">add_edge</span>(id[i - <span class="number">1</span>][a[i]], id[i][a[i]], <span class="number">1</span>, x[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans + <span class="built_in">min_cost_flow</span>(id[<span class="number">1</span>][<span class="number">0</span>], id[n][<span class="number">0</span>], m).second &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tot; i++) &#123;</span><br><span class="line">            G[i].<span class="built_in">clear</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2 2</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">1 1</span></span><br><span class="line"><span class="comment">0 0</span></span><br><span class="line"><span class="comment">0 0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>              </div>            </details><h1 id="猫娘部署"><a href="#猫娘部署" class="headerlink" title="猫娘部署"></a><a href="https://codeforces.com/gym/574109/problem/M">猫娘部署</a></h1><details class="folding-tag" ><summary> Coding By <font color=purple>LANSGANBS</font> </summary>              <div class='content'>              <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> n, m;</span><br><span class="line">  cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">  <span class="function">V&lt;string&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">  cin &gt;&gt; a;</span><br><span class="line">  <span class="function">V&lt;<span class="type">int</span>&gt; <span class="title">avi</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="type">int</span> so = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (a[i][j] == <span class="string">&#x27;Y&#x27;</span>) &#123;</span><br><span class="line">        so |= (<span class="number">1</span> &lt;&lt; j);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    avi[i] = so;</span><br><span class="line">  &#125;</span><br><span class="line">  V&lt;V&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">valid</span>(n);</span><br><span class="line">  V&lt;V&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">cnt</span>(n);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; (<span class="number">1</span> &lt;&lt; m); j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((j &amp; avi[i]) != j) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (j &amp; (j &lt;&lt; <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      valid[i].<span class="built_in">pb</span>(j);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> lim = (<span class="number">1</span> &lt;&lt; m);</span><br><span class="line">  V&lt;V&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n, <span class="built_in">V</span>&lt;<span class="type">int</span>&gt;(lim, <span class="number">-1</span>));</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> x : valid[<span class="number">0</span>]) &#123;</span><br><span class="line">    dp[<span class="number">0</span>][x] = __builtin_popcount(x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : valid[i]) &#123;</span><br><span class="line">      <span class="type">int</span> cur = __builtin_popcount(x);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;y : valid[i - <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dp[i - <span class="number">1</span>][y] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (x &amp; y) &#123;</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[i][x] = <span class="built_in">max</span>(dp[i][x], dp[i - <span class="number">1</span>][y] + cur);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lim; i++) &#123;</span><br><span class="line">    <span class="built_in">ckmax</span>(ans, dp[n<span class="number">-1</span>][i]);</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><h1 id="混沌数字"><a href="#混沌数字" class="headerlink" title="混沌数字"></a><a href="https://codeforces.com/gym/574109/problem/N">混沌数字</a></h1><details class="folding-tag" ><summary> Coding By <font color=Red>Tobo</font> </summary>              <div class='content'>              <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> i64 = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ifstream cin;</span></span><br><span class="line">    <span class="comment">// cin.open(&quot;0.in&quot;);</span></span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="function">vector <span class="title">a</span><span class="params">(n, vector(m, <span class="type">int</span>(<span class="number">0</span>)))</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;t : a) &#123;</span><br><span class="line">        string s;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">            t[j] = s[j] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// cin.close();</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">fa</span><span class="params">(n * m)</span>, <span class="title">siz</span><span class="params">(n * m, <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="built_in">iota</span>(fa.<span class="built_in">begin</span>(), fa.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">auto</span> find = [&amp;](<span class="keyword">auto</span> &amp;find, <span class="type">int</span> x) -&gt; <span class="type">int</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (x == fa[x]) <span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">return</span> fa[x] = <span class="built_in">find</span>(find, fa[x]);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> id = [&amp;](<span class="type">int</span> x, <span class="type">int</span> y) -&gt; <span class="type">int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x * m + y;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!a[i][j]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (i <span class="keyword">and</span> a[i - <span class="number">1</span>][j]) &#123;</span><br><span class="line">                <span class="type">int</span> fx = <span class="built_in">find</span>(find, <span class="built_in">id</span>(i - <span class="number">1</span>, j));</span><br><span class="line">                <span class="type">int</span> fy = <span class="built_in">find</span>(find, <span class="built_in">id</span>(i, j));</span><br><span class="line">                <span class="keyword">if</span> (fx == fy) <span class="keyword">continue</span>;</span><br><span class="line">                fa[fy] = fx;</span><br><span class="line">                siz[fx] += siz[fy];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j <span class="keyword">and</span> a[i][j - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="type">int</span> fx = <span class="built_in">find</span>(find, <span class="built_in">id</span>(i, j - <span class="number">1</span>));</span><br><span class="line">                <span class="type">int</span> fy = <span class="built_in">find</span>(find, <span class="built_in">id</span>(i, j));</span><br><span class="line">                <span class="keyword">if</span> (fx == fy) <span class="keyword">continue</span>;</span><br><span class="line">                fa[fy] = fx;</span><br><span class="line">                siz[fx] += siz[fy];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    string ans;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!a[i][j]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> cur = <span class="built_in">id</span>(i, j);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">find</span>(find, cur) != cur) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (siz[cur] &lt;= n * <span class="number">2</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (siz[cur] &gt;= n * <span class="number">15</span>) ans.<span class="built_in">push_back</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            <span class="keyword">else</span> ans.<span class="built_in">push_back</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://codeforces.com/gym/105895&quot;&gt;The 21st Southeast University Programming Contest (Summer)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;下文链接均为验题链接&lt;/str</summary>
      
    
    
    
    
    <category term="XCPC" scheme="https://www.lansganbs.cn/tags/XCPC/"/>
    
  </entry>
  
  <entry>
    <title>米津玄师《Lemon》歌词及罗马音发音</title>
    <link href="https://www.lansganbs.cn/posts/e7b1f3d7.html"/>
    <id>https://www.lansganbs.cn/posts/e7b1f3d7.html</id>
    <published>2025-05-20T14:20:13.000Z</published>
    <updated>2025-07-02T11:40:03.113Z</updated>
    
    <content type="html"><![CDATA[<p>【歌词及罗马音发音】《Lemon》 - 米津玄师</p><p>填词：米津玄师</p><p>谱曲：米津玄师</p><p>编曲：米津玄师</p><p>歌曲原唱：米津玄师</p><p><img src="https://image.lansganbs.cn/f0199c4cc60b97e55e6c671a8664e1f4.png" alt=""></p><p><a href="https://music.apple.com/cn/album/lemon/1537460610?i=1537460612">Lemon</a></p><hr><p>yu me na~ra ba &emsp; do~re ho do &emsp; yo~ka tta de sho o</p><p>梦（ゆめ）ならば &emsp; どれほど &emsp; よかったでしょう</p><p>如果这一切都是梦境该有多好</p><p>i ma da &emsp; <span style="color: red;">ni</span>~a na ta &emsp; no~ko to wo &emsp; <u>yu <span style="color: red;">me</span></u>~ni mi ru</p><p>未（いま）だ &emsp; にあなた &emsp; のことを &emsp; 梦（ゆめ）にみる</p><p>至今仍能与你在梦中相遇</p><p>wa su re~ta mo &emsp; no~wo to ri &emsp; ni~ka e ru &emsp; <u>yo <span style="color: grey;">o</span></u> ni</p><p>忘（わす）れた物（もの） &emsp; を取（と）り &emsp; に 帰（かえ）る &emsp; ように</p><p>如同取回遗忘之物一般</p><p>fu ru bi~&emsp; ta o mo i de no <span style="color: red;">ho</span> ko &emsp; ri wo~ha <u>ra <span style="color: grey;">u</span></u></p><p>古（ふる）びた思（おも）い出（で）の埃（ほこり）  を払（はら）う</p><p>细细拂去将回忆覆盖的尘埃</p><p>mo do ra~na i &emsp; shi~a wa se &emsp; ga~a ru ko &emsp; to~wo</p><p>戻（もど）らない     幸（しあわ）せ    があることを</p><p>这世间亦有无法挽回的幸福</p><p>sa i go &emsp; ni~a na ta~ga &emsp; o shi e &emsp; te~ku re ta</p><p>最後（さいご）&emsp; にあなた &emsp; が教（おし）え &emsp; てくれた</p><p>最终是你让我懂得这一点</p><p>i e zu~ni ka &emsp; ku~shi te ta &emsp; ku~ra i ka ko~mo</p><p>言（い）えずに隠（かく） &emsp; してた &emsp; 昏（くら）い過去（かこ）も</p><p>那些未对他人提及过的黑暗往事</p><p>a na ta &emsp; ga~<u>i na kya</u> &emsp; e i e <span style="color: grey;">n</span> <span style="color: red;">ni</span> &emsp; ku ra &emsp; <span style="color: red;">i</span>~ma ma </p><p>あなた &emsp; がいなきゃ 永远（えいえん）に &emsp; 昏（くら）いまま</p><p>如果不曾有你的话 它们将永远沉睡在黑暗中</p><p>ki tto <u>mo <span style="color: grey;">o</span></u> &emsp; ko re i~jyo o &emsp; ki~zu tsu &emsp; ku ko to na do</p><p>きっともうこれ以上（いじょう）&emsp; 傷（きず）つくことなど</p><p>比这更令人难过的事情</p><p>a~<u>ri wa</u> &emsp; shi na i~to wa &emsp; ka tte i ru</p><p>ありはしないとわ &emsp; かっている</p><p>我知道不可能存在</p><p>a no hi no ka na &emsp; shi mi &emsp; sa e</p><p>あの日（ひ）の悲（かな） &emsp; しみさえ</p><p>那日的悲伤</p><p>a no hi no ku ru &emsp; shi mi &emsp; sa e</p><p>あの日（ひ）の苦（くる） &emsp; しみさえ</p><p>与那日的痛苦</p><p>so no su be te wo &emsp; a i &emsp; shi <span style="color: red;">te</span> ta &emsp; a <span style="color: red;">na</span> &emsp; ta to &emsp; to mo ni</p><p>そのすべてを &emsp; 爱（あい）してた &emsp; あなたとともに</p><p>连同深爱着这一切的你</p><p>mu ne ni no &emsp; ko ri &emsp; ha na &emsp; re na</p><p>胸（むね）に残（のこ）り &emsp; 離（はな）れない</p><p>化作了深深烙印在我心中的</p><p>i ni ga i <u>re mo n</u> &emsp; no ni~o i</p><p>苦（にが）いレモン &emsp; の匂（にお）い</p><p>苦涩柠檬的香气</p><p>a me ga &emsp; fu ri ya mu ma <span style="color: blue;">de</span> wa &emsp; ka e &emsp; re na i</p><p>雨（あめ）が降（ふ）り止（や）むまでは      帰（かえ）れない</p><p>在雨过天晴前都无法归去</p><p>i ma de mo &emsp; a na ta <span style="color: blue;">wa</span> &emsp; wa ta &emsp; shi no &emsp; hi ka~ri</p><p>今（いま）でもあなたはわたしの光（ひかり）</p><p>时至今日 你仍是我的光芒</p><hr><p>ku ra ya mi de &emsp; a na ta no &emsp; se wo na zo~tta</p><p>暗闇（くらやみ）で &emsp; あなたの &emsp; 背（せ）をなぞった</p><p>在黑暗中追寻着你的身影</p><p>so no <u>ri <span style="color: grey;">n</span></u> &emsp; <span style="color: red;">ka</span> ku wo <u>se <span style="color: grey;">n</span></u> &emsp; <u>me <span style="color: grey;">i</span></u> ni o bo &emsp; <span style="color: red;">e</span> te i ru</p><p>その輪郭（りんかく）を鮮明（せんめい） &emsp; に 覚（おぼ） &emsp; えている</p><p>那轮廓至今仍鲜明地刻印于心</p><p>u ke to me ki &emsp; re <u>na <span style="color: grey;">i</span></u> mo no &emsp; to de a u &emsp; ta bi</p><p>受（う）け止（と）めき &emsp; れないもの &emsp; と出会（であ）うたび</p><p>每当遇到无法承受的苦痛时</p><p>a fu re &emsp; te ya ma na i no <span style="color: red;">wa</span> &emsp; na <span style="color: red;">mi</span> &emsp; da da~ke</p><p>溢（あふ）れ &emsp; てやまないのは &emsp; 涙（なみだ）だけ</p><p>总不禁泪如泉涌</p><p>na <u>ni wo</u> &emsp; shi te i ta no &emsp; na <u>ni wo</u> &emsp; mi te i ta no</p><p>何（なに）をしていたの 何（なに）を見（み）ていたの</p><p>你都经历过什么 又目睹过什么呢</p><p>wa~ta shi &emsp; no shi ra na i yo ko &emsp; ga o de</p><p>わたし &emsp; の知（し）らない &emsp; 横顔（よこがお）で</p><p>脸上浮现着我不曾见过的神情</p><p>do ko ka de a na &emsp; ta ga &emsp; i ma</p><p>どこかであな &emsp; たが今（いま）</p><p>如果你正在什么地方</p><p>wa ta shi to o na &emsp; ji yo &emsp; o na</p><p>わたしと同（おな） &emsp; じ 様（よう）な</p><p>与我一样</p><p>na mi da ni ku re &emsp; sa bi &emsp; <u> shi <span style="color: red;">sa</span> no</u> &emsp; na <span style="color: red;">ka</span> ni i ru na ra</p><p>涙（なみだ）にくれ &emsp; 淋（さび）しさの &emsp; 中（なか）にいるなら</p><p>终日过着以泪洗面的寂寞生活的话</p><p>wa ta shi no ko to &emsp; na do do u &emsp; ka~<u>wa su re te</u> &emsp; ku da sa i</p><p>わたしのこと &emsp; などどう &emsp; か忘（わす）れてください</p><p>就请你将我的一切全部遗忘吧</p><p>so n na ko to <span style="color: grey;">wo</span> &emsp; ko ko ro ka ra &emsp; <u>ne ga u</u> &emsp; ho do~ni</p><p>そんなことを &emsp; 心（こころ）から &emsp; 願（ねが）う &emsp; ほどに</p><p>这是我发自内深处唯一的祈愿</p><p>i ma de mo &emsp; a na ta wa &emsp; wa ta &emsp; shi no &emsp; hi ka~ri</p><p>今（いま）でも &emsp; あなたはわたしの光（ひかり）</p><p>时至今日 你仍是我的光芒</p><p>ji &nbsp; bu &nbsp; n &nbsp; <u>ga o</u> &nbsp; <u>mo u</u> &nbsp; yo &nbsp; ri</p><p>自分（じぶん）が思（おも）うより</p><p>超出了我自己的想象</p><p><u>ko i</u> &nbsp; wo &nbsp; <u>shi te <span style="color: grey;">i</span></u> &nbsp; <u>ta a</u> &nbsp; na &nbsp; ta &nbsp; ni</p><p>恋（こい）をしていたあなたに</p><p>我深深地恋慕着你</p><p>a &nbsp; re &nbsp; ka &nbsp; <u>ra o</u> &nbsp; mo u &nbsp; yo u &nbsp; ni</p><p>あれから思（おも）うように</p><p>自此每当想起你</p><p>i &nbsp; ki &nbsp; ga &nbsp; de &nbsp; ki &nbsp; na &nbsp; i</p><p>息（いき）ができない</p><p>都如同窒息般痛苦</p><p><u>a n na ni</u> &nbsp; so &nbsp;  ba &nbsp; <u>ni i</u> &nbsp; ta &nbsp; no &nbsp; ni  </p><p>あんなに &emsp; 侧（そば）にいたのに</p><p>你曾亲密伴我身旁</p><p>ma &nbsp; ru &nbsp; de &nbsp; u &nbsp; so &nbsp; mi &nbsp; <u>ta i</u></p><p>まるで嘘（うそ）みたい</p><p>如今却如烟云般消散</p><p><u>to te mo</u> &emsp; wa~<u>su re</u>~ra &nbsp; re &nbsp; na &nbsp; i</p><p>とても &emsp; 忘（わす）れられない</p><p>我永远都不会将你遗忘</p><p>so &nbsp; re &nbsp; da &nbsp; ke &nbsp; ga &nbsp; ta &nbsp; shi &nbsp; ka</p><p>それだけが確（たし）か</p><p>这是唯一能确定的</p><p>a no hi no ka na &emsp; shi mi &emsp; sa e</p><p>あの日（ひ）の悲（かな）しみさえ</p><p>那日的悲伤</p><p>a no hi no ku ru &emsp; shi mi &emsp; sa e</p><p>あの日（ひ）の苦（くる）しみさえ</p><p>与那日的痛苦</p><p>so no su be te wo &emsp; a i &emsp; shi <span style="color: red;">te</span> ta &emsp; a <span style="color: red;">na</span> &emsp; ta to &emsp; to mo ni</p><p>そのすべてを &emsp; 爱（あい）してた &emsp; あなたと &emsp; ともに</p><p>连同深爱着这一切的你</p><p>mu ne ni no ko ri &emsp; ha na &emsp; re na</p><p>胸（むね）に残（のこ）り &emsp; 離（はな）れない</p><p>化作了深深烙印在我心中的</p><p>i ni ga i <u> <span style="color: red;">re</span> mo n</u> &emsp; no ni~o i</p><p>苦（にが）いレモン   の匂（にお）い</p><p>苦涩柠檬的香气</p><p>a me ga &emsp; hu ri ya mu ma de wa &emsp; ka e~re na i</p><p>雨（あめ）が &emsp; 降（ふ）り止（や）むまでは &emsp; 帰（かえ）れない</p><p>在雨过天晴前都无法归去</p><p>ki ri wa ke ta &emsp; ka ji tsu &emsp; no ka &emsp; <u>ta ho <span style="color: grey;">u</span></u> &emsp; no <span style="color: red;"> <u>yo u</u> </span> ni</p><p>切（き）り分（わ）け &emsp; た果実（かじつ）の片方（かたほう）</p><p>の様（よう）に</p><p>如同被切开的半个柠檬一般</p><p>i ma de mo &emsp; a na ta wa &emsp; wa ta &emsp; shi no~hi ka~ri</p><p>今（いま）でも &emsp; あなたはわたしの光（ひかり）</p><p>时至今日 你仍是我的光芒</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;【歌词及罗马音发音】《Lemon》 - 米津玄师&lt;/p&gt;
&lt;p&gt;填词：米津玄师&lt;/p&gt;
&lt;p&gt;谱曲：米津玄师&lt;/p&gt;
&lt;p&gt;编曲：米津玄师&lt;/p&gt;
&lt;p&gt;歌曲原唱：米津玄师&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://image.lansganbs.cn/f0199c</summary>
      
    
    
    
    
    <category term="歌曲" scheme="https://www.lansganbs.cn/tags/%E6%AD%8C%E6%9B%B2/"/>
    
  </entry>
  
  <entry>
    <title>葬送的芙莉莲ED《Anytime Anywhere》歌词及罗马音发音</title>
    <link href="https://www.lansganbs.cn/posts/1c6371d0.html"/>
    <id>https://www.lansganbs.cn/posts/1c6371d0.html</id>
    <published>2025-05-19T13:07:22.000Z</published>
    <updated>2025-07-02T11:40:03.113Z</updated>
    
    <content type="html"><![CDATA[<p>【歌词及罗马音发音】葬送的芙莉莲 ED 主题曲 - 「Anytime Anywhere」 / milet</p><p>填词：milet</p><p>谱曲：milet、中村泰辅、野村阳一郎</p><p>编曲：Evan Call</p><p>歌曲原唱：milet</p><p><img src="https://image.lansganbs.cn/28ae26dfbc7d14e6538d7de2aeb1fb15.png" alt=""></p><p><a href="https://music.apple.com/cn/album/anytime-anywhere/1708333821?i=1708333825">Anytime Anywhere</a></p><hr><p>And you alright</p><p>过得还好吗</p><p>Can you hear me</p><p>能看见我的声音吗</p><p>誰(だれ)もいない線路沿(せんろぞ)いをなぞってく</p><p>da re <u>mo~i</u> na i se <span style="color: red;">n</span> ro <u>zo~i</u> wo na zo~tte ku</p><p>沿着空无一人的轨道缓缓前行</p><p>大袈裟(おおげさ)に泣(な)いて</p><p><u>o o</u> ge sa ni na i te</p><p>希望你能痛快地哭泣</p><p>笑(わら)ってほしくて</p><p>wa ra &emsp; tte ho shi <span style="opacity: 0.5;">ku</span> te</p><p>能肆意的欢笑</p><p>鮮明(せんめい)でいたい思(おも)い出(で)を抱(だ)きしめてる</p><p><u>se n</u> <u>me e</u> <u>de i</u> <u>ta i</u> <u>o mo</u>~i <u>de wo</u>~da ki shi me~te~ru</p><p>我希望那些回忆能够永不褪色</p><p>さよならよりずっと大切(たいせつ)な</p><p>sa yo na ra yo ri zu tto <u>ta i se tsu na</u></p><p>比起那句再见</p><p>言葉(ことば)で伝(つた)えたいんだ</p><p>ko~to ba de <u>tsu ta</u> e ta i n da</p><p>我有更重要的话要传达与你</p><p>あり触(ふ)れて でも特別(とくべつ)で</p><p>a ri fu &emsp; re te &emsp; <u>de mo to ku be</u> &emsp; tsu de</p><p>如此平凡 却又如此特别</p><p>ほら この目(め)じゃなければ</p><p>ho ra &emsp; ko no me jya &emsp; na ke re ba</p><p>看啊 如果不是这双眼</p><p>見(み)えなかったものが</p><p>mi e na ka tta~mo no ga</p><p>那些看不见的事物…</p><p>どうして？溢(あふ)れてく</p><p>do o shi te &emsp; a fu re te ku</p><p>为什么喷涌而出？</p><p>だから</p><p>da ka ra</p><p>所以</p><p>もう一度(いちど) 生(う)まれ変(か)わろうとも</p><p>mo o i chi do &emsp; <span style="opacity: 0.5;">u</span> ma re <span style="opacity: 0.5;">ka</span> wa ro~o to mo</p><p>即使再一次转世</p><p>また 私(わたし)はここを選(えら)ぶんだろう</p><p><span style="color: red;">ma</span> ta &emsp; wa ta shi wa &emsp; ko ko wo &emsp; <u><span style="opacity: 0.5;">e</span> ra</u> bu~<span style="opacity: 0.5;">n</span> da ro o</p><p>我一定会再次选择此处吧</p><p>だから</p><p>da <span style="color: red;">ka</span> ra</p><p>所以</p><p>あなたと また巡(めぐ)り逢(あ)ったら</p><p>a na <u>ta to</u> &emsp; <u>ma ta me</u> &emsp; gu ri~<span style="color: red;">a</span> tta ra</p><p>兜兜转转与你再相逢的话</p><p>もう離(はな)さない 今(いま)を選(えら)ぶんだろう</p><p>mo o ha na sa <u>na i</u> &emsp; <u>i ma wo e ra</u> bu~<span style="opacity: 0.5;">n</span> da ro o</p><p>我一定会抓住现在不会放手吧</p><p>約束(やくそく)なんてなくても</p><p><u>ya ku so</u>~ku na n te na ku te mo</p><p>即使未曾有过任何约定</p><p>孤独(こどく)に迷(まよ)う日(ひ)でも</p><p><u>ko do ku ni</u> ma yo~u hi bi de mo</p><p>即便每日孤独迷茫</p><p>その涙(なみだ)だって大丈夫(だいじょうぶ)</p><p><u>so no</u> na mi da da tte da i jyo o <span style="opacity: 0.5;">bu</span></p><p>泪水挂于脸庞也无妨</p><p>きっと夜(よ)が明(あ)けるよ</p><p>ki tto &emsp; <u>yo ga a</u> ke ru yo</p><p>毕竟长夜终将破晓</p><p>And I&#39;m alright (I&#39;ll be alright)</p><p>我一切安好（我会安然无恙）</p><p>Yeah I hear you (I care about you)</p><p>我听见你的声音（我依旧牵挂着你）</p><p>伸(の)びた髪(かみ)を風(かぜ)がからかってる</p><p>no bi ta~<u>ka mi</u>~wo ka~ze ga~ka <u>ra ka</u>~tte ru</p><p>徐徐微风吹拂长发</p><p>全部意味(ぜんぶいみ)があるよ</p><p>ze n bu <u>i mi ga a ru yo</u></p><p>所有一切都是有意义的</p><p>立ち止(ど)ま<span style="color: red;">っ</span>た日々(ひび)も</p><p><u>ta chi do</u> ma <s>tsu</s> tta hi bi mo</p><p>连同那些停滞的时光也一样</p><p>今(いま)さらわかってあなたに追(お)いついたよ</p><p><u>i ma sa ra wa</u> ka~tte <span style="opacity: 0.5;">a</span> na~<u>ta ni</u> &emsp; o <span style="color: red;">i tsu i</span>~ta yo</p><p>直到现在我才想要追逐你的身影</p><p>ほら この目(め)じゃなければ</p><p>ho ra &emsp; ko no me jya &emsp; na ke re ba</p><p>看啊 如果不是这双眼</p><p>見(み)えなかったものが</p><p>mi~e na ka tta~mo <u>no ga</u></p><p>那些看不到的东西…</p><p>どうして？溢(あふ)れてく</p><p>do o shi te &emsp; a fu re te ku</p><p>为什么喷涌而出？</p><p>だから</p><p>da ka ra</p><p>所以</p><p>もう一度(いちど) 生(う)まれ変(か)わろうとも</p><p>mo o i chi do &emsp; <span style="opacity: 0.5;">u</span> ma re <span style="opacity: 0.5;">ka</span> wa ro~o to mo</p><p>即使再一次转世</p><p>また 私(わたし)はここを選(えら)ぶんだろう</p><p><span style="color: red;">ma</span> ta &emsp; wa ta shi wa &emsp; ko ko wo &emsp; <u>e ra</u> bu~<span style="opacity: 0.5;">n</span> da ro o</p><p>我一定会再次选择此处吧</p><p>だから</p><p>da <span style="color: red;">ka</span> ra</p><p>所以</p><p>あなたと また巡(めぐ)り逢(あ)ったら</p><p>a na <u>ta to</u> &emsp; <u>ma ta me</u> &emsp; gu ri~<span style="color: red;">a</span> tta ra</p><p>兜兜转转与你再相逢的话</p><p>もう離(はな)さない 今(いま)を選(えら)ぶんだろう</p><p>mo o ha na sa <u>na i</u> &emsp; <u>i ma wo e ra</u> bu~<span style="opacity: 0.5;">n</span> da ro o</p><p>我一定会抓住现在不会放手吧</p><p>（Anytime anywhere yah）  どこにいでも</p><p>do ko ni i~de mo</p><p>纵使在回忆中</p><p>（Anytime anywhere）      笑(わら)ってみせて</p><p>wa ra~<u>tte mi se</u>~te</p><p>也请对我微笑</p><p>（I&#39;ll be there）             目(め)を閉(と)じれば いつも</p><p><u>me <span style="color: red;">wo</span></u> to ji re~ba &emsp; i~<u>tsu mo</u></p><p>闭上双眼 无论何时</p><p>（Anytime anywhere yah）   歩(ある)き出(だ)した</p><p><u>a ru</u> <span style="color: red;">ki</span> da shi ta</p><p>都要迈出这一步</p><p>（Anytime anywhere）       私(わたし)を見(み)てて</p><p>wa ta shi wo mi te~te</p><p>请看好我吧</p><p>せめて 会(あ)いたいよ</p><p><span style="color: red;">se</span> me te &emsp; a i ta i yo</p><p>至少还想见你一面</p><p>なんて言(い)わないから</p><p>na n de <u>i wa</u>~na i ka ra</p><p>当然我不会说出口的</p><p>ねえ 今日(きょう)だけは</p><p>ne e &emsp; kyo~o da~<u>ke wa</u></p><p>呐 仅仅今天</p><p>思(おも)い出(だ)していいかな</p><p>o mo i <u>da shi te</u> <u>i i</u> ka na</p><p>能让我想起你吗</p><p>だから</p><p>da <span style="color: red;">ka</span> ra</p><p>所以</p><p>あなたと また巡(めぐ)り逢(あ)ったら</p><p>a na <u>ta to</u> &emsp; <u>ma ta me</u> &emsp; gu ri~<span style="color: red;">a</span> tta ra</p><p>兜兜转转与你再相逢的话</p><p>もう迷(まよ)わない今(いま)を選(えら)ぶんだろう</p><p>mo o~<u>ma yo</u> wa na i i <u>ma wo</u> <u>e ra</u> bu~<span style="opacity: 0.5;">n</span> da ro o</p><p>我一定会毫不犹豫的选择现在吧</p><p>約束(やくそく)なんてなくても</p><p>ya ku so ku na n te na <u>ku te</u> mo</p><p>即使未曾有过任何约定</p><p>孤独(こどく)に迷(まよ)う日(ひ)でも</p><p><u>ko do ku ni ma</u> yo~<span style="opacity: 0.5;">u</span> hi de mo</p><p>即便每日孤独迷茫</p><p>こんなに胸(むね)が痛(いた)いのは</p><p><u>ko n na ni mu</u> <span style="color: red;">ne</span> ga i ta i no wa</p><p>我胸口的痛楚</p><p>あなたといた証(あかし)かな</p><p><u>a na ta to i</u> <u>ta a</u> ka shi ka na</p><p>是你与我相伴过的证明吗</p><p>絶対(ぜったい)なんてなくても</p><p>ze tta i &emsp;<u>na a de i</u> na <span style="opacity: 0.5;">ku</span> de mo</p><p>即便那不是绝对的</p><p>いつでも届(とど)いてるから</p><p><u>i tsu de mo to do</u> <u>i te ru</u>~ka ra</p><p>我也切实感受到了你的心意</p><p>その涙(なみだ)だって大丈夫(だいじょうぶ)</p><p><u>so no</u> na mi da da tte da i jo o <span style="opacity: 0.5;">bu</span></p><p>泪水挂于脸庞也无妨</p><p>きっと夜(よ)が明(あ)けるよ</p><p>ki tto yo <u>ga a</u>~ke ru yo</p><p>毕竟长夜终将破晓</p><p>I&#39;m whispering our lullaby for you to come back home</p><p>我会轻声为你点亮灯火 照亮你回家的路</p><hr><p>杂谈：</p><p>《葬送的芙莉莲》作为可能是我近几年来最喜欢的动漫。显然这部作品中的反派不是魔族，而是时间，这部作品的主线也并不是芙莉莲的旅途，而是芙莉莲对于“辛美尔的爱意”的逐渐理解。这个漫画既不是像《鬼灭之刃》《咒术回战》《进击的巨人》一样的被动漫党都广为熟知的漫画，动画组MADHOUSE也并没有在近几年内作出我个人很喜欢的动漫，所以我最初并没有看好芙莉莲这部作品。</p><p>芙莉莲整部动漫的每一集都保持了最高的水准，第一季最后也完美收官。大多数人都喜欢看勇者讨伐魔王的故事，然而这部作品恰恰相反，讲述的是大家不喜欢看的勇者讨伐完魔王的故事。然而就是这种故事，让《葬送的芙莉莲》随着第28集的完美谢幕，让它成为了热度口碑双丰收的年度佳作，成为了近几年来唯一登上了<a href="https://bgm.tv/">Bangumi</a>动画分区Top100的动画。从刚开播时的“仅是满分”到结束时的“超越满分”。</p><p>动画组对于原作中寥寥无几的打斗片段，在动画中给出了完美的答卷，从仅有3也得修塔尔克屠龙，到26集芙莉莲战斗时经费的燃烧，无不体现着动漫组的用心。要知道，战斗从不是这部作品的卖点，也正是动画组对于这些部分的无私奉献，把作品带到了极高的高度。勇者不必拔出圣剑，僧侣不必严于律己，战士不必充满勇气，反套路的作品给大家也带来了眼前一亮的动画演出。辛美尔无疑是近些年来塑造最为成功的勇者，尤其是在“勇者战魔王”这个题材已经饱和的当下，如果一部作品想要脱颖而出，就必须给勇者加一些标新立异的设定，这也使得如今越来越多的勇者，也就名字跟勇者有关了，而辛美尔几乎集齐了勇者的全部优点，他的眼神清澈鉴定，待人温柔却不圣母，有勇者无所畏惧的一面，也有爱耍小脾气爱臭美的一面，他并不是被选中的最强大的勇者，却成为了击败魔王的英雄。</p><p>《葬送的芙莉莲》的片尾曲Anytime Anywhere作为我最喜欢的一首歌，每当旋律响起时，昭示着下一个七个世纪的计数开始，芙莉莲也逐渐明白长生种的痛苦。《葬送的芙莉莲》以这首宛转悠扬的歌曲作为结束，倒也算是一种不错的安慰，这首歌完全唱出了芙莉莲这部作品的精髓，无论是以新夫的视角，还是以师傅弟子的视角，通篇传达的一件事情，我们所有的一切的相遇，一切的经历，都是塑造了如今的我们无可取代的美好，“所以即使再次转世重生，我也会选择这里”。ED动画那绽放的生命力，也很好的辅佐了这种感觉。这首ED完美契合了番中辛美尔与芙莉莲跨越时间与生死的恋爱主题，悠扬的旋律与歌词中对爱的执着追求，映照出辛美尔对芙莉莲的爱意，芙莉莲作为长生种情感的迟钝以及遇见菲伦和修塔尔克之后情感的变化，成为整部作品情感升华的重要载体。就如海塔的那句话“正是你人生的那十分之一改变了你”。这首ED配得上作为十月神番的《葬送的芙莉莲》。</p><p>即使是这样的动漫，在结局的时候也难免不舍，但是伴随着ED的神插入，勇者辛美尔是这么说的：“但是 只要继续旅行 就还会有邂逅吧 流泪道别并不适合我们 因为 下次见面会很难为情的。”</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;【歌词及罗马音发音】葬送的芙莉莲 ED 主题曲 - 「Anytime Anywhere」 / milet&lt;/p&gt;
&lt;p&gt;填词：milet&lt;/p&gt;
&lt;p&gt;谱曲：milet、中村泰辅、野村阳一郎&lt;/p&gt;
&lt;p&gt;编曲：Evan Call&lt;/p&gt;
&lt;p&gt;歌曲原唱：milet&lt;/p&gt;</summary>
      
    
    
    
    
    <category term="歌曲" scheme="https://www.lansganbs.cn/tags/%E6%AD%8C%E6%9B%B2/"/>
    
  </entry>
  
  <entry>
    <title>BanG Dream! It&#39;s MyGO!!!!!插曲《春日影》平假名及罗马音发音</title>
    <link href="https://www.lansganbs.cn/posts/42dc3d9e.html"/>
    <id>https://www.lansganbs.cn/posts/42dc3d9e.html</id>
    <published>2025-05-17T12:42:42.000Z</published>
    <updated>2025-07-02T11:40:03.113Z</updated>
    
    <content type="html"><![CDATA[<p>【歌词及罗马音发音】BanG Dream! It’s MyGO!!!!!插曲 - 《春日影》 / MyGO!!!!!</p><p>填词：织田飞鸟</p><p>谱曲：藤田淳平</p><p>编曲：藤田淳平</p><p>歌曲原唱：CRYCHIC</p><p><img src="https://img.moegirl.tw/common/0/00/Haruhikage%28Crychic%29.png" alt=""></p><p><a href="https://music.apple.com/cn/album/%E6%98%A5%E6%97%A5%E5%BD%B1-mygo-ver/1783644603?i=1783644617">春日影（MyGO!!!!! ver.）</a></p><hr><p>悴（かじか）んだ心（こころ） ふるえる眼差（まなざ）し世界（せかい）で</p><p><u>ka ji kan da</u> ko ko ro fu ru e <u>ru ma na</u> za shi se~<u>ka i de</u></p><p>僕（ぼく）はひとりぼっちだった &emsp; 散（ち）ることしか &emsp; 知（し）らない春（はる）は</p><p>bo ku wa <u>hi to</u>~ri bo~chi da~tta &emsp; chi ru ko to~shi ka &emsp; shi ra na i ha~ru wa</p><p>毎年（まいとし）冷（つめ）たくあしらう</p><p>ma i to~<u>shi tsu</u> me ta ku~a shi ra u</p><p>暗（くら）がりの中（なか） 一方通行（いっぽうつうこうに）ただ ただ</p><p><u>ku ra ga ri</u> no na ka i ppo o <u>tsu u</u> ko o ni ta~<u>da ta da</u></p><p>言葉（ことば）を書（か）き殴（なぐ）って</p><p>ko to ba wo ka ki na gu~tte</p><p>期待（きたい）するだけ</p><p>ki ta i su ru da ke</p><p>むなしいと分かっていても</p><p>mu na shi i to wa ka~<u>tte i te mo</u></p><p>救（すく）いを求（もと）め続（つづ）けた</p><p>su ku i <u>wo mo to me tsu zu</u>~ke ta</p><p>せつなくて いとおしい</p><p><span style="opacity: 0.5;">se tsu na ku te i to~o shi i</span></p><p>今（いま）ならば分（わ）かる気（き）がする</p><p>i ma <u>na ra ba</u> wa ka ru ki~<u>ga su ru</u></p><p>しあわせで くるおしい</p><p><span style="opacity: 0.5;">shi a wa se de ku ru o shi i</span></p><p>あの日（ひ）泣（な）けなかった &emsp; 僕（ぼく）を</p><p>a no <u>hi na ke na</u> ka~tta &emsp; bo ku wo</p><p>光（ひかり）は &emsp; やさしく連（つ）れ立（だ）つよ</p><p>hi ka ri wa &emsp; ya sa shi <u>ku tsu re</u>~<u>da tsu yo</u></p><p>雲間（くもま）をぬって &emsp; きらり きらり &emsp; 心満（こころみ）たしては溢（あふ）れ</p><p><u>ku mo ma wo nu</u>~tte &emsp; <u>ki ra ri</u> <u>ki ra ri</u> &emsp; <u>ko ko ro</u> mi ta shi te wa~<u>a fu re</u></p><p>いつしか頬（ほお）を &emsp; きらり きらり &emsp; 熱（あつ）く 熱く 濡（ぬ）らしてゆく</p><p><u>i tsu shi ka ho ho wo</u> &emsp; <u>ki ra ri</u> <u>ki ra ri</u> &emsp; <u>a tsu ku</u> <u>a tsu ku</u> nu ra~<u>shi te yu ku</u></p><p>君（きみ）の手（て）は &emsp; どうして &emsp; こんなにも &emsp; 温（あたた）かいの？</p><p><u>ki mi no</u>~te wa &emsp; do u shi te &emsp; <u>ko n</u> na ni mo &emsp; <u>a ta ta</u>~ka i no ?</p><p>ねえ お願（ねが）い &emsp; どうかこのまま</p><p><u>ne e</u> o ne ga i &emsp; do o ka ko no ma ma~</p><p>離（はな）さないでいて</p><p>ha na sa na i <u>de i te</u></p><p>縁（えん）を結（むす）んでは &emsp; ほどきほどかれ誰（だれ）しもが</p><p>e n wo mu su n de wa &emsp; ho do <u>ki ho</u> do ka re da~<u>re shi mo ga</u></p><p>それを喜（よろこ）び &emsp; 悲（かな）しみながら &emsp; 愛（あい）を数（かぞ）えてゆく</p><p>so re wo yo~ro ko~bi <u>ka na shi</u> &emsp; mi na ga ra a i wo &emsp; ka zo e te~yu ku</p><p>鼓動（こどう）を &emsp; 確（たし）かめるように</p><p>ko do o wo &emsp; ta shi ka me~ru yo~o ni</p><p>うれしくてさびしくて</p><p><span style="opacity: 0.5;">u re shi ku te sa bi shi ku te</span></p><p>今（いま）だからわかる気（き）がした</p><p>i ma <u>da ka ra</u> wa ka ru ki~<u>ga shi ta</u></p><p>たいせつでこわくって</p><p><span style="opacity: 0.5;">ta i se tsu de ko wa ku~tte</span></p><p>あの日（ひ）泣（な）けなかった僕（ぼく）を</p><p>a no <u>hi na ke na ka</u>~tta bo ku wo</p><p>光（ひかり）は &emsp; やさしく抱（だ）きしめた</p><p>hi ka ri wa &emsp; ya sa shi <u>ku da ki</u>~shi me ta</p><hr><p>照（て）らされた世界（せかい）</p><p>te ra sa re ta se ka i</p><p>咲（さ）き誇（ほこ）る大切（たいせつ）な人（ひと）</p><p>sa ki ho ko ru ta i se <u>tsu na</u> hi to</p><p>あたたかさを知（し）った &emsp; </p><p>a ta ta ka sa wo shi tta &emsp;</p><p>春（はる）は 僕（ぼく）のため 君（きみ）のための &emsp; 涙（なみだ）を流（なが）すよ</p><p>ha ru wa bo ku no ta me &emsp; ki mi no ta me no &emsp; <u>na mi da</u> wo <u>na ga</u> su yo</p><p>あぁ なんて眩（まぶ）しいんだろう</p><p>a a &emsp; na n te &emsp; <u>ma bu shi</u> <u>i n</u> da ro o</p><p>あぁ なんて美（うつく）しいんだろう</p><p>a a &emsp; na n te &emsp; <u>u tsu ku shi</u> <u>i n</u> da ro o …</p><p>雲間（くもま）をぬって &emsp; きらり きらり &emsp; 心満（こころみ）たしては溢（あふ）れ</p><p><u>ku mo ma wo nu</u>~tte &emsp; <u>ki ra ri</u> <u>ki ra ri</u> &emsp; <u>ko ko ro</u> mi ta shi te wa~<u>a fu re</u></p><p>いつしか頬（ほお）を &emsp; きらり きらり &emsp; 熱（あつ）く 熱く 濡（ぬ）らしてゆく</p><p><u>i tsu shi ka ho ho wo</u> &emsp; <u>ki ra ri</u> <u>ki ra ri</u> &emsp; <u>a tsu ku</u> <u>a tsu ku</u> nu ra~<u>shi te yu ku</u></p><p>君（きみ）の手（て）は &emsp; どうして &emsp; こんなにも 温（あたた）かいの？</p><p><u>ki mi no</u>~te wa &emsp; do u shi te &emsp; <u>ko n</u> na ni mo &emsp; <u>a ta ta</u>~ka i no ?</p><p>ねえ お願（ねが）い &emsp; どうかこのまま</p><p><u>ne e</u> on e gai &emsp; do o ka ko no ma ma~</p><p>離（はな）さないでいて</p><p>ha na sa na i <u>de i te</u></p><p>ずっと ずっと</p><p>zu tto zu~tto</p><p>離（はな）さないでいて</p><p>ha na sa na i <u>de i te</u></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;【歌词及罗马音发音】BanG Dream! It’s MyGO!!!!!插曲 - 《春日影》 / MyGO!!!!!&lt;/p&gt;
&lt;p&gt;填词：织田飞鸟&lt;/p&gt;
&lt;p&gt;谱曲：藤田淳平&lt;/p&gt;
&lt;p&gt;编曲：藤田淳平&lt;/p&gt;
&lt;p&gt;歌曲原唱：CRYCHIC&lt;/p&gt;
&lt;p&gt;&lt;img s</summary>
      
    
    
    
    
    <category term="歌曲" scheme="https://www.lansganbs.cn/tags/%E6%AD%8C%E6%9B%B2/"/>
    
  </entry>
  
  <entry>
    <title>Bitset Hash Pbds</title>
    <link href="https://www.lansganbs.cn/posts/fdad289b.html"/>
    <id>https://www.lansganbs.cn/posts/fdad289b.html</id>
    <published>2025-03-30T18:16:16.000Z</published>
    <updated>2025-07-02T11:40:03.112Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Bitset"><a href="#Bitset" class="headerlink" title="Bitset"></a>Bitset</h1><p>类模板 <code>bitset</code> 表示一个 $N$ 位的固定大小序列。可以用标准逻辑运算符操作 <code>bitset</code>，并将它与字符串和整数相互转换。对于字符串表示和移位操作的列举方向来说，这个序列被当做最低索引元素位于右侧，类似于整数的二进制表示。</p><p>$bitset$ 满足可复制构造 ($CopyConstructible$) 及可复制赋值 ($CopyAssignable$) 的要求。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt; std::<span class="type">size_t</span> N &gt; <span class="keyword">class</span> <span class="title class_">bitset</span>;</span><br></pre></td></tr></table></figure><h2 id="模板形参"><a href="#模板形参" class="headerlink" title="模板形参"></a>模板形参</h2><p>$N$    - 要为 $bitset$ 分配存储的位数</p><p>eg: <code>bitset&lt;N&gt; ac</code>; 声明一个大小为$N$的<code>bitset</code>，名称为$ac$</p><ul><li><code>std::bitset</code> 的全部成员函数均为 $constexpr$：在常量表达式求值中创建并使用 <code>std::bitset</code> 对象是可能的。(C++23 起) 所以不要试图使用这种方式!!!</li></ul><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><ol><li><code>count()</code> 返回 $1$ 的个数，时间复杂度为 $O(\frac{n}{w})$，其中 $w$ 为机器字长，一般为 $64$ 位，评测机一般为 $32$ 位；有一类似操作<code>__builtin_popcount(val)/__builtin_popcountll(val)</code>，时间复杂度相同（应该是）。</li><li><code>operator&lt;&lt;=</code> <code>operator&gt;&gt;=</code> <code>operator&lt;&lt;</code> <code>operator&gt;&gt;</code> 进行二进制左移和右移</li><li><code>operator=</code>  赋值</li><li><code>operator[]</code> 访问指定的位</li><li><code>operator&amp;=</code> <code>operator|=</code> <code>operator^=</code> <code>operator~</code> 进行二进制与、或、异或及非</li></ol><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>若某个位集合在编译时大小未知，或者必须在运行时改变其大小，则可代之以使用 <code>std::vector&lt;bool&gt;</code> 或 <code>boost::dynamic_bitset</code> 之类的动态类型。</p><div class="table-container"><table><thead><tr><th>功能特性测试宏</th><th>值</th><th>标准</th><th>功能特性</th></tr></thead><tbody><tr><td>__cpp_lib_constexpr_bitset</td><td>202207L</td><td>(C++23)</td><td>使 std::bitset 更 constexpr</td></tr><tr><td>__cpp_lib_bitset</td><td>202306L</td><td>(C++26)</td><td>std::bitset 的 std::string_view 接口</td></tr><tr><td></td></tr></tbody></table></div><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">typedef</span> std::<span class="type">size_t</span> <span class="type">length_t</span>, <span class="type">position_t</span>; <span class="comment">// 提示</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 构造函数：</span></span><br><span class="line">    <span class="keyword">constexpr</span> std::bitset&lt;4&gt; b1;</span><br><span class="line">    <span class="keyword">constexpr</span> std::bitset&lt;4&gt; b2&#123;<span class="number">0xA</span>&#125;; <span class="comment">// == 0B1010</span></span><br><span class="line">    std::bitset&lt;4&gt; b3&#123;<span class="string">&quot;0011&quot;</span>&#125;; <span class="comment">// C++23 起也可以为 constexpr</span></span><br><span class="line">    std::bitset&lt;8&gt; b4&#123;<span class="string">&quot;ABBA&quot;</span>, <span class="built_in">length_t</span>(<span class="number">4</span>), <span class="comment">/*0:*/</span><span class="string">&#x27;A&#x27;</span>, <span class="comment">/*1:*/</span><span class="string">&#x27;B&#x27;</span>&#125;; <span class="comment">// == 0B0000&#x27;0110</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 能打印出 bitset 到流：</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;b1:&quot;</span> &lt;&lt; b1 &lt;&lt; <span class="string">&quot;; b2:&quot;</span> &lt;&lt; b2 &lt;&lt; <span class="string">&quot;; b3:&quot;</span> &lt;&lt; b3 &lt;&lt; <span class="string">&quot;; b4:&quot;</span> &lt;&lt; b4 &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// bitset 支持逐位运算：</span></span><br><span class="line">    b3 |= <span class="number">0b0100</span>; <span class="built_in">assert</span>(b3 == <span class="number">0b0111</span>);</span><br><span class="line">    b3 &amp;= <span class="number">0b0011</span>; <span class="built_in">assert</span>(b3 == <span class="number">0b0011</span>);</span><br><span class="line">    b3 ^= std::bitset&lt;<span class="number">4</span>&gt;&#123;<span class="number">0b1100</span>&#125;; <span class="built_in">assert</span>(b3 == <span class="number">0b1111</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 整个集合上的操作：</span></span><br><span class="line">    b<span class="number">3.</span><span class="built_in">reset</span>(); <span class="built_in">assert</span>(b3 == <span class="number">0</span>);</span><br><span class="line">    b<span class="number">3.</span><span class="built_in">set</span>(); <span class="built_in">assert</span>(b3 == <span class="number">0b1111</span>);</span><br><span class="line">    <span class="built_in">assert</span>(b<span class="number">3.</span><span class="built_in">all</span>() &amp;&amp; b<span class="number">3.</span><span class="built_in">any</span>() &amp;&amp; !b<span class="number">3.</span><span class="built_in">none</span>());</span><br><span class="line">    b<span class="number">3.f</span>lip(); <span class="built_in">assert</span>(b3 == <span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 单独位上的操作：</span></span><br><span class="line">    b<span class="number">3.</span><span class="built_in">set</span>(<span class="built_in">position_t</span>(<span class="number">1</span>), <span class="literal">true</span>); <span class="built_in">assert</span>(b3 == <span class="number">0b0010</span>);</span><br><span class="line">    b<span class="number">3.</span><span class="built_in">set</span>(<span class="built_in">position_t</span>(<span class="number">1</span>), <span class="literal">false</span>); <span class="built_in">assert</span>(b3 == <span class="number">0</span>);</span><br><span class="line">    b<span class="number">3.f</span>lip(<span class="built_in">position_t</span>(<span class="number">2</span>)); <span class="built_in">assert</span>(b3 == <span class="number">0b0100</span>);</span><br><span class="line">    b<span class="number">3.</span><span class="built_in">reset</span>(<span class="built_in">position_t</span>(<span class="number">2</span>)); <span class="built_in">assert</span>(b3 == <span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 支持下标 operator[]：</span></span><br><span class="line">    b3[<span class="number">2</span>] = <span class="literal">true</span>; <span class="built_in">assert</span>(<span class="literal">true</span> == b3[<span class="number">2</span>]);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 其他操作：</span></span><br><span class="line">    <span class="built_in">assert</span>(b<span class="number">3.</span><span class="built_in">count</span>() == <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">assert</span>(b<span class="number">3.</span><span class="built_in">size</span>() == <span class="number">4</span>);</span><br><span class="line">    <span class="built_in">assert</span>(b<span class="number">3.</span><span class="built_in">to_ullong</span>() == <span class="number">0b0100ULL</span>);</span><br><span class="line">    <span class="built_in">assert</span>(b<span class="number">3.</span><span class="built_in">to_string</span>() == <span class="string">&quot;0100&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b1:0000; b2:1010; b3:0011; b4:00000110</span><br></pre></td></tr></table></figure></p><h1 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h1><h2 id="普通哈希的优化"><a href="#普通哈希的优化" class="headerlink" title="普通哈希的优化"></a>普通哈希的优化</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> tp1,<span class="keyword">typename</span> tp2,<span class="type">int</span> N&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Htb</span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> M=<span class="number">1e7</span><span class="number">+19</span>;</span><br><span class="line">    <span class="type">int</span> hd[M<span class="number">+3</span>],to[N],ct;</span><br><span class="line">    tp1 ed[N];tp2 w[N];</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">hc</span><span class="params">(ul v)</span></span>&#123;</span><br><span class="line">        v^=v&lt;&lt;<span class="number">13</span>,v^=v&gt;&gt;<span class="number">7</span>;</span><br><span class="line">        <span class="keyword">return</span> (v^(v&lt;&lt;<span class="number">17</span>))%M;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ins</span><span class="params">(tp1 x,tp2 y)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> &amp;p=hd[<span class="built_in">hc</span>(x)];</span><br><span class="line">        ed[++ct]=x,to[ct]=p;</span><br><span class="line">        w[p=ct]=y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">count</span><span class="params">(tp1 x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=hd[<span class="built_in">hc</span>(x)];i;i=to[i])</span><br><span class="line">            <span class="keyword">if</span>(ed[i]==x)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pair&lt;tp2,<span class="type">bool</span>&gt;<span class="built_in">find</span>(tp1 x)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=hd[<span class="built_in">hc</span>(x)];i;i=to[i])</span><br><span class="line">            <span class="keyword">if</span>(ed[i]==x)<span class="keyword">return</span> <span class="built_in">mkp</span>(w[i],<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">mkp</span>(<span class="built_in">tp2</span>(),<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="keyword">operator</span>[](tp1 x)&#123;</span><br><span class="line">        <span class="type">int</span> &amp;p=hd[<span class="built_in">hc</span>(x)];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=p;i;i=to[i])</span><br><span class="line">            <span class="keyword">if</span>(ed[i]==x)<span class="keyword">return</span> i;</span><br><span class="line">        ed[++ct]=x,to[ct]=p;</span><br><span class="line">        <span class="keyword">return</span> p=ct;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;<span class="keyword">while</span>(ct)hd[<span class="built_in">hc</span>(ed[ct--])]=<span class="number">0</span>;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这种多维哈希相对于普通哈希的优点：</p><ol><li>内存局部性更好，有助于缓存友好。</li><li>$clear$ 操作可以非常高效，只需遍历已有的节点更新 $hd$ 数组</li><li>代码中手动维护链表，便于对冲突处理和自定义哈希函数调优</li></ol><p>使用方法：</p><ol><li><code>struct hc</code>: $xorshift$ 随机映射，把一个ul类型随机映射到$0$ ~ $M-1$中的一个随机数</li><li><code>struct ins</code>类似邻接表插入</li><li><code>count</code>是否找到</li><li><code>pair&lt;tp2,bool&gt;</code> 第一位查询得到的值，bool是否找到了</li><li><code>operator[]</code> 用于寻找第一维的标号，未找到则创建一个</li></ol><p>缺点:</p><ol><li>由于是 $xorshift$，在 $cf$ 上写依然会被叉</li><li>第一维不能传 $string$，可以另写<code>static ul hc(string s) &#123;&#125;</code></li></ol><h2 id="Hash的再优化"><a href="#Hash的再优化" class="headerlink" title="Hash的再优化"></a>Hash的再优化</h2><p>为了解决上述 $Hash$ 的缺点，我们可以引入随机 $Hash$，同时引入 $Pbds$ 库中封装好的<code>gp_hash_table</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">myhash</span> &#123;</span><br><span class="line">  <span class="function"><span class="type">static</span> <span class="type">uint64_t</span> <span class="title">hash</span><span class="params">(<span class="type">uint64_t</span> x)</span> </span>&#123;</span><br><span class="line">    x += <span class="number">0x9e3779b97f4a7c15</span>;</span><br><span class="line">    x = (x ^ (x &gt;&gt; <span class="number">30</span>)) * <span class="number">0xbf58476d1ce4e5b9</span>;</span><br><span class="line">    x = (x ^ (x &gt;&gt; <span class="number">27</span>)) * <span class="number">0x94d049bb133111eb</span>;</span><br><span class="line">    <span class="keyword">return</span> x ^ (x &gt;&gt; <span class="number">31</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="type">size_t</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">uint64_t</span> x)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">uint64_t</span> SEED =</span><br><span class="line">        chrono::steady_clock::<span class="built_in">now</span>().<span class="built_in">time_since_epoch</span>().<span class="built_in">count</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">hash</span>(x + SEED);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="type">size_t</span> <span class="title">operator</span><span class="params">()</span><span class="params">(pair&lt;<span class="type">uint64_t</span>, <span class="type">uint64_t</span>&gt; x)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">uint64_t</span> SEED =</span><br><span class="line">        chrono::steady_clock::<span class="built_in">now</span>().<span class="built_in">time_since_epoch</span>().<span class="built_in">count</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">hash</span>(x.first + SEED) ^ (<span class="built_in">hash</span>(x.second + SEED) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">uint64_t</span> <span class="title">string_hash</span><span class="params">(<span class="type">const</span> string &amp;s)</span> </span>&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">uint64_t</span> BASE = <span class="number">131</span>;</span><br><span class="line">  <span class="type">uint64_t</span> h = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">char</span> c : s) &#123;</span><br><span class="line">    h = h * BASE + c;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mymap __gnu_pbds::gp_hash_table</span></span><br></pre></td></tr></table></figure><h3 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h3><p><code>mymap&lt;int, int, myhash&gt; dic;</code></p><p><code>mymap&lt;int, null_type, myhash&gt; dic;</code></p><p><code>unordered_map&lt;int, int, myhash&gt; dic;</code></p><p>第二维表示存或者不存，若为<code>null_type</code>则不关心是否存值。</p><h1 id="Pbds"><a href="#Pbds" class="headerlink" title="Pbds"></a>Pbds</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>什么是<code>__gnu_pbds</code>?$Policy$ $based$ $data$ $structures$！简称<del>平板电视</del> $pbds$。在使用$pbds$前，你需要：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ext/pb_ds/tree_policy.hpp&gt;</span><span class="comment">//用tree</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ext/pb_ds/hash_policy.hpp&gt;</span><span class="comment">//用hash</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ext/pb_ds/trie_policy.hpp&gt;</span><span class="comment">//用trie</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ext/pb_ds/priority_queue.hpp&gt;</span><span class="comment">//用priority_queue</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br></pre></td></tr></table></figure><p>这么长？没事，有更简单的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/extc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br></pre></td></tr></table></figure><p>$Pbds$中的所有内容均不在头文件<code>#include &lt;bits/stdc++.h&gt;</code>中，也不再 $std$ 命名空间中。</p><h3 id="pbds-hash"><a href="#pbds-hash" class="headerlink" title="pbds::hash"></a>pbds::hash</h3><p>上面已经介绍过。</p><p><a href="https://www.luogu.com.cn/problem/P1333">P1333 瑞瑞的木棍</a></p><p>该题使用$Pbds$中自带的$Hash$，时间复杂度仅为$O(n)$。</p><h3 id="tree"><a href="#tree" class="headerlink" title="tree"></a>tree</h3><p>平衡树：使得集中的元素始终保持有序，并且支持快速插入和删除某个数，和快速索引排名为 $x$ 的数，作增删改查操作。</p><p>显然，$set$ 无法实现快速索引某个数的排名和快速索引第 $k$ 位数。</p><p>通俗且不严谨的说，$set$ 不像数组一样拥有“下标”，而 $pbds$ 库中的平衡树既有 $set$ 的功能，也有数组的下标。</p><h4 id="平衡树的tag"><a href="#平衡树的tag" class="headerlink" title="平衡树的tag"></a>平衡树的tag</h4><ol><li><code>rb_tree_tag</code>：红黑树</li><li><code>splay_tree_tag</code>：伸展树</li><li><code>ov_tree_tag</code>：有序向量树（不建议使用）</li></ol><p>一般推荐使用rb_tree_tag</p><h4 id="定义方式"><a href="#定义方式" class="headerlink" title="定义方式"></a>定义方式</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tree&lt;<span class="type">int</span>, null_type, less&lt;<span class="type">int</span>&gt;, rb_tree_tag, tree_order_statistics_node_update&gt; tr;</span><br></pre></td></tr></table></figure><h4 id="重要函数"><a href="#重要函数" class="headerlink" title="重要函数"></a>重要函数</h4><ol><li><code>tr.find_by_order(k)</code> 返回下标为 $k$ 的对象的指针</li><li><code>tr.order_of_key(val)</code> 返回小于等于 $val$ 的对象的个数</li><li><code>tr.lower(upper)_bound(val)</code> 返回大于等于（大于）$val$ 的数的对象的指针</li><li><code>tr.insert(val)</code> 向 $tr$ 中插入 $val$</li><li><code>A.join(B)</code> 将 $B$ 整个并入$A$</li><li><code>tr.size</code> 查询 $tr$ 的大小</li><li><code>tr.erase(tr.lower_bound(val))</code> 删除 $tr$ 中大于等于 $val$ 的值</li><li><code>tr.erase(val)</code> 删除 $tr$ 中值为 $val$ 的元素</li></ol><h4 id="创建multiset"><a href="#创建multiset" class="headerlink" title="创建multiset"></a>创建multiset</h4><p>一般来说有如下两种方法：</p><ol><li>插入时左移 $20$ 位，并加上一个独一无二的值，删除时右移 $20$ 位取出</li><li>在创建时，将 <code>less&lt;int&gt;</code> 改为 <code>less_equal&lt;int&gt;</code> 方便但非常不推荐!!!</li></ol><h3 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h3><h4 id="堆的tag"><a href="#堆的tag" class="headerlink" title="堆的tag"></a>堆的tag</h4><ol><li><code>pairing_heap_tag</code>：使用配对堆（$Pairing Heap$）实现。配对堆是一种具有良好理论性能和实际性能的堆结构，通常在实践中表现优异。</li><li><code>binary_heap_tag</code>：使用二叉堆（$Binary Heap$）实现。二叉堆是一种经典的堆结构，通常用于实现优先队列。</li><li><code>binomial_heap_tag</code>：使用二项堆（$Binomial Heap$）实现。二项堆是一种支持高效合并操作的堆结构。</li><li><code>rc_binomial_heap_tag</code>：使用放宽的二项堆（$Relaxed Binomial Heap$）实现。这种堆结构在二项堆的基础上进行了优化，以提高某些操作的性能。</li><li><code>thin_heap_tag</code>：使用瘦堆（$Thin Heap$）实现。瘦堆是一种专门为$Dijkstra$算法设计的堆结构，适用于图算法中的优先队列。</li></ol><p>一般推荐使用<code>pairing_heap_tag</code></p><h4 id="定义方式-1"><a href="#定义方式-1" class="headerlink" title="定义方式"></a>定义方式</h4><p><code>priority_queue&lt;int, less&lt;int&gt;, pairing_heap_tag&gt; q1, q2;</code></p><h4 id="重要函数-1"><a href="#重要函数-1" class="headerlink" title="重要函数"></a>重要函数</h4><ol><li><code>q1.push(val)</code></li><li><code>a1.size()</code></li><li><code>q1.pop()</code></li><li><code>q1.join(q2);</code></li><li><code>q1.empty();</code></li></ol><h4 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h4><p>使用$Pbds$库中的<code>priority_queue</code>时，由于和 $std$ 库中的<code>priority_queue</code>重名，会报错，应当主动声明命名空间。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Bitset&quot;&gt;&lt;a href=&quot;#Bitset&quot; class=&quot;headerlink&quot; title=&quot;Bitset&quot;&gt;&lt;/a&gt;Bitset&lt;/h1&gt;&lt;p&gt;类模板 &lt;code&gt;bitset&lt;/code&gt; 表示一个 $N$ 位的固定大小序列。可以用标准逻辑运算符操作</summary>
      
    
    
    
    
    <category term="XCPC" scheme="https://www.lansganbs.cn/tags/XCPC/"/>
    
  </entry>
  
  <entry>
    <title>单调栈&amp;单调队列</title>
    <link href="https://www.lansganbs.cn/posts/e9186a1f.html"/>
    <id>https://www.lansganbs.cn/posts/e9186a1f.html</id>
    <published>2025-01-04T12:50:01.000Z</published>
    <updated>2025-07-02T11:40:03.113Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>单调栈，顾名思义，这个栈是单调递增/递减的。</p><ul><li>递增栈：越靠近栈顶的元素越大，如push顺序为 $1$ $2$ $3$ $4$ $5$</li><li>递减栈：越靠近栈底的元素越大，如push顺序为 $5$ $4$ $3$ $2$ $1$</li></ul><h2 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h2><p><a href="https://www.luogu.com.cn/problem/P5788">P5788 【模板】单调栈</a></p><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><p>使用栈，维护一个单调的序列，通过栈顶的最值来进行计算或转移。</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>对于每个元素，将其和栈顶-&gt;栈底的元素一次比较，不符合的元素出栈，栈顶为当前维护的栈的最值。</p><p>例如我们要维护一个降序序列，有push顺序为 $8$ $4$ $6$ $1$ $9$ $2$ $4$ $0$</p><p>那么第i步操作后栈的状态为：$8$;$8$ $4$;$8$ $6$;$8$ $6$ $1$;$9$;$9$ $2$;$9$ $4$;$9$ $4$ $0$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> top = <span class="number">0</span>; <span class="comment">// 栈顶指针初值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">  <span class="keyword">while</span> (top &gt; <span class="number">0</span> <span class="keyword">and</span> a[q[top]] &lt; a[i]) &#123;</span><br><span class="line">    cout &lt;&lt; a[q[top]] &lt;&lt; endl; <span class="comment">// 输出栈顶值</span></span><br><span class="line">    top--; <span class="comment">// 栈顶出栈</span></span><br><span class="line">  &#125;</span><br><span class="line">  q[++top] = i; <span class="comment">// 栈顶入栈</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在单调栈入栈过程中，<strong>入栈的是元素的下标，而不是元素的值</strong>。但下文为了直观，记录的是元素值，<strong>实际写题时切记要记录下标</strong>。</p><p>对于单调栈而言，记录下标不仅能获知当前元素值，还能方便获取其前后元素位置信息，这在需要回溯或计算区间问题时非常重要。此外，入栈下标后，可追踪元素更新，并在栈顶位置快速找到需要的元素，从而保持栈中数据的单调性并简化维护过程。另外，引入下标可以处理重复出现的元素，用下标作为能唯一标识一条记录的属性组。</p><p>考虑如下数组构造单调栈$ a=[1,1,4,5,1,4] $，构造递增栈只记录元素的话是$ [1,1,1,4] $，这个如果题目所求为输出第一个比当前元素小的元素，那可以找到，但是如果是第一个比当前元素大的元素的下标，那这时无法确定具体是第几个$1$比当前元素小。<strong>所以构造单调栈所记录的属性必须是下标，而不是元素值</strong>。</p><p>另外，在构造单调栈时，循环条件为<code>while (top &gt; 0 and a[q[top]] &lt; a[i])</code>，而不是<code>while (top &gt; 0 and a[q[top]] &lt;= a[i])</code>，<strong>循环条件是严格小于（或等于），相同元素必须全部记录，而不是当前元素小于等于栈顶元素就弹出栈顶元素</strong>。</p><p>考虑如下数组构造单调栈$ a=[1,2,2,2,2,2] $，正确构造递增栈为$ a=[1,2,2,2,2,2] $，可以找出第一个大于数组下标 $1$ 的元素下标为 $2$（数组从1开始）；但是如果错误记录，元素和栈顶相等的话，那构造出来时$ a=[1,2] $，这个 $2$ 是最后一个$2$，下标为 $6$ ，但事实上第一个大于下标 $1$ 的元素下标为 $2$ ，是第一个 $2$ ，而不是第五个 $2$ 。</p><details class="folding-tag" ><summary> 查看代码 </summary>              <div class='content'>              <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;bits/extc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// using namespace __gnu_pbds;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ture true</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> flase false</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pow power</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) begin(x), end(x)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gcd(a, b) gcdint(a, b)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lcm(a, b) (a / gcd(a, b) * b)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(x) (int)x.size()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EPS 1e-7</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> i64 long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> i128 __int128</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> tcT template &lt;class T</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> tcTU tcT, class U</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">unsyncIO</span><span class="params">()</span> </span>&#123; cin.<span class="built_in">tie</span>(<span class="number">0</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setPrec</span><span class="params">()</span> </span>&#123; cout &lt;&lt; fixed &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">15</span>); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setIO</span><span class="params">()</span> </span>&#123; <span class="built_in">unsyncIO</span>(), <span class="built_in">setPrec</span>(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">gcdint</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> b ? <span class="built_in">gcdint</span>(b, a % b) : a; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> i128 <span class="title">gcd128</span><span class="params">(i128 a, i128 b)</span> </span>&#123; <span class="keyword">return</span> b ? <span class="built_in">gcd128</span>(b, a % b) : a; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">cdiv</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a / b + ((a ^ b) &gt; <span class="number">0</span> &amp;&amp; a % b); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">fdiv</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a / b - ((a ^ b) &lt; <span class="number">0</span> &amp;&amp; a % b); &#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; <span class="keyword">using</span> V = vector&lt;T&gt;;</span><br><span class="line">tcTU &gt; <span class="keyword">using</span> PR = pair&lt;T, U&gt;;</span><br><span class="line">tcTU &gt; <span class="keyword">using</span> MP = map&lt;T, U&gt;;</span><br><span class="line">tcTU &gt; <span class="keyword">using</span> VP = vector&lt;pair&lt;T, U&gt;&gt;;</span><br><span class="line">tcT &gt; <span class="keyword">using</span> pqg = priority_queue&lt;T, vector&lt;T&gt;, greater&lt;T&gt;&gt;;</span><br><span class="line">tcT &gt; <span class="keyword">using</span> pql = priority_queue&lt;T, vector&lt;T&gt;, less&lt;T&gt;&gt;;</span><br><span class="line"></span><br><span class="line">tcTU &gt; istream &amp;<span class="keyword">operator</span>&gt;&gt;(istream &amp;in, pair&lt;T, U&gt; &amp;a) &#123;</span><br><span class="line">  <span class="keyword">return</span> in &gt;&gt; a.first &gt;&gt; a.second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; istream &amp;<span class="keyword">operator</span>&gt;&gt;(istream &amp;in, vector&lt;T&gt; &amp;a) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) &#123;</span><br><span class="line">    in &gt;&gt; x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="type">const</span> pair&lt;T, U&gt; &amp;a) &#123;</span><br><span class="line">  <span class="keyword">return</span> out &lt;&lt; a.first &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; a.second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="type">const</span> vector&lt;pair&lt;T, U&gt;&gt; &amp;a) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) &#123;</span><br><span class="line">    out &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="type">const</span> vector&lt;T&gt; &amp;a) &#123;</span><br><span class="line">  <span class="type">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">  <span class="keyword">if</span> (!n) &#123;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">  &#125;</span><br><span class="line">  out &lt;&lt; a[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">    out &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; a[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, i128 n) &#123;</span><br><span class="line">  std::string s;</span><br><span class="line">  <span class="keyword">while</span> (n) &#123;</span><br><span class="line">    s += <span class="string">&#x27;0&#x27;</span> + n % <span class="number">10</span>;</span><br><span class="line">    n /= <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  std::<span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">  <span class="keyword">return</span> os &lt;&lt; s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">power</span><span class="params">(<span class="type">int</span> a, i64 b, <span class="type">int</span> p = <span class="number">1e9</span> + <span class="number">7</span>)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; b; b /= <span class="number">2</span>, a = <span class="number">1LL</span> * a * a % p) &#123;</span><br><span class="line">    <span class="keyword">if</span> (b % <span class="number">2</span>) &#123;</span><br><span class="line">      res = <span class="number">1LL</span> * res * a % p;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; <span class="function"><span class="type">bool</span> <span class="title">ckmin</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> b &lt; a ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line">tcT &gt; <span class="function"><span class="type">bool</span> <span class="title">ckmax</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; <span class="function"><span class="type">void</span> <span class="title">remDup</span><span class="params">(vector&lt;T&gt; &amp;v)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">sort</span>(<span class="built_in">all</span>(v));</span><br><span class="line">  v.<span class="built_in">erase</span>(<span class="built_in">unique</span>(<span class="built_in">all</span>(v)), <span class="built_in">end</span>(v));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; <span class="function"><span class="type">void</span> <span class="title">erase</span><span class="params">(T &amp;t, <span class="type">const</span> U &amp;u)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">auto</span> it = t.<span class="built_in">find</span>(u);</span><br><span class="line">  <span class="built_in">assert</span>(it != <span class="built_in">end</span>(t));</span><br><span class="line">  t.<span class="built_in">erase</span>(it);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; <span class="function">T <span class="title">fstTrue</span><span class="params">(T lo, T hi, U f)</span> </span>&#123;</span><br><span class="line">  hi++;</span><br><span class="line">  <span class="built_in">assert</span>(lo &lt;= hi);</span><br><span class="line">  <span class="keyword">while</span> (lo &lt; hi) &#123;</span><br><span class="line">    T mid = lo + (hi - lo) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">f</span>(mid) ? hi = mid : lo = mid + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> lo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; <span class="function">T <span class="title">lstTrue</span><span class="params">(T lo, T hi, U f)</span> </span>&#123;</span><br><span class="line">  lo--;</span><br><span class="line">  <span class="built_in">assert</span>(lo &lt;= hi);</span><br><span class="line">  <span class="keyword">while</span> (lo &lt; hi) &#123;</span><br><span class="line">    T mid = lo + (hi - lo + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">f</span>(mid) ? lo = mid : hi = mid - <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> lo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N = <span class="number">1.01e6</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> M = <span class="number">2.01e3</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;C:/Users/70510/Desktop/Others/algo/debug.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(...) 42</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  cin &gt;&gt; n;</span><br><span class="line">  <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">q</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">ans</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    cin &gt;&gt; a[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> top = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">while</span> (top &gt; <span class="number">0</span> <span class="keyword">and</span> a[q[top]] &lt; a[i]) &#123;</span><br><span class="line">      ans[q[top]] = i;</span><br><span class="line">      top--;</span><br><span class="line">    &#125;</span><br><span class="line">    q[++top] = i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    cout &lt;&lt; ans[i] &lt;&lt; <span class="string">&quot; \n&quot;</span>[i == n];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">setIO</span>();</span><br><span class="line">  <span class="type">int</span> tt = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// cin &gt;&gt; tt;</span></span><br><span class="line">  <span class="keyword">while</span> (tt--) &#123;</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;单调栈&quot;&gt;&lt;a href=&quot;#单调栈&quot; class=&quot;headerlink&quot; title=&quot;单调栈&quot;&gt;&lt;/a&gt;单调栈&lt;/h1&gt;&lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概</summary>
      
    
    
    
    
    <category term="XCPC" scheme="https://www.lansganbs.cn/tags/XCPC/"/>
    
  </entry>
  
  <entry>
    <title>关于算法竞赛中代码模版的规范化问题</title>
    <link href="https://www.lansganbs.cn/posts/d71d8d32.html"/>
    <id>https://www.lansganbs.cn/posts/d71d8d32.html</id>
    <published>2024-12-31T21:14:13.000Z</published>
    <updated>2025-07-02T11:40:03.112Z</updated>
    
    <content type="html"><![CDATA[<p>在平时写算法的时候看到别人的代码，有的时候代码很短，但是一言难尽；也有的人代码很长，但是却可以看得下去，几乎不影响观感。那么这就引申出一个问题，代码怎么写才能看起来更加的“规范”，“美观”，代码模板怎么写才能够保证“泛用性”，“可读性”。</p><h3 id="代码的格式问题"><a href="#代码的格式问题" class="headerlink" title="代码的格式问题"></a>代码的格式问题</h3><p>代码的基本格式我个人认为需要保证好基本的K&amp;R规范或者BSD规范，之后再这两种规范下进行微调。</p><blockquote><p>K&amp;R规范的明显标志为 左大括号不换行 右大括号和该范围的起始语句列数上持平</p><p>BSD规范的明显标志为 左右大括号全部换行 都和该范围的起始语句列数上持平</p></blockquote><p>具体的K&amp;R规范和BSD规范可以参见如下文章<a href="https://blog.csdn.net/weixin_30741653/article/details/97516375">c语言代码风格</a></p><p>其次看下面两段代码</p><details class="folding-tag" ><summary> 查看代码 </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line"></span><br><span class="line">using i64 = long long;</span><br><span class="line">using u64 = unsigned long long;</span><br><span class="line">using u32 = unsigned;</span><br><span class="line">using u128 = unsigned __int128;</span><br><span class="line"></span><br><span class="line">constexpr int inf = 1E9;</span><br><span class="line"></span><br><span class="line">void solve() &#123;</span><br><span class="line">    int n, m;</span><br><span class="line">    std::cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    </span><br><span class="line">    std::vector&lt;int&gt; a(n), b(n), s(n);</span><br><span class="line">    for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">        std::cin &gt;&gt; a[i] &gt;&gt; b[i] &gt;&gt; s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    auto ss = s;</span><br><span class="line">    auto vs = a;</span><br><span class="line">    vs.insert(vs.end(), b.begin(), b.end());</span><br><span class="line">    std::sort(ss.begin(), ss.end());</span><br><span class="line">    std::sort(vs.begin(), vs.end());</span><br><span class="line">    </span><br><span class="line">    vs.erase(std::unique(vs.begin(), vs.end()), vs.end());</span><br><span class="line">    ss.erase(std::unique(ss.begin(), ss.end()), ss.end());</span><br><span class="line">    </span><br><span class="line">    for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">        a[i] = std::lower_bound(vs.begin(), vs.end(), a[i]) - vs.begin();</span><br><span class="line">        b[i] = std::lower_bound(vs.begin(), vs.end(), b[i]) - vs.begin();</span><br><span class="line">        s[i] = std::lower_bound(ss.begin(), ss.end(), s[i]) - ss.begin();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    std::vector&lt;std::vector&lt;int&gt;&gt; q(m);</span><br><span class="line">    for (int i = 0; i &lt; m; i++) &#123;</span><br><span class="line">        int k;</span><br><span class="line">        std::cin &gt;&gt; k;</span><br><span class="line">        q[i].resize(k);</span><br><span class="line">        for (int j = 0; j &lt; k; j++) &#123;</span><br><span class="line">            std::cin &gt;&gt; q[i][j];</span><br><span class="line">            q[i][j]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    const int nv = vs.size();</span><br><span class="line">    const int ns = ss.size();</span><br><span class="line">    </span><br><span class="line">    int maxa = -1;</span><br><span class="line">    </span><br><span class="line">    std::vector&lt;int&gt; L(ns, -inf), R(ns, inf);</span><br><span class="line">    </span><br><span class="line">    std::vector&lt;std::vector&lt;std::array&lt;int, 2&gt;&gt;&gt; ban(ns + 1);</span><br><span class="line">    auto addSeg = [&amp;](int s, int l, int r) &#123;</span><br><span class="line">        ban[s].push_back(&#123;l, r&#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    for (int i = m - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">        for (auto j : q[i]) &#123;</span><br><span class="line">            if (maxa &lt; a[j]) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            R[s[j]] = std::min(R[s[j]], b[j]);</span><br><span class="line">            L[s[j]] = std::max(L[s[j]], maxa + 1);</span><br><span class="line">            if (a[j] &lt; maxa) &#123;</span><br><span class="line">                addSeg(ns, a[j] + 1, maxa);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        for (auto j : q[i]) &#123;</span><br><span class="line">            maxa = std::max(maxa, a[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    std::vector&lt;std::vector&lt;int&gt;&gt; vec(ns);</span><br><span class="line">    for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">        vec[s[i]].push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    for (int i = 0; i &lt; ns; i++) &#123;</span><br><span class="line">        if (L[i] &gt; R[i]) &#123;</span><br><span class="line">            std::cout &lt;&lt; -1 &lt;&lt; &quot;\n&quot;;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    int mina = inf;</span><br><span class="line">    for (int i = 0; i &lt; m; i++) &#123;</span><br><span class="line">        for (auto j : q[i]) &#123;</span><br><span class="line">            if (mina &gt; a[j]) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            if (b[j] &gt; a[j]) &#123;</span><br><span class="line">                addSeg(s[j], a[j] + 1, b[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        for (auto j : q[i]) &#123;</span><br><span class="line">            mina = std::min(mina, a[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    std::vector&lt;bool&gt; can(nv);</span><br><span class="line">    &#123;</span><br><span class="line">        std::vector&lt;int&gt; d(nv);</span><br><span class="line">        for (auto [l, r] : ban[ns]) &#123;</span><br><span class="line">            d[l]++;</span><br><span class="line">            if (r + 1 &lt; nv) &#123;</span><br><span class="line">                d[r + 1]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i = 1; i &lt; nv; i++) &#123;</span><br><span class="line">            d[i] += d[i - 1];</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i = 0; i &lt; nv; i++) &#123;</span><br><span class="line">            can[i] = (d[i] == 0);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    std::vector&lt;int&gt; left(nv, -1);</span><br><span class="line">    for (int i = 0; i &lt; nv; i++) &#123;</span><br><span class="line">        if (i &gt; 0) &#123;</span><br><span class="line">            left[i] = left[i - 1];</span><br><span class="line">        &#125;</span><br><span class="line">        if (can[i]) &#123;</span><br><span class="line">            left[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    std::vector&lt;std::array&lt;int, 2&gt;&gt; ans;</span><br><span class="line">    for (int i = 0; i &lt; ns; i++) &#123;</span><br><span class="line">        if (L[i] &lt; 0) &#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        int lst = -1;</span><br><span class="line">        std::vector&lt;std::array&lt;int, 2&gt;&gt; e;</span><br><span class="line">        for (auto [l, r] : ban[i]) &#123;</span><br><span class="line">            e.push_back(&#123;l - 1, -1&#125;);</span><br><span class="line">            e.push_back(&#123;r, 1&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        std::sort(e.begin(), e.end());</span><br><span class="line">        int sum = 0;</span><br><span class="line">        int val = -1;</span><br><span class="line">        for (auto [x, t] : e) &#123;</span><br><span class="line">            if (sum == 0 &amp;&amp; x &gt;= 0) &#123;</span><br><span class="line">                int u = left[std::min(x, R[i])];</span><br><span class="line">                if (u &gt; lst &amp;&amp; u &gt;= L[i]) &#123;</span><br><span class="line">                    val = u;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            sum += t;</span><br><span class="line">            lst = x;</span><br><span class="line">        &#125;</span><br><span class="line">        if (int u = left[R[i]]; u &gt; lst &amp;&amp; u &gt;= L[i]) &#123;</span><br><span class="line">            val = u;</span><br><span class="line">        &#125;</span><br><span class="line">        if (val == -1) &#123;</span><br><span class="line">            std::cout &lt;&lt; -1 &lt;&lt; &quot;\n&quot;;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        ans.push_back(&#123;vs[val], ss[i]&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    std::vector&lt;int&gt; score(n);</span><br><span class="line">    std::sort(ans.begin(), ans.end());</span><br><span class="line">    std::map&lt;int, int&gt; diff;</span><br><span class="line">    for (auto [d, p] : ans) &#123;</span><br><span class="line">        diff[p] = d;</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">        score[i] += std::lower_bound(ans.begin(), ans.end(), std::array &#123;vs[a[i]] + 1, 0&#125;) - ans.begin();</span><br><span class="line">        if (diff.contains(ss[s[i]])) &#123;</span><br><span class="line">            int x = diff[ss[s[i]]];</span><br><span class="line">            if (vs[a[i]] &lt; x &amp;&amp; x &lt;= vs[b[i]]) &#123;</span><br><span class="line">                score[i]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    int cur = 0;</span><br><span class="line">    std::vector&lt;std::set&lt;int&gt;&gt; set(n + 1);</span><br><span class="line">    for (int i = m - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">        for (auto j : q[i]) &#123;</span><br><span class="line">            int val = -1;</span><br><span class="line">            for (int k = score[j]; k &lt;= score[j] + 1 &amp;&amp; k &lt;= n; k++) &#123;</span><br><span class="line">                auto it = set[k].lower_bound(a[j]);</span><br><span class="line">                if (it != set[k].begin()) &#123;</span><br><span class="line">                    val = std::max(val, *std::prev(it));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (val != -1) &#123;</span><br><span class="line">                int u = left[a[j]];</span><br><span class="line">                if (u &lt;= val) &#123;</span><br><span class="line">                    std::cout &lt;&lt; -1 &lt;&lt; &quot;\n&quot;;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                for (int t = 0; t &lt; 2; t++) &#123;</span><br><span class="line">                    while (std::binary_search(ss.begin(), ss.end(), cur)) &#123;</span><br><span class="line">                        cur++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    ans.push_back(&#123;vs[u], cur&#125;);</span><br><span class="line">                    cur++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        for (auto j : q[i]) &#123;</span><br><span class="line">            set[score[j]].insert(a[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    std::cout &lt;&lt; ans.size() &lt;&lt; &quot;\n&quot;;</span><br><span class="line">    for (auto [d, p] : ans) &#123;</span><br><span class="line">        std::cout &lt;&lt; d &lt;&lt; &quot; &quot; &lt;&lt; p &lt;&lt; &quot;\n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // &#123;</span><br><span class="line">    //     std::vector&lt;int&gt; score(n);</span><br><span class="line">    //     for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">    //         for (auto [d, p] : ans) &#123;</span><br><span class="line">    //             if (vs[a[i]] &gt;= d || (ss[s[i]] == p &amp;&amp; vs[b[i]] &gt;= d)) &#123;</span><br><span class="line">    //                 score[i]++;</span><br><span class="line">    //             &#125;</span><br><span class="line">    //         &#125;</span><br><span class="line">    //     &#125;</span><br><span class="line">    //     for (int i = 0; i &lt; m; i++) &#123;</span><br><span class="line">    //         for (int j = i + 1; j &lt; m; j++) &#123;</span><br><span class="line">    //             for (auto x : q[i]) &#123;</span><br><span class="line">    //                 for (auto y : q[j]) &#123;</span><br><span class="line">    //                     assert(score[x] &gt; score[y]);</span><br><span class="line">    //                 &#125;</span><br><span class="line">    //             &#125;</span><br><span class="line">    //         &#125;</span><br><span class="line">    //     &#125;</span><br><span class="line">    //     assert(!ans.empty());</span><br><span class="line">    //     for (int i = 0; i &lt; ans.size(); i++) &#123;</span><br><span class="line">    //         for (int j = 0; j &lt; i; j++) &#123;</span><br><span class="line">    //             assert(ans[i][1] != ans[j][1]);</span><br><span class="line">    //         &#125;</span><br><span class="line">    //     &#125;</span><br><span class="line">    // &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    std::ios::sync_with_stdio(false);</span><br><span class="line">    std::cin.tie(nullptr);</span><br><span class="line">    </span><br><span class="line">    int t;</span><br><span class="line">    std::cin &gt;&gt; t;</span><br><span class="line">    </span><br><span class="line">    while (t--) &#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" ><summary> 查看代码 </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"> /*</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">                                                                   || ॐ नमः पार्वती पतये हर हर महादेव || </span><br><span class="line">                                      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀</span><br><span class="line">                                    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣷⣗⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀</span><br><span class="line">                                    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⣠⣾⡿⠁⠈⢓⣟⡢⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀</span><br><span class="line">                                    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣧⠀⠀⠀⠀⠀⣰⣿⠃⠀⠀⠀⠀⢐⣿⣼⠆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀</span><br><span class="line">                                    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣖⡀⠀⠀⠀⠈⠻⢗⣄⠀⢀⣴⣿⠟⠁⠀⠀⠀⠀⠀⢀⣴⡦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀</span><br><span class="line">                                    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⡾⡢⣀⠀⠀⠀⠀⠛⠗⣿⠟⠁⠀⠀⠀⠀⢀⣠⣴⠿⠋⠻⣽⢆⠀⠀⠀⠀⠀⠀⠀⠀</span><br><span class="line">                                    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣝⢷⢦⣤⣠⣀⡀⠀⠁⠀⣀⣀⠀⣄⡶⠟⠋⠀⠀⡀⠀⠈⢻⣷⣄⠀⠀⠀⠀⠀⠀</span><br><span class="line">                                    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⠀⠐⠊⠉⠉⠉⠉⠛⠛⠷⠷⣴⡄⣀⠀⠈⠿⡧⡄⠉⠉⠁⠛⠛⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣾⡿⠋⠀⠀⠀⠀⠀⠀</span><br><span class="line">                                    ⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⣼⠿⠛⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣿⢤⡀⠀⠛⢟⣄⠀⠀⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⢿⡿⠃⠀⠀⠀⠀⠀⠀⠀⠀</span><br><span class="line">                                    ⠀⠀⠀⠀⠀⠀⣤⣾⠟⠉⠀⠀⠀⠀⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢳⡻⡄⠀⠀⠐⠠⠥⣥⣀⣀⣄⣀⣀⣀⣠⣤⣴⠶⣚⠯⠚⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀</span><br><span class="line">                                    ⠀⠀⠀⠀⠀⠀⠈⢿⣧⠀⠀⠀⠀⠀⠀⠀⣀⣠⣤⣤⣦⣤⣄⡁⠠⠀⠀⠀⢳⣻⠀⠀⠀⠀⠀⠀⠈⠉⠉⠛⠛⠋⠉⠁⢀⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀</span><br><span class="line">                                    ⠀⠀⠀⠀⠀⠀⠀⠀⢿⣷⠀⢀⣠⡴⣞⠿⠍⠁⠀⠀⠀⠀⠈⠙⠸⣷⣄⠀⠈⣽⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⡶⠈⠀⠉⠙⠛⠻⣷⣴⡀⡀⠀⠀⠀⠀⠀⠀⠀</span><br><span class="line">                                    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣧⡿⠓⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣾⡆⢨⣽⠃⠀⠀⠀⠀⠀⠀⠀⣠⣾⠟⠁⠀⠀⠂⠀⠀⢀⣀⣄⣉⠻⢾⣷⣄⠀⠀⠀⠀⠀</span><br><span class="line">                                    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣨⡇⣾⡿⠀⠀⠀⠀⠀⠀⢀⣼⡿⠁⠀⠀⠀⠀⢠⣴⣿⠯⠋⠉⠙⠳⠰⣮⣻⣷⡀⠀⠀⠀</span><br><span class="line">                                    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⠟⣼⣿⠁⠀⠀⠀⠀⠀⢠⣾⠟⠀⠀⠀⠀⠀⣴⣿⠟⠀⠀⠀⠀⠀⠀⠀⠈⢿⣿⡷⡀⠀⠀</span><br><span class="line">                                    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣦⡦⣤⣤⣤⣤⠤⠴⠰⠾⠛⢁⣾⡿⠁⠀⠀⠀⠀⠀⢠⣿⠋⠀⠀⠀⠀⠀⣼⡿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣧⡷⣳⠀⠀</span><br><span class="line">                                    ⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠱⣷⡆⠀⠀⠀⠀⠀⢀⣠⢶⡿⠋⠀⠀⠀⠀⠀⠀⣔⡽⠃⠀⠀⠀⠀⠀⣼⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣵⡍⣇⠀</span><br><span class="line">                                    ⢠⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢝⣷⡀⠀⠀⠀⠀⠸⣿⣫⣀⠀⠀⠀⠀⠀⢀⣼⠟⠀⠀⠀⠀⠀⢠⣞⡟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⢹⢾⠀</span><br><span class="line">                                    ⢸⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣾⣇⠀⠀⠀⠀⠀⠀⠉⠙⠻⠷⠲⠖⠾⠛⠁⠀⠀⠀⣀⣠⣞⡷⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⢸⣾⡃</span><br><span class="line">                                    ⢸⣠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠰⣯⠞⠛⠛⠛⠽⠶⣄⢀⡄⠀⠀⣴⢿⠻⠿⠿⠿⠛⠏⠃⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢂⣾⢸⣿⡅</span><br><span class="line">                                    ⢀⣏⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠺⣷⣀⠙⣾⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⠃⢸⣻⠆</span><br><span class="line">                                    ⠈⣿⢾⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⡄⠹⡸⡄⠀⠀⠀⢸⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣿⠏⠀⢾⣿⠀</span><br><span class="line">                                    ⠀⢻⡿⣱⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⡇⠀⣧⣷⠀⠀⠀⢸⣟⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⡿⠋⠀⠀⣇⡏⠀</span><br><span class="line">                                    ⠀⠈⣿⡼⡵⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⠇⠀⢸⢿⠀⠀⠀⣸⣯⢿⣵⣀⣀⠀⠀⠀⠀⠀⢀⢀⣤⣾⠟⠋⠀⠀⠀⣼⣻⠁⠀</span><br><span class="line">                                    ⠀⠀⢸⣯⡝⣮⢣⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⣿⠀⠀⢸⣿⠀⠀⠀⢸⣿⠂⠈⠙⠛⠛⠛⠛⠉⠉⠐⠒⠁⠀⠀⠀⠀⠀⢠⣷⡏⠀⠀</span><br><span class="line">                                    ⠀⠀⠀⢻⣷⡙⢷⢿⢤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⡟⠃⠀⠀⣼⣿⠀⠀⠀⠀⢿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⢿⡞⠁⠀⠀</span><br><span class="line">                                    ⠀⠀⠀⠀⠻⣿⡄⠈⠛⠶⣵⣀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⠾⠛⠁⠀⠂⠀⢀⣷⡏⠀⠀⠀⠀⠈⢻⣷⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡰⣫⠟⠀⠀⠀⠀</span><br><span class="line">                                    ⠀⠀⠀⠀⠀⠙⢿⣦⠀⠀⠈⠘⠙⠻⠟⠿⠷⠒⠚⠙⠁⠀⠈⠁⠀⠀⠀⠀⠀⢀⣾⡿⠀⠀⠀⠀⠀⠀⠀⠙⢿⡶⠠⢀⠀⠀⠀⠀⢀⣀⣄⠀⣠⠚⠁⠀⠀⠀⠀⠀</span><br><span class="line">                                    ⠀⠀⠀⠀⠀⠀⠈⠻⣿⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣿⡟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠒⠻⠿⠿⠛⠛⠉⠐⠁⠀⠀⠀⠀⠀⠀⠀⠀</span><br><span class="line">                                    ⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⢙⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⣠⢞⡵⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀</span><br><span class="line">                                    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠃⠖⠶⣶⣤⣤⡤⢤⣤⡤⠶⠞⠫⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀</span><br><span class="line">                                    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">                                                          ।। ऊँ कृष्णाय वासुदेवाय हरये परमात्मने ।।</span><br><span class="line">                                                          ।। प्रणतः क्लेशनाशाय गोविंदाय नमो नमः ।।</span><br><span class="line"></span><br><span class="line">                                                                  </span><br><span class="line"></span><br><span class="line">                                            ---------------&gt; tiwari ji presents &lt;---------------   </span><br><span class="line"></span><br><span class="line">  “ Mnn boot karega k chor yrr apne se nahi hoga  Just ask 1 question “ Why I started ? “</span><br><span class="line"></span><br><span class="line">    &quot;Countless reasons not to do it, but only one reason to go for it — and that&#x27;s enough.&quot;*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#define ll long long </span><br><span class="line">#define pb push_back</span><br><span class="line">#define pp pop_back()</span><br><span class="line">#define vi vector&lt;ll&gt;</span><br><span class="line">#define tiwari ll t ; cin&gt;&gt;t; while(t--)</span><br><span class="line">#define  loop  for(int i=0;i&lt;n;i++)&#123;cin&gt;&gt;a[i];&#125;</span><br><span class="line">#define  mn ll m,n; cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line">#define  str string s ; cin&gt;&gt;s;</span><br><span class="line">#define str2 string s; cin&gt;&gt;s; string t; cin&gt;&gt;t;</span><br><span class="line">#define  set unordered_set&lt;int&gt;seen;</span><br><span class="line">#define  mii unordered_map&lt;int,int&gt;mp;</span><br><span class="line">#define  mic unordered_map&lt;int ,char&gt;mpp;</span><br><span class="line">#define  mcc unordered_map&lt;char,char&gt;mpc;</span><br><span class="line">#define srt sort(a.begin(),a.end());</span><br><span class="line">#define couta for(auto it:a)&#123;cout&lt;&lt;it&lt;&lt;&quot; &quot;;&#125;</span><br><span class="line">#define bp1 __builtin_popcount</span><br><span class="line">#define bpll __builtin_popcountll</span><br><span class="line">#define countdigits int cg=(int)(log10(n)+1)</span><br><span class="line">#define  surukezero __builtin_clz(a)</span><br><span class="line">#define  lastkezero __builtin_ctz(a)</span><br><span class="line">#define  decimalnumberdega auto number=0bn;</span><br><span class="line">#define  ithbit1haiyanahi if((n&gt;&gt;i)&amp;1)&#123;&#125; </span><br><span class="line">#define last1removekaro n&amp;(n-1)  </span><br><span class="line">#define binaryme bitset&lt;32&gt;(xr).to_string();  </span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">     </span><br><span class="line">     tiwari&#123;</span><br><span class="line"></span><br><span class="line">         int n;</span><br><span class="line">         cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">         vi a(n);</span><br><span class="line">         loop;</span><br><span class="line">         srt;</span><br><span class="line">      </span><br><span class="line">      int ans=0;</span><br><span class="line">         for(int i=0;i&lt;n-1;)&#123;</span><br><span class="line">             if(a[i]==a[i+1])&#123;</span><br><span class="line">                ans=ans+1;</span><br><span class="line">                i=i+2;</span><br><span class="line">             &#125;</span><br><span class="line">             else&#123;</span><br><span class="line">                i++;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* JAB TAK KHUD KUCH NA KAR LO TABTAK DUSRO KO GYAN MAT DO */</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><p>上述两份代码皆选自Codeforces上的正确提交，谁的代码风格更好不言而喻。</p><p>第一份代码出自Jiangly。</p><p>第二份代码充斥了大量的宏定义，字符画，多余的空格，看似意义不明的函数，拥挤的代码…这份代码规范差，起手模板的宏定义可读性差，基本循环语句甚至包含了宏定义，码风极差。</p><h3 id="关于代码的起手"><a href="#关于代码的起手" class="headerlink" title="关于代码的起手"></a>关于代码的起手</h3><p>常见的基础模版大体分为两种</p><ol><li>基本代码模版</li></ol><details class="folding-tag" ><summary> 查看代码 </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">void solve() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">  ios::sync_with_stdio(false);</span><br><span class="line">  cin.tie(0), cout.tie(0);</span><br><span class="line">  int tt = 1;</span><br><span class="line">  // cin &gt;&gt; tt;</span><br><span class="line">  while (tt--) &#123;</span><br><span class="line">      solve();</span><br><span class="line">  &#125;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><ol><li>长篇大论的包含宏定义+函数+重载等的模板，如</li></ol><details class="folding-tag" ><summary> 查看代码 </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">// #include &lt;bits/extc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">// using namespace __gnu_pbds;</span><br><span class="line">#define endl &#x27;\n&#x27;</span><br><span class="line">#define ture true</span><br><span class="line">#define flase false</span><br><span class="line">#define pow power</span><br><span class="line">#define all(x) begin(x), end(x)</span><br><span class="line">#define mem(a, x) memset(a, x, sizeof(a))</span><br><span class="line">#define gcd(a, b) gcdint(a, b)</span><br><span class="line">#define lcm(a, b) (a / gcd(a, b) * b)</span><br><span class="line">#define sz(x) (int)x.size()</span><br><span class="line">#define lowbit(x) (x &amp; -x)</span><br><span class="line">#define pb push_back</span><br><span class="line">#define EPS 1e-7</span><br><span class="line">#define int ll</span><br><span class="line">#define ll long long</span><br><span class="line">#define i64 long long</span><br><span class="line">#define i128 __int128</span><br><span class="line">#define fr first</span><br><span class="line">#define sc second</span><br><span class="line">#define tcT template &lt;class T</span><br><span class="line">#define tcTU tcT, class U</span><br><span class="line"></span><br><span class="line">void unsyncIO() &#123; cin.tie(0)-&gt;sync_with_stdio(0); &#125;</span><br><span class="line">void setPrec() &#123; cout &lt;&lt; fixed &lt;&lt; setprecision(15); &#125;</span><br><span class="line">void setIO() &#123; unsyncIO(), setPrec(); &#125;</span><br><span class="line"></span><br><span class="line">inline int gcdint(int a, int b) &#123; return b ? gcdint(b, a % b) : a; &#125;</span><br><span class="line">inline i128 gcd128(i128 a, i128 b) &#123; return b ? gcd128(b, a % b) : a; &#125;</span><br><span class="line">inline int cdiv(int a, int b) &#123; return a / b + ((a ^ b) &gt; 0 &amp;&amp; a % b); &#125;</span><br><span class="line">inline int fdiv(int a, int b) &#123; return a / b - ((a ^ b) &lt; 0 &amp;&amp; a % b); &#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; using V = vector&lt;T&gt;;</span><br><span class="line">tcTU &gt; using PR = pair&lt;T, U&gt;;</span><br><span class="line">tcTU &gt; using MP = map&lt;T, U&gt;;</span><br><span class="line">tcTU &gt; using VP = vector&lt;pair&lt;T, U&gt;&gt;;</span><br><span class="line">tcT &gt; using pqg = priority_queue&lt;T, vector&lt;T&gt;, greater&lt;T&gt;&gt;;</span><br><span class="line">tcT &gt; using pql = priority_queue&lt;T, vector&lt;T&gt;, less&lt;T&gt;&gt;;</span><br><span class="line"></span><br><span class="line">tcTU &gt; istream &amp;operator&gt;&gt;(istream &amp;in, pair&lt;T, U&gt; &amp;a) &#123;</span><br><span class="line">  return in &gt;&gt; a.first &gt;&gt; a.second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; istream &amp;operator&gt;&gt;(istream &amp;in, vector&lt;T&gt; &amp;a) &#123;</span><br><span class="line">  for (auto &amp;x : a) &#123;</span><br><span class="line">    in &gt;&gt; x;</span><br><span class="line">  &#125;</span><br><span class="line">  return in;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; ostream &amp;operator&lt;&lt;(ostream &amp;out, const pair&lt;T, U&gt; &amp;a) &#123;</span><br><span class="line">  return out &lt;&lt; a.first &lt;&lt; &#x27; &#x27; &lt;&lt; a.second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; ostream &amp;operator&lt;&lt;(ostream &amp;out, const vector&lt;pair&lt;T, U&gt;&gt; &amp;a) &#123;</span><br><span class="line">  for (auto &amp;x : a) &#123;</span><br><span class="line">    out &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  return out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; ostream &amp;operator&lt;&lt;(ostream &amp;out, const vector&lt;T&gt; &amp;a) &#123;</span><br><span class="line">  int n = a.size();</span><br><span class="line">  if (!n) &#123;</span><br><span class="line">    return out;</span><br><span class="line">  &#125;</span><br><span class="line">  out &lt;&lt; a[0];</span><br><span class="line">  for (int i = 1; i &lt; n; i++) &#123;</span><br><span class="line">    out &lt;&lt; &#x27; &#x27; &lt;&lt; a[i];</span><br><span class="line">  &#125;</span><br><span class="line">  return out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::ostream &amp;operator&lt;&lt;(std::ostream &amp;os, i128 n) &#123;</span><br><span class="line">  std::string s;</span><br><span class="line">  while (n) &#123;</span><br><span class="line">    s += &#x27;0&#x27; + n % 10;</span><br><span class="line">    n /= 10;</span><br><span class="line">  &#125;</span><br><span class="line">  std::reverse(s.begin(), s.end());</span><br><span class="line">  return os &lt;&lt; s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline int power(int a, i64 b, int p = 1e9 + 7) &#123;</span><br><span class="line">  int res = 1;</span><br><span class="line">  for (; b; b /= 2, a = 1LL * a * a % p) &#123;</span><br><span class="line">    if (b % 2) &#123;</span><br><span class="line">      res = 1LL * res * a % p;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; bool ckmin(T &amp;a, const T &amp;b) &#123; return b &lt; a ? a = b, 1 : 0; &#125;</span><br><span class="line">tcT &gt; bool ckmax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; void remDup(vector&lt;T&gt; &amp;v) &#123;</span><br><span class="line">  sort(all(v));</span><br><span class="line">  v.erase(unique(all(v)), end(v));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; void erase(T &amp;t, const U &amp;u) &#123;</span><br><span class="line">  auto it = t.find(u);</span><br><span class="line">  assert(it != end(t));</span><br><span class="line">  t.erase(it);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; T fstTrue(T lo, T hi, U f) &#123;</span><br><span class="line">  hi++;</span><br><span class="line">  assert(lo &lt;= hi);</span><br><span class="line">  while (lo &lt; hi) &#123;</span><br><span class="line">    T mid = lo + (hi - lo) / 2;</span><br><span class="line">    f(mid) ? hi = mid : lo = mid + 1;</span><br><span class="line">  &#125;</span><br><span class="line">  return lo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; T lstTrue(T lo, T hi, U f) &#123;</span><br><span class="line">  lo--;</span><br><span class="line">  assert(lo &lt;= hi);</span><br><span class="line">  while (lo &lt; hi) &#123;</span><br><span class="line">    T mid = lo + (hi - lo + 1) / 2;</span><br><span class="line">    f(mid) ? lo = mid : hi = mid - 1;</span><br><span class="line">  &#125;</span><br><span class="line">  return lo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">constexpr int mod = 1e9 + 7;</span><br><span class="line">constexpr int inf = 0x7fffffff;</span><br><span class="line">constexpr int N = 1.01e6;</span><br><span class="line">constexpr int M = 2.01e3;</span><br><span class="line"></span><br><span class="line">#ifdef LOCAL</span><br><span class="line">#include &lt;C:/Users/70510/Desktop/Others/algo/debug.h&gt;</span><br><span class="line">#else</span><br><span class="line">#define debug(...) 42</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">void solve() &#123;&#125;</span><br><span class="line"></span><br><span class="line">signed main() &#123;</span><br><span class="line">  setIO();</span><br><span class="line">  int tt = 1;</span><br><span class="line">  // cin &gt;&gt; tt;</span><br><span class="line">  while (tt--) &#123;</span><br><span class="line">    solve();</span><br><span class="line">  &#125;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><p>上面就是我的代码模板，我在此要强调的是，模板长≠模板冗长。</p><p>第一份代码简洁，我也推荐大家写这种代码，但是实际写下来肯定是不如第二份舒服。</p><p>第二份代码包含了大量的宏定义等行为，但是每一段定义做了区域性的划分</p><ul><li>最初的#define保证了基本的可移植性 一直到自己的代码中如果有相关宏定义的话可能根本不报错</li><li>之后的函数是关于关闭流同步，基本短代码函数重载</li><li>之后的using使用template<class *T*>来定义部分STL容器，摒弃大量的vi，vii，pi，vpii等过长定义</li><li>重载部分STL的输入输出流以及int128定义，这里将重载运算符相关的代码放在了一起</li><li>接下来重载power函数，对基础pow进行直接加速</li><li>然后用template<class *T*>定义另一部分基本函数，取最大最小值赋值/二分/去重等函数</li><li>然后constexpr最常使用的四个int常量</li><li>引入本地debug.h</li><li>最后的主体代码</li></ul><p>整体看下来，代码虽然很长，但基本逻辑是非常清晰的，对每一部分都进行了划分。现在的大多数橙名，红名以下选手的代码模板基本都是一通乱写，不知所云，这也是灰名和红名之间的差距，代码的可读性都是大大不同。</p><p>这里我的模板主要是从以下代码吸收而来，并借鉴了其良好的代码分区原则</p><details class="folding-tag" ><summary> 查看代码 </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">/////////////////////// MACROS ////////////////////////////////////////////</span><br><span class="line">using ll = long long;</span><br><span class="line">using ld = long double;</span><br><span class="line">using db = double;</span><br><span class="line">using str = string;</span><br><span class="line"></span><br><span class="line">using pi = pair&lt;int, int&gt;;</span><br><span class="line">using pl = pair&lt;ll, ll&gt;;</span><br><span class="line"></span><br><span class="line">using vi = vector&lt;int&gt;;</span><br><span class="line">using vl = vector&lt;ll&gt;;</span><br><span class="line">using vs = vector&lt;str&gt;;</span><br><span class="line">using vc = vector&lt;char&gt;;</span><br><span class="line">using vpi = vector&lt;pi&gt;;</span><br><span class="line">using vpl = vector&lt;pl&gt;;</span><br><span class="line"></span><br><span class="line">#define tcT template &lt;class T</span><br><span class="line">#define tcTU tcT, class U</span><br><span class="line">tcT &gt; using V = vector&lt;T&gt;;</span><br><span class="line">tcT, size_t SZ &gt; using AR = array&lt;T, SZ&gt;;</span><br><span class="line">tcTU &gt; using PR = pair&lt;T, U&gt;;</span><br><span class="line">tcTU &gt; using umap = unordered_map&lt;T, U&gt;;</span><br><span class="line">tcT &gt; using uset = unordered_set&lt;T&gt;;</span><br><span class="line">tcT &gt; using mset = multiset&lt;T&gt;;</span><br><span class="line"></span><br><span class="line">#define mp make_pair</span><br><span class="line">#define f first</span><br><span class="line">#define s second</span><br><span class="line"></span><br><span class="line">#define sz(x) int((x).size())</span><br><span class="line">#define all(x) x.begin(), x.end()</span><br><span class="line">#define rall(x) x.rbegin(), x.rend()</span><br><span class="line">#define rsz resize</span><br><span class="line">#define ins insert</span><br><span class="line">#define ft front()</span><br><span class="line">#define bk back()</span><br><span class="line">#define ppb pop_back()</span><br><span class="line">#define ppf pop_front()</span><br><span class="line">#define pb push_back</span><br><span class="line">#define eb emplace_back</span><br><span class="line">#define pf push_front</span><br><span class="line"></span><br><span class="line">#define lb lower_bound</span><br><span class="line">#define ub upper_bound</span><br><span class="line"></span><br><span class="line">// LOOPS</span><br><span class="line">#define FOR(i, a, b) for (int i = (a); i &lt; (b); ++i)</span><br><span class="line">#define F0R(i, a) FOR(i, 0, a)</span><br><span class="line">#define ROF(i, a, b) for (int i = (b) - 1; i &gt;= (a); --i)</span><br><span class="line">#define R0F(i, a) ROF(i, 0, a)</span><br><span class="line">#define rep(a) F0R(_, a)</span><br><span class="line">#define each(a, x) for (auto&amp; a : x)</span><br><span class="line"></span><br><span class="line">/////////////////////// IMPORANT VARS /////////////////////////////////////</span><br><span class="line"></span><br><span class="line">const int MOD = 1e9 + 7;  // 998244353;</span><br><span class="line">const int MX = 2e5 + 5;</span><br><span class="line">const ll INFL = ll(3e18) + 10;</span><br><span class="line">const int INF = int(1e9) + 10;</span><br><span class="line">const ld PI = acos((ld)-1);</span><br><span class="line">const int dx[4] = &#123;1, 0, -1, 0&#125;, dy[4] = &#123;0, 1, 0, -1&#125;;</span><br><span class="line">tcT &gt; using pqg = priority_queue&lt;T, vector&lt;T&gt;, greater&lt;T&gt;&gt;;</span><br><span class="line">tcT &gt; using pql = priority_queue&lt;T, vector&lt;T&gt;, less&lt;T&gt;&gt;;</span><br><span class="line">mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());</span><br><span class="line">#define nl &#x27;\n&#x27;</span><br><span class="line"></span><br><span class="line">constexpr int pct(int x) &#123; return __builtin_popcount(x); &#125;  // # of bits set</span><br><span class="line">constexpr int bits(int x) &#123; return x == 0 ? 0 : 31 - __builtin_clz(x); &#125;</span><br><span class="line">constexpr int p2(int x) &#123; return 1 &lt;&lt; x; &#125;</span><br><span class="line">constexpr int msk2(int x) &#123; return p2(x) - 1; &#125;</span><br><span class="line"></span><br><span class="line">ll cdiv(ll a, ll b) &#123;</span><br><span class="line">  return a / b + ((a ^ b) &gt; 0 &amp;&amp; a % b);</span><br><span class="line">&#125;  // divide a by b rounded up</span><br><span class="line">ll fdiv(ll a, ll b) &#123;</span><br><span class="line">  return a / b - ((a ^ b) &lt; 0 &amp;&amp; a % b);</span><br><span class="line">&#125;  // divide a by b rounded down</span><br><span class="line"></span><br><span class="line">tcT &gt; bool ckmin(T&amp; a, const T&amp; b) &#123;</span><br><span class="line">  return b &lt; a ? a = b, 1 : 0;</span><br><span class="line">&#125;  // set a = min(a,b)</span><br><span class="line">tcT &gt; bool ckmax(T&amp; a, const T&amp; b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; T fstTrue(T lo, T hi, U f) &#123;</span><br><span class="line">  hi++;</span><br><span class="line">  assert(lo &lt;= hi);  // assuming f is increasing</span><br><span class="line">  while (lo &lt; hi) &#123;  // find first index such that f is true</span><br><span class="line">    T mid = lo + (hi - lo) / 2;</span><br><span class="line">    f(mid) ? hi = mid : lo = mid + 1;</span><br><span class="line">  &#125;</span><br><span class="line">  return lo;</span><br><span class="line">&#125;</span><br><span class="line">tcTU &gt; T lstTrue(T lo, T hi, U f) &#123;</span><br><span class="line">  lo--;</span><br><span class="line">  assert(lo &lt;= hi);  // assuming f is decreasing</span><br><span class="line">  while (lo &lt; hi) &#123;  // find last index such that f is true</span><br><span class="line">    T mid = lo + (hi - lo + 1) / 2;</span><br><span class="line">    f(mid) ? lo = mid : hi = mid - 1;</span><br><span class="line">  &#125;</span><br><span class="line">  return lo;</span><br><span class="line">&#125;</span><br><span class="line">tcT &gt; void remDup(vector&lt;T&gt;&amp; v) &#123;  // sort and remove duplicates</span><br><span class="line">  sort(all(v));</span><br><span class="line">  v.erase(unique(all(v)), end(v));</span><br><span class="line">&#125;</span><br><span class="line">tcTU &gt; void erase(T&amp; t, const U&amp; u) &#123;  // don&#x27;t erase</span><br><span class="line">  auto it = t.find(u);</span><br><span class="line">  assert(it != end(t));</span><br><span class="line">  t.erase(it);</span><br><span class="line">&#125;  // element that doesn&#x27;t exist from (multi)set</span><br><span class="line"></span><br><span class="line">// #include &lt;ext/pb_ds/assoc_container.hpp&gt;</span><br><span class="line">// using namespace __gnu_pbds;</span><br><span class="line"></span><br><span class="line">// tcT&gt; using iset = tree&lt;T, null_type, less&lt;T&gt;, rb_tree_tag,</span><br><span class="line">// tree_order_statistics_node_update&gt;; #define ook order_of_key #define fbo</span><br><span class="line">// find_by_order</span><br><span class="line"></span><br><span class="line">// struct chash &#123;</span><br><span class="line">// const uint64_t C = ll(2e18*PI)+71;</span><br><span class="line">// const int RANDOM = rng();</span><br><span class="line">// ll operator()(ll x) const &#123;</span><br><span class="line">// return __builtin_bswap64((x^RANDOM)*C); &#125;</span><br><span class="line">// &#125;;</span><br><span class="line"></span><br><span class="line">// struct splitmix64_hash &#123;</span><br><span class="line">// static uint64_t splitmix64(uint64_t x) &#123;</span><br><span class="line">// // http://xorshift.di.unimi.it/splitmix64.c</span><br><span class="line">// x += 0x9e3779b97f4a7c15;</span><br><span class="line">// x = (x ^ (x &gt;&gt; 30)) * 0xbf58476d1ce4e5b9;</span><br><span class="line">// x = (x ^ (x &gt;&gt; 27)) * 0x94d049bb133111eb;</span><br><span class="line">// return x ^ (x &gt;&gt; 31);</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">// size_t operator()(uint64_t x) const &#123;</span><br><span class="line">// static const uint64_t FIXED_RANDOM =</span><br><span class="line">// std::chrono::steady_clock::now().time_since_epoch().count();</span><br><span class="line">// return splitmix64(x + FIXED_RANDOM);</span><br><span class="line">// &#125;</span><br><span class="line">// &#125;;</span><br><span class="line"></span><br><span class="line">// template&lt;class K,class V&gt; using um = unordered_map&lt;K,V,chash&gt;;</span><br><span class="line">// template&lt;class K,class V&gt; using ht = gp_hash_table&lt;K,V,chash&gt;;</span><br><span class="line">// template&lt;class K,class V&gt; V get(ht&lt;K,V&gt;&amp; u, K x) &#123;</span><br><span class="line">// auto it = u.find(x); return it == end(u) ? 0 : it-&gt;s; &#125;</span><br><span class="line"></span><br><span class="line">/////////////////////// OUPUT /////////////////////////////////////////////</span><br><span class="line">#define ts to_string</span><br><span class="line">str ts(char c) &#123; return str(1, c); &#125;</span><br><span class="line">str ts(const char* s) &#123; return (str)s; &#125;</span><br><span class="line">str ts(str s) &#123; return s; &#125;</span><br><span class="line">str ts(bool b) &#123;</span><br><span class="line">#ifdef LOCAL</span><br><span class="line">  return b ? &quot;true&quot; : &quot;false&quot;;</span><br><span class="line">#else</span><br><span class="line">  return ts((int)b);</span><br><span class="line">#endif</span><br><span class="line">&#125;</span><br><span class="line">tcTU &gt; str ts(pair&lt;T, U&gt; p) &#123;</span><br><span class="line">#ifdef LOCAL</span><br><span class="line">  return &quot;(&quot; + ts(p.f) + &quot;, &quot; + ts(p.s) + &quot;)&quot;;</span><br><span class="line">#else</span><br><span class="line">  return ts(p.f) + &quot; &quot; + ts(p.s);</span><br><span class="line">#endif</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; str ts(V&lt;pair&lt;T, U&gt;&gt; v) &#123;</span><br><span class="line">#ifdef LOCAL</span><br><span class="line">  bool fst = 1;</span><br><span class="line">  str res = &quot;&#123;&quot;;</span><br><span class="line">  for (const auto&amp; x : v) &#123;</span><br><span class="line">    if (!fst) res += &quot;, &quot;;</span><br><span class="line">    fst = 0;</span><br><span class="line">    res += ts(x);</span><br><span class="line">  &#125;</span><br><span class="line">  res += &quot;&#125;&quot;;</span><br><span class="line">  return res;</span><br><span class="line">#else</span><br><span class="line">  bool fst = 1;</span><br><span class="line">  str res = &quot;&quot;;</span><br><span class="line">  for (const auto&amp; x : v) &#123;</span><br><span class="line">    if (!fst) res += &quot; &quot;;</span><br><span class="line">    fst = 0;</span><br><span class="line">    res += ts(x);</span><br><span class="line">  &#125;</span><br><span class="line">  return res;</span><br><span class="line">#endif</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; str ts(T v) &#123;</span><br><span class="line">#ifdef LOCAL</span><br><span class="line">  bool fst = 1;</span><br><span class="line">  str res = &quot;&#123;&quot;;</span><br><span class="line">  for (const auto&amp; x : v) &#123;</span><br><span class="line">    if (!fst) res += &quot;, &quot;;</span><br><span class="line">    fst = 0;</span><br><span class="line">    res += ts(x);</span><br><span class="line">  &#125;</span><br><span class="line">  res += &quot;&#125;&quot;;</span><br><span class="line">  return res;</span><br><span class="line">#else</span><br><span class="line">  bool fst = 1;</span><br><span class="line">  str res = &quot;&quot;;</span><br><span class="line">  for (const auto&amp; x : v) &#123;</span><br><span class="line">    if (!fst) res += &quot; &quot;;</span><br><span class="line">    fst = 0;</span><br><span class="line">    res += ts(x);</span><br><span class="line">  &#125;</span><br><span class="line">  return res;</span><br><span class="line"></span><br><span class="line">#endif</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">///////////////////////// DEBUG ///////////////////////////////////////////</span><br><span class="line">#define tcTUU tcT, class... U</span><br><span class="line">void DBG() &#123; cerr &lt;&lt; &quot;]&quot; &lt;&lt; &quot;\e[0m&quot; &lt;&lt; endl; &#125;</span><br><span class="line">tcTUU &gt; void DBG(const T&amp; t, const U&amp;... u) &#123;</span><br><span class="line">  cerr &lt;&lt; ts(t);</span><br><span class="line">  if (sizeof...(u)) cerr &lt;&lt; &quot;, &quot;;</span><br><span class="line">  DBG(u...);</span><br><span class="line">&#125;</span><br><span class="line">#ifdef LOCAL</span><br><span class="line">#define dbg(...)                                                     \</span><br><span class="line">  cerr &lt;&lt; &quot;\e[1m&quot; &lt;&lt; &quot;Line(&quot; &lt;&lt; __LINE__ &lt;&lt; &quot;) -&gt; [&quot; &lt;&lt; #__VA_ARGS__ \</span><br><span class="line">       &lt;&lt; &quot;]: [&quot;,                                                    \</span><br><span class="line">      DBG(__VA_ARGS__);</span><br><span class="line">#define asrt(...)                                                   \</span><br><span class="line">  if (!(__VA_ARGS__))                                               \</span><br><span class="line">    cerr &lt;&lt; &quot;Line(&quot; &lt;&lt; __LINE__ &lt;&lt; &quot;) -&gt; function(&quot; &lt;&lt; __FUNCTION__ \</span><br><span class="line">         &lt;&lt; &quot;) -&gt; CHK FAILED: (&quot; &lt;&lt; #__VA_ARGS__ &lt;&lt; &quot;)&quot; &lt;&lt; &quot;\n&quot;,    \</span><br><span class="line">        exit(0);</span><br><span class="line">#else</span><br><span class="line">#define dbg(...) 0</span><br><span class="line">#define asrt(...) 0</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">///////////////////////// FILE I/O ////////////////////////////////////////</span><br><span class="line">void unsyncIO() &#123; cin.tie(0)-&gt;sync_with_stdio(0); &#125;</span><br><span class="line">void setPrec() &#123; cout &lt;&lt; fixed &lt;&lt; setprecision(15); &#125;</span><br><span class="line">void setIn(str s) &#123; freopen(s.c_str(), &quot;r&quot;, stdin); &#125;</span><br><span class="line">void setOut(str s) &#123; freopen(s.c_str(), &quot;w&quot;, stdout); &#125;</span><br><span class="line">void setIO(str s = &quot;&quot;) &#123;</span><br><span class="line">  unsyncIO();</span><br><span class="line">  setPrec();</span><br><span class="line">#ifndef LOCAL</span><br><span class="line">  if (sz(s)) setIn(s + &quot;.in&quot;), setOut(s + &quot;.out&quot;);  // for USACO</span><br><span class="line">#endif</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">///////////////////////// TEMPLATE ABOVE //////////////////////////////////</span><br><span class="line"></span><br><span class="line">// REMEMBER</span><br><span class="line">// - Don&#x27;t Focus On Only One Approach</span><br><span class="line">// - Read And Understand Problem Fully</span><br><span class="line">// - Think Of Edges Cases</span><br><span class="line">// - Implement Carefully</span><br><span class="line">// - Always Check For Overflows</span><br><span class="line">// - Reset Global Variables</span><br><span class="line">// - Look At The Bigger Picture</span><br><span class="line">// - Don&#x27;t Get Discouraged, You Can Pull It Back</span><br><span class="line"></span><br><span class="line">void solve() &#123;&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">  setIO();</span><br><span class="line"></span><br><span class="line">  int TT = 1;</span><br><span class="line">  // cin &gt;&gt; TT;</span><br><span class="line"></span><br><span class="line">  rep(TT) solve();</span><br><span class="line"></span><br><span class="line">  exit(0 - 0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><p>这份代码由橙名所写，我个人认为，如果可读性是比较良好，并且非常值得借鉴的代码。</p><p>这里随机粘贴一位灰名选手的代码</p><details class="folding-tag" ><summary> 查看代码 </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br></pre></td><td class="code"><pre><span class="line">//JAI SHREE RAM</span><br><span class="line">    #include&lt;bits/stdc++.h&gt;</span><br><span class="line">    #include&lt;ext/pb_ds/assoc_container.hpp&gt;</span><br><span class="line">    #include&lt;ext/pb_ds/tree_policy.hpp&gt;</span><br><span class="line">    using namespace std;</span><br><span class="line">    using namespace std::chrono;</span><br><span class="line">    #define ll long long </span><br><span class="line">    using namespace __gnu_pbds;</span><br><span class="line">    typedef tree&lt;ll int,null_type,less_equal&lt;ll int&gt;,rb_tree_tag,tree_order_statistics_node_update&gt; pbds;// find_by_order, order_of_key</span><br><span class="line">    //for different comparator use greater instead of less</span><br><span class="line">    void myerase(pbds &amp;t, ll int v)&#123;</span><br><span class="line">        ll int rank = t.order_of_key(v);//Number of elements that are less than v in t</span><br><span class="line">        pbds::iterator it = t.find_by_order(rank); //Iterator that points to the (rank+1)th element in t</span><br><span class="line">        t.erase(it);</span><br><span class="line">    &#125;</span><br><span class="line">    #define print_vector(v); for(int i=0;i&lt;v.size();i++)&#123;cout&lt;&lt;v[i]&lt;&lt;&quot; &quot;;&#125;cout&lt;&lt;endl;</span><br><span class="line">    ll int MOD1=1000000007;</span><br><span class="line">    ll int power_x_y(ll int x, ll int y)//logy time complexity//binary exponentiation</span><br><span class="line">    &#123;</span><br><span class="line">        ll int temp;</span><br><span class="line">        if (y == 0)</span><br><span class="line">            return 1;</span><br><span class="line">        temp = power_x_y(x, y / 2);</span><br><span class="line">        if (y % 2 == 0)</span><br><span class="line">            return (((temp)) * ((temp)));</span><br><span class="line">        else</span><br><span class="line">            return (((x)) *((temp)) * ((temp)));</span><br><span class="line">    &#125;</span><br><span class="line">    ll int power_x_y_p(ll int x, ll int y,ll int p)//logy time complexity//binary exponentiation</span><br><span class="line">    &#123;</span><br><span class="line">        ll int temp;</span><br><span class="line">        if (y == 0)</span><br><span class="line">            return 1;</span><br><span class="line">        temp = power_x_y_p(x, y / 2,p)%p;</span><br><span class="line">        if (y % 2 == 0)</span><br><span class="line">            return (((temp%p)) * ((temp%p)))%p;</span><br><span class="line">        else</span><br><span class="line">            return ((((x%p) *(temp%p))%p) * (temp%p))%p;</span><br><span class="line">    &#125;    </span><br><span class="line">    //for 8 it will return 1000</span><br><span class="line">    vector&lt;ll int&gt; binary_representation(ll int n)&#123;</span><br><span class="line">        vector&lt;ll int &gt;v;</span><br><span class="line">        while(n&gt;0)&#123;</span><br><span class="line">            v.push_back(n%2);</span><br><span class="line">            n/=2;</span><br><span class="line">        &#125;</span><br><span class="line">        reverse(v.begin(),v.end());</span><br><span class="line">        return v;</span><br><span class="line">    &#125;</span><br><span class="line">    void divisors(ll int n,vector&lt;ll int&gt;&amp;v)&#123;</span><br><span class="line">        for(ll int i=1;i&lt;=sqrt(n);i++)&#123;</span><br><span class="line">            if(n%i==0)&#123; </span><br><span class="line">                v.push_back(i);</span><br><span class="line">                if(n/i!=n and n/i!=i)&#123;</span><br><span class="line">                    v.push_back(n/i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(n!=1)v.push_back(n);</span><br><span class="line">        sort(v.begin(),v.end());</span><br><span class="line">    &#125;</span><br><span class="line">    void generate_all_k_length_subsequences_of_s(ll int index,string s,vector&lt;string&gt;&amp;storage,ll int k,string curr)&#123;</span><br><span class="line">        if(curr.size()==k)&#123;storage.push_back(curr);return;&#125;</span><br><span class="line">        if(index==s.size()) return ;</span><br><span class="line">        //not pick</span><br><span class="line">        generate_all_k_length_subsequences_of_s(index+1,s,storage,k,curr);</span><br><span class="line">        //pick</span><br><span class="line">        curr.push_back(s[index]);</span><br><span class="line">        generate_all_k_length_subsequences_of_s(index+1,s,storage,k,curr);</span><br><span class="line">        curr.pop_back();</span><br><span class="line">        return;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    void generate_all_subsets_of_s(ll int index,string s,vector&lt;string&gt;&amp;storage,string curr)&#123;</span><br><span class="line">        if(index==s.size())&#123;storage.push_back(curr);return;&#125;</span><br><span class="line">        //not pick</span><br><span class="line">        generate_all_subsets_of_s(index+1,s,storage,curr);</span><br><span class="line">        //pick</span><br><span class="line">        curr.push_back(s[index]);</span><br><span class="line">        generate_all_subsets_of_s(index+1,s,storage,curr);</span><br><span class="line">        curr.pop_back();</span><br><span class="line">        return;</span><br><span class="line"></span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">     </span><br><span class="line">    // Returns n^(-1) mod p</span><br><span class="line">    unsigned long long modInverse(unsigned long long n,  ll int p)</span><br><span class="line">    &#123;</span><br><span class="line">        return power_x_y_p(n, p - 2, p);</span><br><span class="line">    &#125;</span><br><span class="line">    unsigned long long nCrModPFermat( long long n,ll int r, ll int p)   //time taken by all the functions involved=O(n + logp)</span><br><span class="line">    &#123;</span><br><span class="line">        if (n &lt; r)</span><br><span class="line">            return 0;</span><br><span class="line">        if (r == 0)</span><br><span class="line">            return 1;</span><br><span class="line">        //fest calculation of the three fact values in one go</span><br><span class="line">        unsigned long long fac[n + 1];</span><br><span class="line">        fac[0] = 1;</span><br><span class="line">        for (int i = 1; i &lt;= n; i++)</span><br><span class="line">            fac[i] = (fac[i - 1] * i) % p;</span><br><span class="line">        return (((fac[n] * modInverse(fac[r], p)) % p)* (modInverse(fac[n - r], p) % p))% p;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">ll int getHighestSetBit(ll int n) &#123;</span><br><span class="line">    if (n == 0) return -1;</span><br><span class="line">    int position = 0;</span><br><span class="line">    </span><br><span class="line">    while (n &gt; 1) &#123; // Continue until n reduces to 1</span><br><span class="line">        n &gt;&gt;= 1;    // Right shift the number by 1</span><br><span class="line">        position++; // Increment the position counter</span><br><span class="line">    &#125;</span><br><span class="line">    return position; // Return the position of the highest set bit</span><br><span class="line">&#125;</span><br><span class="line">    bool isPrime(ll int n) </span><br><span class="line">    &#123; </span><br><span class="line">        // Corner cases </span><br><span class="line">        if (n &lt;= 1) </span><br><span class="line">            return false; </span><br><span class="line">        if (n &lt;= 3) </span><br><span class="line">            return true; </span><br><span class="line">      </span><br><span class="line">        // This is checked so that we can skip </span><br><span class="line">        // middle five numbers in below loop </span><br><span class="line">        if (n % 2 == 0 || n % 3 == 0) </span><br><span class="line">            return false; </span><br><span class="line">      </span><br><span class="line">        for (int i = 5; i * i &lt;= n; i = i + 6) </span><br><span class="line">            if (n % i == 0 || n % (i + 2) == 0) </span><br><span class="line">                return false; </span><br><span class="line">      </span><br><span class="line">        return true; </span><br><span class="line">    &#125; </span><br><span class="line">    vector&lt;ll int&gt; Sieve_to_store_primes(ll int n)</span><br><span class="line">    &#123;</span><br><span class="line">        bool prime[n + 1];memset(prime,1, sizeof(prime));</span><br><span class="line">        for (ll int p = 2; p&lt;= n; p++) &#123;</span><br><span class="line">            if (prime[p] ==1) &#123;</span><br><span class="line">                for (ll int i=p*2; i &lt;= n; i += p)</span><br><span class="line">                    prime[i] =0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;ll int&gt;v;</span><br><span class="line">        for (int p = 2; p &lt;= n; p++)&#123;</span><br><span class="line">            if (prime[p])&#123; </span><br><span class="line">                v.push_back(p);</span><br><span class="line">              &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return v;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;ll int&gt; Sieve_highest_lowest_primes(ll int n)</span><br><span class="line">    &#123;</span><br><span class="line">        bool prime[n + 1];memset(prime,1, sizeof(prime));</span><br><span class="line">        vector&lt;ll int&gt;hp(n+1);</span><br><span class="line">        vector&lt;ll int&gt;lp(n+1,0);</span><br><span class="line">        for (ll int p = 2; p &lt;= n; p++) &#123;</span><br><span class="line">            if (prime[p] ==1) &#123;</span><br><span class="line">                lp[p]=hp[p]=p;//if the number is a prime number then the lowest and the highest prime both are p</span><br><span class="line">                for (ll int i = p * 2; i &lt;= n; i += p)&#123;</span><br><span class="line">                    prime[i] = false;</span><br><span class="line">                    hp[i]=p;</span><br><span class="line">                    if(lp[i]==0)&#123;</span><br><span class="line">                        lp[i]=p;</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      return lp;//return hp;</span><br><span class="line">      //NOTE THAT THE HIGHEST PRIME AND THE LOWEST PRIME OF 0 AND 1 ARE MARKED AS 0</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;ll int&gt;&gt; Sieve_all_divisors(ll int n)&#123;</span><br><span class="line">        vector&lt;vector&lt;ll int&gt;&gt;v(n+1);</span><br><span class="line">        for(ll int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">            for(ll int j=i;j&lt;=n;j+=i)&#123;</span><br><span class="line">                v[j].push_back(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return v;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;ll int&gt;&gt; Sieve_all_prime_factors(ll int n)&#123;</span><br><span class="line">        vector&lt;ll int&gt;lp=Sieve_highest_lowest_primes(n);</span><br><span class="line">        vector&lt;vector&lt;ll int&gt;&gt;ans(n+1);//note that the prime factors of 0 and 1 are none</span><br><span class="line">        for(ll int i=2;i&lt;=n;i++)&#123;</span><br><span class="line">            ll int temp=i;</span><br><span class="line">            while(temp&gt;1)&#123;</span><br><span class="line">                ll int div=lp[temp];</span><br><span class="line">                ans[i].push_back(div);</span><br><span class="line">                while(temp%div==0)&#123;</span><br><span class="line">                    temp/=div;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ll int query_interactive(ll int x,ll int y)&#123;    </span><br><span class="line">        cout&lt;&lt;&quot;?&quot;&lt;&lt;&quot; &quot;&lt;&lt;x&lt;&lt;&quot; &quot;&lt;&lt;y&lt;&lt;endl;</span><br><span class="line">        ll int ans;</span><br><span class="line">        cin&gt;&gt;ans;</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line">    void print_interactive(ll int x,ll int y)&#123;</span><br><span class="line">        cout&lt;&lt;&quot;!&quot;&lt;&lt;&quot; &quot;&lt;&lt;x&lt;&lt;&quot; &quot;&lt;&lt;y&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    //__builtin_popcount(n) to count the number of set bits in a number//we can check if a number is a power of 2 using __builtin_popcount()</span><br><span class="line">    //__builtin_clz will count the number of leading zeroes</span><br><span class="line">    //reverse(v.begin(),v.end())//modifies the vector inplace</span><br><span class="line">    //sort(v.rbegin(), v.rend());//to sort a vector in reverse order</span><br><span class="line">    //sort(arr, arr + n, greater&lt;ll int&gt;());//sort an array in reverse order </span><br><span class="line">    //fib(n)*fib(n+1)=sum of square of all fibs before n</span><br><span class="line">    //there are approx n^1/3 divisors of a number </span><br><span class="line">    //there are approx loglogn number of distinct prime factors of a number</span><br><span class="line">    //there are approx n/logn different primes before a number n</span><br><span class="line">    //gcd knowledge:::</span><br><span class="line">    //gcd(a1,a2,a3,a4,a5..an)=gcd(a1,|a1-a2|,|a1-a3|,|a1-a4|,|a1-a5|....,|a1-an|)</span><br><span class="line">    //gcd(a,b)=gcd(a,b%a)    </span><br><span class="line"></span><br><span class="line">    //REMEMBER</span><br><span class="line">    //all primes till a number A : A*loglog(A)</span><br><span class="line">    //all highest primes till a number A: A*loglog(A)//all lowest primes till a number A: A*loglog(A)</span><br><span class="line">    //all the divisors of all numbers till a max number A: A*log(A)</span><br><span class="line">    //all the prime factors of N queries with max number A: A*loglog(A) + N*log(A)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    int main()&#123;</span><br><span class="line">        ios_base::sync_with_stdio(false);</span><br><span class="line">        cin.tie(NULL);ll int t;t=1;</span><br><span class="line">        ll int p=998244353;</span><br><span class="line">        for(int o=0;o&lt;t;o++)&#123;</span><br><span class="line">            ll int n;cin&gt;&gt;n;</span><br><span class="line">            ll int a[n+1]=&#123;0&#125;;</span><br><span class="line">            for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">                cin&gt;&gt;a[i];</span><br><span class="line">            &#125;</span><br><span class="line">            vector&lt;vector&lt;ll int&gt;&gt;dist=Sieve_all_prime_factors(*max_element(a+1,a+n+1));</span><br><span class="line">            for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">                vector&lt;ll int&gt;v=dist[a[i]];</span><br><span class="line">                ll int mul=1;</span><br><span class="line">                for(auto e:v)&#123;</span><br><span class="line">                    mul*=e;</span><br><span class="line">                &#125;</span><br><span class="line">                a[i]=mul;</span><br><span class="line">            &#125;</span><br><span class="line">            vector&lt;vector&lt;ll int&gt;&gt;divisors=Sieve_all_divisors(*max_element(a+1,a+n+1));</span><br><span class="line">/*            //testing</span><br><span class="line">            for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">                cout&lt;&lt;a[i]&lt;&lt;&quot; &quot;;</span><br><span class="line">            &#125;</span><br><span class="line">            cout&lt;&lt;endl;</span><br><span class="line">            for (auto e:dist)&#123;</span><br><span class="line">                for(auto e2:e)&#123;</span><br><span class="line">                    cout&lt;&lt;e2&lt;&lt;&quot; &quot;;</span><br><span class="line">                &#125;</span><br><span class="line">                cout&lt;&lt;endl;</span><br><span class="line">            &#125;</span><br><span class="line">            cout&lt;&lt;endl;cout&lt;&lt;endl;</span><br><span class="line">            for (auto e:divisors)&#123;</span><br><span class="line">                for(auto e2:e)&#123;</span><br><span class="line">                    cout&lt;&lt;e2&lt;&lt;&quot; &quot;;</span><br><span class="line">                &#125;</span><br><span class="line">                cout&lt;&lt;endl;</span><br><span class="line">            &#125;</span><br><span class="line">            cout&lt;&lt;&quot;TESTING 1 OVER&quot;&lt;&lt;endl;</span><br><span class="line">            //testing over*/</span><br><span class="line">            ll int temp[(*max_element(a+1,a+n+1))+1];memset(temp,0,sizeof(temp));</span><br><span class="line">            ll int dp[n+1]=&#123;0&#125;;</span><br><span class="line">            for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">                //cout&lt;&lt;&quot;i:&quot;&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">                ll int cnt=dist[a[i]].size();</span><br><span class="line">                //cout&lt;&lt;&quot;cnt:&quot;&lt;&lt;cnt&lt;&lt;endl;</span><br><span class="line">                ll int sum=0;</span><br><span class="line">                ll int mx=((1&lt;&lt;cnt)-1);</span><br><span class="line">                //cout&lt;&lt;&quot;mx:&quot;&lt;&lt;mx&lt;&lt;endl;</span><br><span class="line">                for(ll int j=1;j&lt;=mx;j++)&#123;</span><br><span class="line">                    ll int t=j;</span><br><span class="line">                    ll int pos=0;</span><br><span class="line">                    ll int x=1;ll int set=0;</span><br><span class="line">                    while(t&gt;0)&#123;</span><br><span class="line">                        if(t%2==1)&#123;</span><br><span class="line">                            x*=dist[a[i]][pos];set++;</span><br><span class="line">                        &#125;</span><br><span class="line">                        t/=2;</span><br><span class="line">                        pos++;</span><br><span class="line">/*                        cout&lt;&lt;&quot;pos:&quot;&lt;&lt;pos&lt;&lt;endl;</span><br><span class="line">                        cout&lt;&lt;&quot;t:&quot;&lt;&lt;t&lt;&lt;endl;</span><br><span class="line">                        cout&lt;&lt;&quot;x:&quot;&lt;&lt;x&lt;&lt;endl;*/</span><br><span class="line">                    &#125;</span><br><span class="line">                    ll int sign=1;if(set%2==0)sign=(ll int)(-1);</span><br><span class="line">                    sum+=temp[x]*sign;sum%=p;</span><br><span class="line">                &#125;</span><br><span class="line">                //cout&lt;&lt;&quot;sum:&quot;&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">                if(i==1)sum=1;</span><br><span class="line">                dp[i]=sum%p;</span><br><span class="line">                for(int j=0;j&lt;divisors[a[i]].size();j++)&#123;</span><br><span class="line">                    temp[divisors[a[i]][j]]+=sum;temp[divisors[a[i]][j]]%=p;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            cout&lt;&lt;((dp[n]%p)+p)%p&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>              </div>            </details><p>这份代码模板完全不想看究竟定义了什么，重载了什么，而且代码之间没有空格，显得十分紧凑，阅读观感也极差。因此，一份良好的代码起手模板只有两种：</p><ul><li>最基本的能保证运行的短代码模板</li><li>能够有着良好分区的长代码模板</li></ul><h3 id="算法模版"><a href="#算法模版" class="headerlink" title="算法模版"></a>算法模版</h3><p>良好的算法模板必须由lambda/namespace/struct/template/代码片段封装，以此保证代码的可移植性，可读性。算法模板一定不能是一段针对于该算法的模板题目可以运行的代码程序。</p><ol><li>lambda</li></ol><details class="folding-tag" ><summary> 查看代码 </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">djikstra(); djikstra(s); 不写默认s=1</span><br><span class="line"></span><br><span class="line">vector&lt;int&gt; dis(n + 1, 1E18);</span><br><span class="line">auto djikstra = [&amp;](int s = 1) -&gt; void &#123;</span><br><span class="line">    using PII = pair&lt;int, int&gt;;</span><br><span class="line">    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; q;</span><br><span class="line">    q.emplace(0, s);</span><br><span class="line">    dis[s] = 0;</span><br><span class="line">    vector&lt;int&gt; vis(n + 1);</span><br><span class="line">    while (!q.empty()) &#123;</span><br><span class="line">        int x = q.top().second;</span><br><span class="line">        q.pop();</span><br><span class="line">        if (vis[x]) continue;</span><br><span class="line">        vis[x] = 1;</span><br><span class="line">        for (auto [y, w] : ver[x]) &#123;</span><br><span class="line">            if (dis[y] &gt; dis[x] + w) &#123;</span><br><span class="line">                dis[y] = dis[x] + w;</span><br><span class="line">                q.emplace(dis[y], y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>              </div>            </details><ol><li>namespace</li></ol><details class="folding-tag" ><summary> 查看代码 </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line">Geometry::Point&lt;int&gt; a, b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">cout &lt;&lt; a + b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">namespace Geometry &#123; // 平面几何基础</span><br><span class="line">    using ld = long double;</span><br><span class="line">    const ld PI = acos(-1);</span><br><span class="line">    const ld EPS = 1e-7;</span><br><span class="line">    const ld INF = numeric_limits&lt;ld&gt;::max();</span><br><span class="line">    #define cc(x) cout &lt;&lt; fixed &lt;&lt; setprecision(x);</span><br><span class="line"></span><br><span class="line">    ld fgcd(ld x, ld y) &#123; // 实数域gcd</span><br><span class="line">        return abs(y) &lt; EPS ? abs(x) : fgcd(y, fmod(x, y));</span><br><span class="line">    &#125;</span><br><span class="line">    template&lt;class T, class S&gt; bool equal(T x, S y) &#123;</span><br><span class="line">        return -EPS &lt; x - y &amp;&amp; x - y &lt; EPS;</span><br><span class="line">    &#125;</span><br><span class="line">    template&lt;class T&gt; int sign(T x) &#123;</span><br><span class="line">        if (-EPS &lt; x &amp;&amp; x &lt; EPS) return 0;</span><br><span class="line">        return x &lt; 0 ? -1 : 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    template&lt;class T&gt; struct Point &#123; // 在C++17下使用 emplace_back 绑定可能会导致CE！</span><br><span class="line">        T x, y;</span><br><span class="line">        Point(T x_ = 0, T y_ = 0) : x(x_), y(y_) &#123;&#125; // 初始化</span><br><span class="line">        template&lt;class U&gt; operator Point&lt;U&gt;() &#123; // 自动类型匹配</span><br><span class="line">            return Point&lt;U&gt;(U(x), U(y));</span><br><span class="line">        &#125;</span><br><span class="line">        Point &amp;operator+=(Point p) &amp; &#123; return x += p.x, y += p.y, *this; &#125;</span><br><span class="line">        Point &amp;operator+=(T t) &amp; &#123; return x += t, y += t, *this; &#125;</span><br><span class="line">        Point &amp;operator-=(Point p) &amp; &#123; return x -= p.x, y -= p.y, *this; &#125;</span><br><span class="line">        Point &amp;operator-=(T t) &amp; &#123; return x -= t, y -= t, *this; &#125;</span><br><span class="line">        Point &amp;operator*=(T t) &amp; &#123; return x *= t, y *= t, *this; &#125;</span><br><span class="line">        Point &amp;operator/=(T t) &amp; &#123; return x /= t, y /= t, *this; &#125;</span><br><span class="line">        Point operator-() const &#123; return Point(-x, -y); &#125;</span><br><span class="line">        friend Point operator+(Point a, Point b) &#123; return a += b; &#125;</span><br><span class="line">        friend Point operator+(Point a, T b) &#123; return a += b; &#125;</span><br><span class="line">        friend Point operator-(Point a, Point b) &#123; return a -= b; &#125;</span><br><span class="line">        friend Point operator-(Point a, T b) &#123; return a -= b; &#125;</span><br><span class="line">        friend Point operator*(Point a, T b) &#123; return a *= b; &#125;</span><br><span class="line">        friend Point operator*(T a, Point b) &#123; return b *= a; &#125;</span><br><span class="line">        friend Point operator/(Point a, T b) &#123; return a /= b; &#125;</span><br><span class="line">        friend bool operator&lt;(Point a, Point b) &#123;</span><br><span class="line">            return equal(a.x, b.x) ? a.y &lt; b.y - EPS : a.x &lt; b.x - EPS;</span><br><span class="line">        &#125;</span><br><span class="line">        friend bool operator&gt;(Point a, Point b) &#123; return b &lt; a; &#125;</span><br><span class="line">        friend bool operator==(Point a, Point b) &#123; return !(a &lt; b) &amp;&amp; !(b &lt; a); &#125;</span><br><span class="line">        friend bool operator!=(Point a, Point b) &#123; return a &lt; b || b &lt; a; &#125;</span><br><span class="line">        friend auto &amp;operator&gt;&gt;(istream &amp;is, Point &amp;p) &#123;</span><br><span class="line">            return is &gt;&gt; p.x &gt;&gt; p.y;</span><br><span class="line">        &#125;</span><br><span class="line">        friend auto &amp;operator&lt;&lt;(ostream &amp;os, Point p) &#123;</span><br><span class="line">            return os &lt;&lt; &quot;(&quot; &lt;&lt; p.x &lt;&lt; &quot;, &quot; &lt;&lt; p.y &lt;&lt; &quot;)&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    template&lt;class T&gt; struct Line &#123;</span><br><span class="line">        Point&lt;T&gt; a, b;</span><br><span class="line">        Line(Point&lt;T&gt; a_ = Point&lt;T&gt;(), Point&lt;T&gt; b_ = Point&lt;T&gt;()) : a(a_), b(b_) &#123;&#125;</span><br><span class="line">        template&lt;class U&gt; operator Line&lt;U&gt;() &#123; // 自动类型匹配</span><br><span class="line">            return Line&lt;U&gt;(Point&lt;U&gt;(a), Point&lt;U&gt;(b));</span><br><span class="line">        &#125;</span><br><span class="line">        friend auto &amp;operator&lt;&lt;(ostream &amp;os, Line l) &#123;</span><br><span class="line">            return os &lt;&lt; &quot;&lt;&quot; &lt;&lt; l.a &lt;&lt; &quot;, &quot; &lt;&lt; l.b &lt;&lt; &quot;&gt;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    template&lt;class T&gt; T cross(Point&lt;T&gt; a, Point&lt;T&gt; b) &#123; // 叉乘</span><br><span class="line">        return a.x * b.y - a.y * b.x;</span><br><span class="line">    &#125;</span><br><span class="line">    template&lt;class T&gt;</span><br><span class="line">    T cross(Point&lt;T&gt; p1, Point&lt;T&gt; p2, Point&lt;T&gt; p0) &#123; // 叉乘 (p1 - p0) x (p2 - p0);</span><br><span class="line">        return cross(p1 - p0, p2 - p0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    template&lt;class T&gt; T dot(Point&lt;T&gt; a, Point&lt;T&gt; b) &#123; // 点乘</span><br><span class="line">        return a.x * b.x + a.y * b.y;</span><br><span class="line">    &#125;</span><br><span class="line">    template&lt;class T&gt; T dot(Point&lt;T&gt; p1, Point&lt;T&gt; p2, Point&lt;T&gt; p0) &#123; // 点乘 (p1 - p0) * (p2 - p0);</span><br><span class="line">        return dot(p1 - p0, p2 - p0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    template&lt;class T&gt; ld dis(T x1, T y1, T x2, T y2) &#123;</span><br><span class="line">        ld val = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);</span><br><span class="line">        return sqrt(val);</span><br><span class="line">    &#125;</span><br><span class="line">    template&lt;class T&gt; ld dis(Point&lt;T&gt; a, Point&lt;T&gt; b) &#123;</span><br><span class="line">        return dis(a.x, a.y, b.x, b.y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    template&lt;class T&gt; T dis1(Point&lt;T&gt; p1, Point&lt;T&gt; p2) &#123; // 曼哈顿距离公式</span><br><span class="line">        return abs(p1.x - p2.x) + abs(p1.y - p2.y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Point&lt;ld&gt; standardize(Point&lt;ld&gt; vec) &#123; // 转换为单位向量</span><br><span class="line">        return vec / sqrt(vec.x * vec.x + vec.y * vec.y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    template&lt;class T&gt; Point&lt;T&gt; rotate(Point&lt;T&gt; p1, Point&lt;T&gt; p2) &#123; // 旋转</span><br><span class="line">        Point&lt;T&gt; vec = p1 - p2;</span><br><span class="line">        return &#123;-vec.y, vec.x&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; // namespace Geometry</span><br></pre></td></tr></table></figure>              </div>            </details><ol><li>struct</li></ol><details class="folding-tag" ><summary> 查看代码 </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br></pre></td><td class="code"><pre><span class="line">const int base = 1000000000;</span><br><span class="line">const int base_digits = 9; // 分解为九个数位一个数字</span><br><span class="line">struct bigint &#123;</span><br><span class="line">    vector&lt;int&gt; a;</span><br><span class="line">    int sign;</span><br><span class="line"></span><br><span class="line">    bigint() : sign(1) &#123;&#125;</span><br><span class="line">    bigint operator-() const &#123;</span><br><span class="line">        bigint res = *this;</span><br><span class="line">        res.sign = -sign;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">    bigint(long long v) &#123;</span><br><span class="line">        *this = v;</span><br><span class="line">    &#125;</span><br><span class="line">    bigint(const string &amp;s) &#123;</span><br><span class="line">        read(s);</span><br><span class="line">    &#125;</span><br><span class="line">    void operator=(const bigint &amp;v) &#123;</span><br><span class="line">        sign = v.sign;</span><br><span class="line">        a = v.a;</span><br><span class="line">    &#125;</span><br><span class="line">    void operator=(long long v) &#123;</span><br><span class="line">        a.clear();</span><br><span class="line">        sign = 1;</span><br><span class="line">        if (v &lt; 0) sign = -1, v = -v;</span><br><span class="line">        for (; v &gt; 0; v = v / base) &#123;</span><br><span class="line">            a.push_back(v % base);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 基础加减乘除</span><br><span class="line">    bigint operator+(const bigint &amp;v) const &#123;</span><br><span class="line">        if (sign == v.sign) &#123;</span><br><span class="line">            bigint res = v;</span><br><span class="line">            for (int i = 0, carry = 0; i &lt; (int)max(a.size(), v.a.size()) || carry; ++i) &#123;</span><br><span class="line">                if (i == (int)res.a.size()) &#123;</span><br><span class="line">                    res.a.push_back(0);</span><br><span class="line">                &#125;</span><br><span class="line">                res.a[i] += carry + (i &lt; (int)a.size() ? a[i] : 0);</span><br><span class="line">                carry = res.a[i] &gt;= base;</span><br><span class="line">                if (carry) &#123;</span><br><span class="line">                    res.a[i] -= base;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return res;</span><br><span class="line">        &#125;</span><br><span class="line">        return *this - (-v);</span><br><span class="line">    &#125;</span><br><span class="line">    bigint operator-(const bigint &amp;v) const &#123;</span><br><span class="line">        if (sign == v.sign) &#123;</span><br><span class="line">            if (abs() &gt;= v.abs()) &#123;</span><br><span class="line">                bigint res = *this;</span><br><span class="line">                for (int i = 0, carry = 0; i &lt; (int)v.a.size() || carry; ++i) &#123;</span><br><span class="line">                    res.a[i] -= carry + (i &lt; (int)v.a.size() ? v.a[i] : 0);</span><br><span class="line">                    carry = res.a[i] &lt; 0;</span><br><span class="line">                    if (carry) &#123;</span><br><span class="line">                        res.a[i] += base;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                res.trim();</span><br><span class="line">                return res;</span><br><span class="line">            &#125;</span><br><span class="line">            return -(v - *this);</span><br><span class="line">        &#125;</span><br><span class="line">        return *this + (-v);</span><br><span class="line">    &#125;</span><br><span class="line">    void operator*=(int v) &#123;</span><br><span class="line">        check(v);</span><br><span class="line">        for (int i = 0, carry = 0; i &lt; (int)a.size() || carry; ++i) &#123;</span><br><span class="line">            if (i == (int)a.size()) &#123;</span><br><span class="line">                a.push_back(0);</span><br><span class="line">            &#125;</span><br><span class="line">            long long cur = a[i] * (long long)v + carry;</span><br><span class="line">            carry = (int)(cur / base);</span><br><span class="line">            a[i] = (int)(cur % base);</span><br><span class="line">        &#125;</span><br><span class="line">        trim();</span><br><span class="line">    &#125;</span><br><span class="line">    void operator/=(int v) &#123;</span><br><span class="line">        check(v);</span><br><span class="line">        for (int i = (int)a.size() - 1, rem = 0; i &gt;= 0; --i) &#123;</span><br><span class="line">            long long cur = a[i] + rem * (long long)base;</span><br><span class="line">            a[i] = (int)(cur / v);</span><br><span class="line">            rem = (int)(cur % v);</span><br><span class="line">        &#125;</span><br><span class="line">        trim();</span><br><span class="line">    &#125;</span><br><span class="line">    int operator%(int v) const &#123;</span><br><span class="line">        if (v &lt; 0) &#123;</span><br><span class="line">            v = -v;</span><br><span class="line">        &#125;</span><br><span class="line">        int m = 0;</span><br><span class="line">        for (int i = a.size() - 1; i &gt;= 0; --i) &#123;</span><br><span class="line">            m = (a[i] + m * (long long)base) % v;</span><br><span class="line">        &#125;</span><br><span class="line">        return m * sign;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void operator+=(const bigint &amp;v) &#123;</span><br><span class="line">        *this = *this + v;</span><br><span class="line">    &#125;</span><br><span class="line">    void operator-=(const bigint &amp;v) &#123;</span><br><span class="line">        *this = *this - v;</span><br><span class="line">    &#125;</span><br><span class="line">    bigint operator*(int v) const &#123;</span><br><span class="line">        bigint res = *this;</span><br><span class="line">        res *= v;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">    bigint operator/(int v) const &#123;</span><br><span class="line">        bigint res = *this;</span><br><span class="line">        res /= v;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">    void operator%=(const int &amp;v) &#123;</span><br><span class="line">        *this = *this % v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bool operator&lt;(const bigint &amp;v) const &#123;</span><br><span class="line">        if (sign != v.sign) return sign &lt; v.sign;</span><br><span class="line">        if (a.size() != v.a.size()) return a.size() * sign &lt; v.a.size() * v.sign;</span><br><span class="line">        for (int i = a.size() - 1; i &gt;= 0; i--)</span><br><span class="line">            if (a[i] != v.a[i]) return a[i] * sign &lt; v.a[i] * sign;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    bool operator&gt;(const bigint &amp;v) const &#123;</span><br><span class="line">        return v &lt; *this;</span><br><span class="line">    &#125;</span><br><span class="line">    bool operator&lt;=(const bigint &amp;v) const &#123;</span><br><span class="line">        return !(v &lt; *this);</span><br><span class="line">    &#125;</span><br><span class="line">    bool operator&gt;=(const bigint &amp;v) const &#123;</span><br><span class="line">        return !(*this &lt; v);</span><br><span class="line">    &#125;</span><br><span class="line">    bool operator==(const bigint &amp;v) const &#123;</span><br><span class="line">        return !(*this &lt; v) &amp;&amp; !(v &lt; *this);</span><br><span class="line">    &#125;</span><br><span class="line">    bool operator!=(const bigint &amp;v) const &#123;</span><br><span class="line">        return *this &lt; v || v &lt; *this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bigint abs() const &#123;</span><br><span class="line">        bigint res = *this;</span><br><span class="line">        res.sign *= res.sign;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">    void check(int v) &#123; // 检查输入的是否为负数</span><br><span class="line">        if (v &lt; 0) &#123;</span><br><span class="line">            sign = -sign;</span><br><span class="line">            v = -v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    void trim() &#123; // 去除前导零</span><br><span class="line">        while (!a.empty() &amp;&amp; !a.back()) a.pop_back();</span><br><span class="line">        if (a.empty()) sign = 1;</span><br><span class="line">    &#125;</span><br><span class="line">    bool isZero() const &#123; // 判断是否等于零</span><br><span class="line">        return a.empty() || (a.size() == 1 &amp;&amp; !a[0]);</span><br><span class="line">    &#125;</span><br><span class="line">    friend bigint gcd(const bigint &amp;a, const bigint &amp;b) &#123;</span><br><span class="line">        return b.isZero() ? a : gcd(b, a % b);</span><br><span class="line">    &#125;</span><br><span class="line">    friend bigint lcm(const bigint &amp;a, const bigint &amp;b) &#123;</span><br><span class="line">        return a / gcd(a, b) * b;</span><br><span class="line">    &#125;</span><br><span class="line">    void read(const string &amp;s) &#123;</span><br><span class="line">        sign = 1;</span><br><span class="line">        a.clear();</span><br><span class="line">        int pos = 0;</span><br><span class="line">        while (pos &lt; (int)s.size() &amp;&amp; (s[pos] == &#x27;-&#x27; || s[pos] == &#x27;+&#x27;)) &#123;</span><br><span class="line">            if (s[pos] == &#x27;-&#x27;) sign = -sign;</span><br><span class="line">            ++pos;</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i = s.size() - 1; i &gt;= pos; i -= base_digits) &#123;</span><br><span class="line">            int x = 0;</span><br><span class="line">            for (int j = max(pos, i - base_digits + 1); j &lt;= i; j++) x = x * 10 + s[j] - &#x27;0&#x27;;</span><br><span class="line">            a.push_back(x);</span><br><span class="line">        &#125;</span><br><span class="line">        trim();</span><br><span class="line">    &#125;</span><br><span class="line">    friend istream &amp;operator&gt;&gt;(istream &amp;stream, bigint &amp;v) &#123;</span><br><span class="line">        string s;</span><br><span class="line">        stream &gt;&gt; s;</span><br><span class="line">        v.read(s);</span><br><span class="line">        return stream;</span><br><span class="line">    &#125;</span><br><span class="line">    friend ostream &amp;operator&lt;&lt;(ostream &amp;stream, const bigint &amp;v) &#123;</span><br><span class="line">        if (v.sign == -1) stream &lt;&lt; &#x27;-&#x27;;</span><br><span class="line">        stream &lt;&lt; (v.a.empty() ? 0 : v.a.back());</span><br><span class="line">        for (int i = (int)v.a.size() - 2; i &gt;= 0; --i)</span><br><span class="line">            stream &lt;&lt; setw(base_digits) &lt;&lt; setfill(&#x27;0&#x27;) &lt;&lt; v.a[i];</span><br><span class="line">        return stream;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* 大整数乘除大整数部分 */</span><br><span class="line">    typedef vector&lt;long long&gt; vll;</span><br><span class="line">    bigint operator*(const bigint &amp;v) const &#123; // 大整数乘大整数</span><br><span class="line">        vector&lt;int&gt; a6 = convert_base(this-&gt;a, base_digits, 6);</span><br><span class="line">        vector&lt;int&gt; b6 = convert_base(v.a, base_digits, 6);</span><br><span class="line">        vll a(a6.begin(), a6.end());</span><br><span class="line">        vll b(b6.begin(), b6.end());</span><br><span class="line">        while (a.size() &lt; b.size()) a.push_back(0);</span><br><span class="line">        while (b.size() &lt; a.size()) b.push_back(0);</span><br><span class="line">        while (a.size() &amp; (a.size() - 1)) a.push_back(0), b.push_back(0);</span><br><span class="line">        vll c = karatsubaMultiply(a, b);</span><br><span class="line">        bigint res;</span><br><span class="line">        res.sign = sign * v.sign;</span><br><span class="line">        for (int i = 0, carry = 0; i &lt; (int)c.size(); i++) &#123;</span><br><span class="line">            long long cur = c[i] + carry;</span><br><span class="line">            res.a.push_back((int)(cur % 1000000));</span><br><span class="line">            carry = (int)(cur / 1000000);</span><br><span class="line">        &#125;</span><br><span class="line">        res.a = convert_base(res.a, 6, base_digits);</span><br><span class="line">        res.trim();</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">    friend pair&lt;bigint, bigint&gt; divmod(const bigint &amp;a1,</span><br><span class="line">                                       const bigint &amp;b1) &#123; // 大整数除大整数，同时返回答案与余数</span><br><span class="line">        int norm = base / (b1.a.back() + 1);</span><br><span class="line">        bigint a = a1.abs() * norm;</span><br><span class="line">        bigint b = b1.abs() * norm;</span><br><span class="line">        bigint q, r;</span><br><span class="line">        q.a.resize(a.a.size());</span><br><span class="line">        for (int i = a.a.size() - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">            r *= base;</span><br><span class="line">            r += a.a[i];</span><br><span class="line">            int s1 = r.a.size() &lt;= b.a.size() ? 0 : r.a[b.a.size()];</span><br><span class="line">            int s2 = r.a.size() &lt;= b.a.size() - 1 ? 0 : r.a[b.a.size() - 1];</span><br><span class="line">            int d = ((long long)base * s1 + s2) / b.a.back();</span><br><span class="line">            r -= b * d;</span><br><span class="line">            while (r &lt; 0) r += b, --d;</span><br><span class="line">            q.a[i] = d;</span><br><span class="line">        &#125;</span><br><span class="line">        q.sign = a1.sign * b1.sign;</span><br><span class="line">        r.sign = a1.sign;</span><br><span class="line">        q.trim();</span><br><span class="line">        r.trim();</span><br><span class="line">        return make_pair(q, r / norm);</span><br><span class="line">    &#125;</span><br><span class="line">    static vector&lt;int&gt; convert_base(const vector&lt;int&gt; &amp;a, int old_digits, int new_digits) &#123;</span><br><span class="line">        vector&lt;long long&gt; p(max(old_digits, new_digits) + 1);</span><br><span class="line">        p[0] = 1;</span><br><span class="line">        for (int i = 1; i &lt; (int)p.size(); i++) p[i] = p[i - 1] * 10;</span><br><span class="line">        vector&lt;int&gt; res;</span><br><span class="line">        long long cur = 0;</span><br><span class="line">        int cur_digits = 0;</span><br><span class="line">        for (int i = 0; i &lt; (int)a.size(); i++) &#123;</span><br><span class="line">            cur += a[i] * p[cur_digits];</span><br><span class="line">            cur_digits += old_digits;</span><br><span class="line">            while (cur_digits &gt;= new_digits) &#123;</span><br><span class="line">                res.push_back((int)(cur % p[new_digits]));</span><br><span class="line">                cur /= p[new_digits];</span><br><span class="line">                cur_digits -= new_digits;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res.push_back((int)cur);</span><br><span class="line">        while (!res.empty() &amp;&amp; !res.back()) res.pop_back();</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">    static vll karatsubaMultiply(const vll &amp;a, const vll &amp;b) &#123;</span><br><span class="line">        int n = a.size();</span><br><span class="line">        vll res(n + n);</span><br><span class="line">        if (n &lt;= 32) &#123;</span><br><span class="line">            for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">                for (int j = 0; j &lt; n; j++) &#123;</span><br><span class="line">                    res[i + j] += a[i] * b[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return res;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int k = n &gt;&gt; 1;</span><br><span class="line">        vll a1(a.begin(), a.begin() + k);</span><br><span class="line">        vll a2(a.begin() + k, a.end());</span><br><span class="line">        vll b1(b.begin(), b.begin() + k);</span><br><span class="line">        vll b2(b.begin() + k, b.end());</span><br><span class="line"></span><br><span class="line">        vll a1b1 = karatsubaMultiply(a1, b1);</span><br><span class="line">        vll a2b2 = karatsubaMultiply(a2, b2);</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; k; i++) a2[i] += a1[i];</span><br><span class="line">        for (int i = 0; i &lt; k; i++) b2[i] += b1[i];</span><br><span class="line"></span><br><span class="line">        vll r = karatsubaMultiply(a2, b2);</span><br><span class="line">        for (int i = 0; i &lt; (int)a1b1.size(); i++) r[i] -= a1b1[i];</span><br><span class="line">        for (int i = 0; i &lt; (int)a2b2.size(); i++) r[i] -= a2b2[i];</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; (int)r.size(); i++) res[i + k] += r[i];</span><br><span class="line">        for (int i = 0; i &lt; (int)a1b1.size(); i++) res[i] += a1b1[i];</span><br><span class="line">        for (int i = 0; i &lt; (int)a2b2.size(); i++) res[i + n] += a2b2[i];</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void operator*=(const bigint &amp;v) &#123;</span><br><span class="line">        *this = *this * v;</span><br><span class="line">    &#125;</span><br><span class="line">    bigint operator/(const bigint &amp;v) const &#123;</span><br><span class="line">        return divmod(*this, v).first;</span><br><span class="line">    &#125;</span><br><span class="line">    void operator/=(const bigint &amp;v) &#123;</span><br><span class="line">        *this = *this / v;</span><br><span class="line">    &#125;</span><br><span class="line">    bigint operator%(const bigint &amp;v) const &#123;</span><br><span class="line">        return divmod(*this, v).second;</span><br><span class="line">    &#125;</span><br><span class="line">    void operator%=(const bigint &amp;v) &#123;</span><br><span class="line">        *this = *this % v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>              </div>            </details><ol><li>template</li></ol><details class="folding-tag" ><summary> 查看代码 </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">template&lt;class T&gt; struct Frac &#123;</span><br><span class="line">    T x, y;</span><br><span class="line">    Frac() : Frac(0, 1) &#123;&#125;</span><br><span class="line">    Frac(T x_) : Frac(x_, 1) &#123;&#125;</span><br><span class="line">    Frac(T x_, T y_) : x(x_), y(y_) &#123;</span><br><span class="line">        if (y &lt; 0) &#123;</span><br><span class="line">            y = -y;</span><br><span class="line">            x = -x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    constexpr double val() const &#123;</span><br><span class="line">        return 1. * x / y;</span><br><span class="line">    &#125;</span><br><span class="line">    constexpr Frac norm() const &#123; // 调整符号、转化为最简形式</span><br><span class="line">        T p = gcd(x, y);</span><br><span class="line">        return &#123;x / p, y / p&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    friend constexpr auto &amp;operator&lt;&lt;(ostream &amp;o, const Frac &amp;j) &#123;</span><br><span class="line">        T p = gcd(j.x, j.y);</span><br><span class="line">        if (j.y == p) &#123;</span><br><span class="line">            return o &lt;&lt; j.x / p;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return o &lt;&lt; j.x / p &lt;&lt; &quot;/&quot; &lt;&lt; j.y / p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    constexpr Frac &amp;operator/=(const Frac &amp;i) &#123;</span><br><span class="line">        x *= i.y;</span><br><span class="line">        y *= i.x;</span><br><span class="line">        if (y &lt; 0) &#123;</span><br><span class="line">            x = -x;</span><br><span class="line">            y = -y;</span><br><span class="line">        &#125;</span><br><span class="line">        return *this;</span><br><span class="line">    &#125;</span><br><span class="line">    constexpr Frac &amp;operator+=(const Frac &amp;i) &#123;</span><br><span class="line">        x = x * i.y + y * i.x;</span><br><span class="line">        y *= i.y;</span><br><span class="line">        return *this;</span><br><span class="line">    &#125;</span><br><span class="line">    constexpr Frac &amp;operator-=(const Frac &amp;i) &#123;</span><br><span class="line">        x = x * i.y - y * i.x;</span><br><span class="line">        y *= i.y;</span><br><span class="line">        return *this;</span><br><span class="line">    &#125;</span><br><span class="line">    constexpr Frac &amp;operator*=(const Frac &amp;i) &#123;</span><br><span class="line">        x *= i.x;</span><br><span class="line">        y *= i.y;</span><br><span class="line">        return *this;</span><br><span class="line">    &#125;</span><br><span class="line">    friend constexpr Frac operator+(const Frac i, const Frac j) &#123; return i += j; &#125;</span><br><span class="line">    friend constexpr Frac operator-(const Frac i, const Frac j) &#123; return i -= j; &#125;</span><br><span class="line">    friend constexpr Frac operator*(const Frac i, const Frac j) &#123; return i *= j; &#125;</span><br><span class="line">    friend constexpr Frac operator/(const Frac i, const Frac j) &#123; return i /= j; &#125;</span><br><span class="line">    friend constexpr Frac operator-(const Frac i) &#123; return Frac(-i.x, i.y); &#125;</span><br><span class="line">    friend constexpr bool operator&lt;(const Frac i, const Frac j) &#123; return i.x * j.y &lt; i.y * j.x; &#125;</span><br><span class="line">    friend constexpr bool operator&gt;(const Frac i, const Frac j) &#123; return i.x * j.y &gt; i.y * j.x; &#125;</span><br><span class="line">    friend constexpr bool operator==(const Frac i, const Frac j) &#123; return i.x * j.y == i.y * j.x; &#125;</span><br><span class="line">    friend constexpr bool operator!=(const Frac i, const Frac j) &#123; return i.x * j.y != i.y * j.x; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>              </div>            </details><ol><li>代码片段</li></ol><details class="folding-tag" ><summary> 查看代码 </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">int mul(int a, int b, int m) &#123;</span><br><span class="line">    int r = a * b - m * (int)(1.L / m * a * b);</span><br><span class="line">    return r - m * (r &gt;= m) + m * (r &lt; 0);</span><br><span class="line">&#125;</span><br><span class="line">int mypow(int a, int b, int m) &#123;</span><br><span class="line">    int res = 1 % m;</span><br><span class="line">    for (; b; b &gt;&gt;= 1, a = mul(a, a, m)) &#123;</span><br><span class="line">        if (b &amp; 1) &#123;</span><br><span class="line">            res = mul(res, a, m);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int B[] = &#123;2, 3, 5, 7, 11, 13, 17, 19, 23&#125;;</span><br><span class="line">bool MR(int n) &#123;</span><br><span class="line">    if (n &lt;= 1) return 0;</span><br><span class="line">    for (int p : B) &#123;</span><br><span class="line">        if (n == p) return 1;</span><br><span class="line">        if (n % p == 0) return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    int m = (n - 1) &gt;&gt; __builtin_ctz(n - 1);</span><br><span class="line">    for (int p : B) &#123;</span><br><span class="line">        int t = m, a = mypow(p, m, n);</span><br><span class="line">        while (t != n - 1 &amp;&amp; a != 1 &amp;&amp; a != n - 1) &#123;</span><br><span class="line">            a = mul(a, a, n);</span><br><span class="line">            t *= 2;</span><br><span class="line">        &#125;</span><br><span class="line">        if (a != n - 1 &amp;&amp; t % 2 == 0) return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br><span class="line">int PR(int n) &#123;</span><br><span class="line">    for (int p : B) &#123;</span><br><span class="line">        if (n % p == 0) return p;</span><br><span class="line">    &#125;</span><br><span class="line">    auto f = [&amp;](int x) -&gt; int &#123;</span><br><span class="line">        x = mul(x, x, n) + 1;</span><br><span class="line">        return x &gt;= n ? x - n : x;</span><br><span class="line">    &#125;;</span><br><span class="line">    int x = 0, y = 0, tot = 0, p = 1, q, g;</span><br><span class="line">    for (int i = 0; (i &amp; 255) || (g = gcd(p, n)) == 1; i++, x = f(x), y = f(f(y))) &#123;</span><br><span class="line">        if (x == y) &#123;</span><br><span class="line">            x = tot++;</span><br><span class="line">            y = f(x);</span><br><span class="line">        &#125;</span><br><span class="line">        q = mul(p, abs(x - y), n);</span><br><span class="line">        if (q) p = q;</span><br><span class="line">    &#125;</span><br><span class="line">    return g;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;int&gt; fac(int n) &#123;</span><br><span class="line">    #define pb emplace_back</span><br><span class="line">    if (n == 1) return &#123;&#125;;</span><br><span class="line">    if (MR(n)) return &#123;n&#125;;</span><br><span class="line">    int d = PR(n);</span><br><span class="line">    auto v1 = fac(d), v2 = fac(n / d);</span><br><span class="line">    auto i1 = v1.begin(), i2 = v2.begin();</span><br><span class="line">    vector&lt;int&gt; ans;</span><br><span class="line">    while (i1 != v1.end() || i2 != v2.end()) &#123;</span><br><span class="line">        if (i1 == v1.end()) &#123;</span><br><span class="line">            ans.pb(*i2++);</span><br><span class="line">        &#125; else if (i2 == v2.end()) &#123;</span><br><span class="line">            ans.pb(*i1++);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if (*i1 &lt; *i2) &#123;</span><br><span class="line">                ans.pb(*i1++);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                ans.pb(*i2++);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><p>上述五份代码，如果有良好的C++代码阅读基础，很容易看得懂，可移植性也非常高，分别为迪杰斯特拉，平面几何，高精度运算，分数四则运算，素数检测。</p><p>每一份代码都保证了该种算法的大体最优时间复杂度，而不是未经优化的基础算法模版。</p><p>综上，一份良好的算法模版应具有如下几点要求：</p><ul><li>用lambda/namespace/struct/template/代码片段封装，大体为struct&gt;template&gt;namespace&gt;lambda&gt;代码片段封装，实际也需要根据算法的类型，长度，难易程度等来相应调整使用的方法。</li><li>具有优化后的大体最优时间复杂度</li><li>绝大多数情况是一段不可运行的代码，是算法模板，而不是可运行代码</li><li>保证可移植性，可读性等，例如Segt的模板不能只解决某一个特定区间问题，应该同时解决区间修改，区间询问等多种相关问题</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在平时写算法的时候看到别人的代码，有的时候代码很短，但是一言难尽；也有的人代码很长，但是却可以看得下去，几乎不影响观感。那么这就引申出一个问题，代码怎么写才能看起来更加的“规范”，“美观”，代码模板怎么写才能够保证“泛用性”，“可读性”。&lt;/p&gt;
&lt;h3 id=&quot;代码的格式</summary>
      
    
    
    
    
    <category term="XCPC" scheme="https://www.lansganbs.cn/tags/XCPC/"/>
    
  </entry>
  
  <entry>
    <title>个人训练赛20241211</title>
    <link href="https://www.lansganbs.cn/posts/ae028ed9.html"/>
    <id>https://www.lansganbs.cn/posts/ae028ed9.html</id>
    <published>2024-12-31T20:47:08.000Z</published>
    <updated>2025-07-02T11:40:03.112Z</updated>
    
    <content type="html"><![CDATA[<h1 id="个人训练赛20241211"><a href="#个人训练赛20241211" class="headerlink" title="个人训练赛20241211"></a>个人训练赛20241211</h1><ul><li><a href="#c-diamond-miner">C. Diamond Miner</a></li><li><a href="#c-mp3">C. MP3</a></li><li><a href="#d-nezzar-and-board">D. Nezzar and Board</a></li><li><a href="#e-hiking">E. Hiking</a></li></ul><hr><h3 id="E-Hiking"><a href="#E-Hiking" class="headerlink" title="E. Hiking"></a><a href="https://codeforces.com/contest/489/problem/E">E. Hiking</a></h3><p>Date：Aug.31, 2019 | Rating：2522 | Number of accepted:66(1.53%) | Number of attempts:185(4.30%) | Total:4303</p><p>Tag：二分 动态规划 数论和线性代数</p><p>可以涉及的算法：二分 DP 01分数规划</p><p>读完题意就可以转化为尽量减少$ \frac{\sum \sqrt{\left| l - r\right |}}{\sum b} $</p><p>下面介绍一下01分数规划问题：给定两个都包含$n$个正整数的正数数列{$a<em>1,a_2,a_3,…,a_n$}和{$b_1,b_2,b_3,…,b_n$}，同时选出k个a和b，求max$\frac{\sum</em>{i=1}^{n}a<em>i s_i }{\sum</em>{i=1}^{n}b<em>i s_i }$，其中$s_i=1$或$s_i=0$表示选或不选第$i$个数，且$\sum</em>{i=1}^{n} s_i=k$。</p><p>为了加快速度，我们可以用“猜”的方法，猜一个数$x$，使</p><ul><li>$\frac{\sum<em>{i=1}^{n}a_i s_i }{\sum</em>{i=1}^{n}b_i s_i } \ge x$</li></ul><p>移项得$f = \sum_{i=1}^{n}(a_i - x b_i)\ge k$</p><p>01分数规划有两种解决办法：二分法，Dinkelbach算法。</p><p>下面利用二分来找到零点：</p><p>我们需要最小化一个分式。经典的方法是将分式的最小化问题转化为参数$\lambda$的函数，然后通过二分法寻找最优的$\lambda$。</p><p>将原问题转化：</p><p>具体来说我们的目标是最小化：</p><p>$ \frac{\text{总挫败感}}{\text{所用休息点的风景值总和}} = \frac{\sum \sqrt{|l - r_j|}}{\sum b_j} $</p><ol><li>设目标函数为：</li></ol><p>$ \lambda = \frac{\sum \sqrt{|l - r_j|}}{\sum b_j} $</p><ol><li>为了最小化这个分式，我们可以令：</li></ol><p>$ \sum \sqrt{|l - r_j|} - \lambda \sum b_j = 0 $</p><ol><li>我们可以看成是对于给定的$\lambda$，判断是否存在一条路径，使得：</li></ol><p>$ \sum \sqrt{|l - r_j|} \leq \lambda \sum b_j $</p><ol><li>如果存在这样的路径，我们就尝试更小的$\lambda$；如果不存在，则尝试更大的$\lambda$。</li></ol><p>使用二分法寻找最优的$\lambda$：</p><ol><li>由于$\lambda$是连续的，我们可以在一个范围内对$\lambda$进行二分搜索，直到找到最小的$\lambda$。</li></ol><p>我们可以将休息点看成图中的节点，两个休息点之间的边权为：</p><p>$\text{边权} = \sqrt{|l - (x_i - x_j)|} - \lambda b_i$</p><p>其中，$ x_i $ 是休息点的坐标，$ b_i $是休息点的风景值。</p><p>我们需要找到从起点到终点的最小代价路径，使得总代价$\leq 0$。如果存在这样的路径，那么对于当前的 $\lambda$，答案就是可行的。</p><p>一些注意点：</p><p>实际上思路正确的话，除了二分应该不太会有导致WA的点</p><ul><li>二分的判断调节不是hi == lo，因为hi和lo是double，所以要设定一个极小值来进行比较，不然直接比较是有误差的<br>  不妨可以试一试下面的代码输出0还是1</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">double</span> a = <span class="number">0.1</span>, b = <span class="number">0.2</span>, c = <span class="number">0.3</span>;</span><br><span class="line">  cout &lt;&lt; (a + b == c) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上保留20位小数，a,b,c分别为0.10000000000000000555，0.20000000000000001110，0.29999999999999998890</p><p>最后这道题的时间复杂度为$O(n^{2}log(\sum\sqrt{|l - r_j|}))$</p><p>std：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> i64 = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2.01e6</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">1.01e3</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-7</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;C:/Users/70510/Desktop/Others/algo/debug.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(...) 42</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">double</span> l;</span><br><span class="line"><span class="type">double</span> x[N], b[N];</span><br><span class="line"><span class="type">double</span> d[N];</span><br><span class="line"><span class="type">int</span> pre[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">double</span> mid)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    d[i] = <span class="number">1e30</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  d[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  pre[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">      <span class="type">double</span> frustration = <span class="built_in">sqrt</span>(<span class="built_in">abs</span>(l - (x[i] - x[j])));</span><br><span class="line">      <span class="type">double</span> cost = d[j] + frustration - mid * b[i];</span><br><span class="line">      <span class="keyword">if</span> (d[i] &gt; cost) &#123;</span><br><span class="line">        d[i] = cost;</span><br><span class="line">        pre[i] = j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> d[n] &lt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  cin &gt;&gt; n &gt;&gt; l;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    cin &gt;&gt; x[i] &gt;&gt; b[i];</span><br><span class="line">  &#125;</span><br><span class="line">  x[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  b[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="type">double</span> lo = <span class="number">0</span>, hi = <span class="number">1e6</span>;</span><br><span class="line">  <span class="keyword">while</span> (hi - lo &gt; eps) &#123;</span><br><span class="line">    <span class="type">double</span> mid = (lo + hi) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) &#123;</span><br><span class="line">      hi = mid;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      lo = mid;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">check</span>(hi);</span><br><span class="line">  vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = n; i != <span class="number">-1</span>; i = pre[i]) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">      ans.<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">reverse</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)ans.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">    cout &lt;&lt; ans[i] &lt;&lt; <span class="string">&quot; \n&quot;</span>[i == (<span class="type">int</span>)ans.<span class="built_in">size</span>() - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">  cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// cin &gt;&gt; T;</span></span><br><span class="line">  <span class="keyword">while</span> (T--) <span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>01分数规划相关题目：<a href="http://poj.org/problem?id=2976">Dropping tests</a></p></blockquote><hr><h3 id="D-Nezzar-and-Board"><a href="#D-Nezzar-and-Board" class="headerlink" title="D. Nezzar and Board"></a><a href="https://codeforces.com/contest/1478/problem/D">D. Nezzar and Board</a></h3><p>Date：Jan.28, 2021 | Rating：1972 | Number of accepted:1244(7.68%) | Number of attempts:1672(10.33%) | Total:16192</p><p>Tag：构造 数学 数论</p><p>可以涉及的算法：裴蜀定理 二元线性丢番图方程</p><p>问题描述</p><p>给定一个整数序列$x_1, x_2, \dots, x_n$，可以进行以下操作任意次：</p><ul><li>选择任意两个整数 $x$ 和 $y$，计算$2x - y$，并将结果视为新的整数。</li></ul><p>现在，给定一个目标值$k$，问是否可以通过上述操作，从序列中的某个元素出发，经过若干次操作，得到$k$。</p><p>为了方便分析，我们先对操作进行等价变换，并理解其本质。</p><p>操作等价变换<br>原操作：$2x - y$</p><p>可以看作：</p><ol><li><p>$ 2x - y = x + x - y$<br> 这样，我们可以将操作视为：从一个元素$x$开始，加上任意两个数的差$x - y$。</p></li><li><p>由于$x - y$可以为正数或负数，因此，操作的本质是：从某个元素开始，加上任意数对的差。</p></li></ol><p>考虑序列元素之间的差，我们定义序列：</p><ul><li><p>$a<em>i = x_i - x</em>{i-1}$，对于$i = 2,3,\dots,n$<br>  这样，我们可以表示任意两个元素之间的差：</p></li><li><p>$x<em>i - x_j = \sum</em>{k = j+1}^{i} a_k$，当 $i &gt; j$<br>  因此，任意的$x_i$ 都可以表示为：</p></li><li><p>$x<em>i = x_1 + \sum</em>{k = 2}^{i} a_k$</p></li></ul><p>于是问题转化为：从某个$x_i $出发，通过加上若干个差$x_p - x_q$（即$ a$ 的线性组合），得到目标值$k$。</p><p>由于差 $x<em>p - x_q$可以表示为 $a $ 的线性组合，且系数为整数（可能为负数），因此，我们可以表示目标值与$x_i $之间的差为：<br>$k - x_i = z_1 a_1 + z_2 a_2 + \dots + z</em>{n-1} a_{n-1}$其中，$z_j$为整数。</p><p>那么就可以利用裴蜀定理：对于整数序列$a<em>1, a_2, \dots, a</em>{n-1}$，存在整数解$z<em>1, z_2, \dots, z</em>{n-1}$，使得线性组合等于某个值的充要条件是，该值是这些数的最大公约数$g$的倍数。</p><p>因此，我们的问题转化为： 是否存在序列中的某个元素$x_i$，使得$k - x_i$ 是$ g$的倍数。</p><p>注意到，所有的$x_i$都满足：$x_i \equiv x_1 \pmod{g}$</p><p>因为$x<em>i - x_1 = \sum</em>{k=2}^{i} a_k$，所以$x_i - x_1$ 是$g$的倍数。</p><p>因此，只需检查$k$是否与$ x_1 $同余于模$g$意义下，即： 如果$(k - x_1) \mod g = 0$，总体时间复杂度$O(nlog(max(x[i])))$。</p><p>另外通过丢番图方程入手也可以解决这道题目，手算前几项的递推式可以发现是线性丢番图方程，殊途同归。</p><p>科普一个没啥用的小知识：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::__gcd和std::gcd实现并不同，std::__gcd是euclid算法，std::gcd是stein算法，一般来说，随机数据后者效率高，但实际上没人卡这个就是了。</span><br></pre></td></tr></table></figure><p>std:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> i64 = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2.01e6</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">1.01e3</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;C:/Users/70510/Desktop/Others/algo/debug.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(...) 42</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> n, k;</span><br><span class="line">  cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">  <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">x</span><span class="params">(n)</span></span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    cin &gt;&gt; x[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> g = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">    g = __gcd(g, <span class="built_in">abs</span>(x[i] - x[i - <span class="number">1</span>]));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> delta = <span class="built_in">abs</span>(k - x[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">if</span> (delta % g == <span class="number">0</span>) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">  cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">  cin &gt;&gt; T;</span><br><span class="line">  <span class="keyword">while</span> (T--) <span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>裴蜀定理：<a href="https://www.luogu.com.cn/problem/P4549">【模板】裴蜀定理</a></p><p>裴蜀定理：<a href="https://codeforces.com/contest/510/problem/D">D. Fox And Jumping</a></p><p>裴蜀定理：<a href="https://acm.hdu.edu.cn/showproblem.php?pid=5512">Pagodas</a></p><p>裴蜀定理：<a href="http://poj.org/problem?id=1579">Function Run Fun</a></p><p>拓展欧几里得算法与二元丢番图方程的解：<a href="https://www.luogu.com.cn/problem/P1516">P1516 青蛙的约会</a></p></blockquote><hr><h3 id="C-Diamond-Miner"><a href="#C-Diamond-Miner" class="headerlink" title="C. Diamond Miner"></a><a href="https://codeforces.com/contest/1496/problem/C">C. Diamond Miner</a></h3><p>Date：March.10, 2021 | Rating：1176 | Number of accepted:5878(53.86%) | Number of attempts:6593 (60.41%) | Total:10914</p><p>Tag：计算几何 贪心 排序</p><p>题意：略</p><p>因为坐标每个象限都是等效的，所以我们可以把所有的坐标全都移到同一个想先，为了方便起见，全部都移到第一象限，保证坐标全部为正数，方便计算。</p><p>引用官方题解的一张图方便解释：</p><p><img src="https://www.helloimg.com/i/2024/12/31/6773e86e6ae45.png" alt="codeforces"></p><p>我们知道，在三角形中任意两边的长度大于第三遍的长度，在此假设有四个点$A,B,C,D$存在，有两种挖矿的方法</p><ol><li>$B$挖$C$ $D$挖$A$ 那么花费的能量为$|BC|+|AD|$</li><li>$B$挖$A$ $D$挖$C$ 那么花费的能量为$|AB|+|CD|=|AO|+|DO|+|BO|+|CO|&gt;|BC|+|AD|$</li></ol><p>显然如果想要花费的能量最小，就是让任意两条线段之间除了定点都不相交</p><p>可以将所有的点在$x$轴$y$轴上排序，累加所有的线段就可以得到最小值，时间复杂度为$O(nlogn)$</p><p>std:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> i64 = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2.01e6</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">1.01e3</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;C:/Users/70510/Desktop/Others/algo/debug.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(...) 42</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x[N], y[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  cin &gt;&gt; n;</span><br><span class="line">  vector&lt;<span class="type">double</span>&gt; xx;</span><br><span class="line">  vector&lt;<span class="type">double</span>&gt; yy;</span><br><span class="line">  <span class="type">int</span> totalPoints = n * <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; totalPoints; ++i) &#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">    cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">0</span>) &#123;</span><br><span class="line">      yy.<span class="built_in">push_back</span>(<span class="built_in">abs</span>(y));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (y == <span class="number">0</span>) &#123;</span><br><span class="line">      xx.<span class="built_in">push_back</span>(<span class="built_in">abs</span>(x));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">sort</span>(yy.<span class="built_in">begin</span>(), yy.<span class="built_in">end</span>());</span><br><span class="line">  <span class="built_in">sort</span>(xx.<span class="built_in">begin</span>(), xx.<span class="built_in">end</span>());</span><br><span class="line">  <span class="type">double</span> ans = <span class="number">0.0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="type">double</span> dis = <span class="built_in">sqrt</span>(yy[i] * yy[i] + xx[i] * xx[i]);</span><br><span class="line">    ans += dis;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; fixed &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">15</span>) &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">  cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">  cin &gt;&gt; T;</span><br><span class="line">  <span class="keyword">while</span> (T--) <span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="C-MP3"><a href="#C-MP3" class="headerlink" title="C. MP3"></a><a href="https://codeforces.com/contest/1199/problem/C">C. MP3</a></h3><p>Date：July 30, 2019 | Rating：1748 | Number of accepted:1884(26.85%) | Number of attempts:4402(62.74%) | Total:7016</p><p>Tag：双指针</p><p>题意：略</p><p>首先，我们需要计算在给定磁盘大小下，数组中最多可以有多少个不同的值。</p><p>每个值需要的位数为 $k = \lceil \log_2 K \rceil$，总共需要的位数为 $n \times k$。磁盘大小为 $I$ 字节，即 $8I$ 位。</p><p>因此，需要满足：$n \times k \leq 8I$，即：$k \leq \dfrac{8I}{n}$，由于 $k$ 为非负整数，我们取其下界。</p><p>然后，不同值的最大数量 $K$ 满足：$K \leq 2^k$，由于 $k = \lceil \log_2 K \rceil$，所以：$K \leq 2^{\frac{8I}{n}}$</p><p>但是，$K$ 最多为 $n$，因为数组长度为 $n$。</p><p>为了避免 $K$ 过大（当 $n$ 很小时，$2^{\frac{8I}{n}}$ 可能很大），我们可以设定一个上限，比如 $K_{\text{max}} = n$。</p><p>我们可以对数组进行预处理：排序+统计数组中不同元素的值及其出现次数， 进而滑动窗口寻找最优区间</p><p>我们的目标是：</p><ul><li>选择一个包含不超过 $K$ 个不同值的子区间（这些值是连续的，因为经过排序）；</li><li>使得在这个区间内的元素数量尽可能多，从而被修改的元素数量尽可能少；</li></ul><p>具体来讲：</p><ul><li>设定一个滑动窗口，初始化左端点和右端点；</li><li>枚举所有可能的左右端点组合，使得窗口内的不同值数量不超过 $K$；</li><li>计算每种情况下需要修改的元素数量，即总元素数减去窗口内的元素数量；</li><li>取需要修改元素数量最小的方案；</li></ul><p>总时间复杂度为 $O(n \log n)$。</p><p>std:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> i64 = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2.01e6</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">1.01e3</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;C:/Users/70510/Desktop/Others/algo/debug.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(...) 42</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> n, I;</span><br><span class="line">  cin &gt;&gt; n &gt;&gt; I;</span><br><span class="line">  <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    cin &gt;&gt; a[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">  vector&lt;<span class="type">int</span>&gt; val;</span><br><span class="line">  vector&lt;<span class="type">int</span>&gt; count;</span><br><span class="line">  <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">pre</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">  <span class="type">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == n || a[i] != a[i - <span class="number">1</span>]) &#123;</span><br><span class="line">      val.<span class="built_in">push_back</span>(a[i - <span class="number">1</span>]);</span><br><span class="line">      count.<span class="built_in">push_back</span>(cnt);</span><br><span class="line">      pre.<span class="built_in">push_back</span>(pre.<span class="built_in">back</span>() + cnt);</span><br><span class="line">      cnt = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> max_bits = (<span class="number">8</span> * I) / n;</span><br><span class="line">  <span class="type">int</span> K;</span><br><span class="line">  <span class="keyword">if</span> (max_bits &gt;= <span class="number">20</span>) &#123;</span><br><span class="line">    K = val.<span class="built_in">size</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    K = <span class="built_in">min</span>((<span class="type">int</span>)val.<span class="built_in">size</span>(), <span class="number">1LL</span> &lt;&lt; max_bits);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> cht = n;</span><br><span class="line">  <span class="type">int</span> tot_val = val.<span class="built_in">size</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> lo = <span class="number">0</span>, hi = <span class="number">0</span>; hi &lt; tot_val; hi++) &#123;</span><br><span class="line">    <span class="keyword">while</span> (hi - lo + <span class="number">1</span> &gt; K) &#123;</span><br><span class="line">      lo++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> unchanged = pre[hi + <span class="number">1</span>] - pre[lo];</span><br><span class="line">    <span class="type">int</span> changes = n - unchanged;</span><br><span class="line">    cht = <span class="built_in">min</span>(cht, changes);</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; cht &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">  cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// cin &gt;&gt; T;</span></span><br><span class="line">  <span class="keyword">while</span> (T--) <span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;个人训练赛20241211&quot;&gt;&lt;a href=&quot;#个人训练赛20241211&quot; class=&quot;headerlink&quot; title=&quot;个人训练赛20241211&quot;&gt;&lt;/a&gt;个人训练赛20241211&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#c-diamond-</summary>
      
    
    
    
    
    <category term="XCPC" scheme="https://www.lansganbs.cn/tags/XCPC/"/>
    
  </entry>
  
  <entry>
    <title>分块莫队</title>
    <link href="https://www.lansganbs.cn/posts/65b2d74f.html"/>
    <id>https://www.lansganbs.cn/posts/65b2d74f.html</id>
    <published>2024-12-30T21:34:19.000Z</published>
    <updated>2025-07-02T11:40:03.113Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分块算法"><a href="#分块算法" class="headerlink" title="分块算法"></a>分块算法</h1><h2 id="什么是分块算法"><a href="#什么是分块算法" class="headerlink" title="什么是分块算法"></a>什么是分块算法</h2><p>分块是一种思想，对整块整体处理，对零散快单独处理。</p><p>分块实际上就是暴力，不过可以被称为“优雅的暴力”。分块能解决很多类型的问题，很多算法也利用了分块的思想并进行优化。莫队的很多题目中也会一并使用分块来解决。</p><p>另外分块也可以分为图论分块，数论分块，字符串分块，数据结构分块等等，分块所设计的领域非常广，往往也可以使用分块来解决一些看似需要高深算法来解决的问题。</p><p>例如：<a href="https://www.luogu.com.cn/problem/P3372">P3372 【模板】线段树 1</a></p><p>显然利用现在所学知识无法在 $O(nlogn)$ 的时间复杂度下来解决此问题，那么这时我们可以考虑使用这种算法。</p><h2 id="何时分块"><a href="#何时分块" class="headerlink" title="何时分块"></a>何时分块</h2><p>再给出一个块，块长为$N$，要求求解区间 $[l,r]$ 的部分相关问题，如求解区间 $[l,r]$ 的最大值，最小值和区间和等问题。这时我们可以来维护区间 $[l,r]$内的块和附近的少量元素。</p><h2 id="如何分块"><a href="#如何分块" class="headerlink" title="如何分块"></a>如何分块</h2><h3 id="块长"><a href="#块长" class="headerlink" title="块长"></a>块长</h3><p>我们可以通过“猜”的方式来大致得出相对优秀的块长</p><ul><li>长度为$1$？长度为$n$？如分</li><li>长度为$\frac{n}{2}$ 依然很难维护</li><li>长度为$logn$ 需要维护$\frac{n}{logn}$的块 假设数据范围为$2e5$ 是大约$38000$个块</li><li>长度为$\sqrt{n}$ 需要维护$\sqrt{n}$的块 只需要维护$450$个块</li></ul><p>实际上 块的大小可以通过计算得出</p><p>若以顺序查找来确定块，则分块查找成功时的平均查找长度为</p><script type="math/tex; mode=display">ASL_{ls}=L_{b}+L_{w}=\frac{b+1}{2}+\frac{s+1}{2}=\frac{\frac{n}{s}+s}{2}+1=\frac{n+s^{2}}{2s}+1</script><p>$n$为查找表的长度，$s$为块的长度</p><p>$b=⌈\frac{n}{s}⌉$为块的个数。当$s=\sqrt{n}$时，$ASL_{ls}$取最小值$\sqrt{n}+1$</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li>$n$次询问，长度为$m$，时间复杂度为 $O(n\sqrt{m})$，准确来说为$O(n\sqrt{n}+n\sqrt{m})$</li></ul><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>我们具体需要维护的有如下三点：</p><ul><li>在前面的一部分零散的元素</li><li>中间的若干个整块</li><li>后面的一部分零散的元素</li></ul><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><p><a href="https://www.luogu.com.cn/problem/P3372">P3372 【模板】线段树 1</a></p><details class="folding-tag" ><summary> 查看代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;bits/extc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// using namespace __gnu_pbds;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ture true</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> flase false</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pow power</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) begin(x), end(x)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gcd(a, b) gcdint(a, b)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lcm(a, b) (a / gcd(a, b) * b)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(x) (int)x.size()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EPS 1e-7</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> i64 long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> i128 __int128</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> tcT template &lt;class T</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> tcTU tcT, class U</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">unsyncIO</span><span class="params">()</span> </span>&#123; cin.<span class="built_in">tie</span>(<span class="number">0</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setPrec</span><span class="params">()</span> </span>&#123; cout &lt;&lt; fixed &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">15</span>); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setIO</span><span class="params">()</span> </span>&#123; <span class="built_in">unsyncIO</span>(), <span class="built_in">setPrec</span>(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">gcdint</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> b ? <span class="built_in">gcdint</span>(b, a % b) : a; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> i128 <span class="title">gcd128</span><span class="params">(i128 a, i128 b)</span> </span>&#123; <span class="keyword">return</span> b ? <span class="built_in">gcd128</span>(b, a % b) : a; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">cdiv</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a / b + ((a ^ b) &gt; <span class="number">0</span> &amp;&amp; a % b); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">fdiv</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a / b - ((a ^ b) &lt; <span class="number">0</span> &amp;&amp; a % b); &#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; <span class="keyword">using</span> V = vector&lt;T&gt;;</span><br><span class="line">tcTU &gt; <span class="keyword">using</span> PR = pair&lt;T, U&gt;;</span><br><span class="line">tcTU &gt; <span class="keyword">using</span> MP = map&lt;T, U&gt;;</span><br><span class="line">tcTU &gt; <span class="keyword">using</span> VP = vector&lt;pair&lt;T, U&gt;&gt;;</span><br><span class="line">tcT &gt; <span class="keyword">using</span> pqg = priority_queue&lt;T, vector&lt;T&gt;, greater&lt;T&gt;&gt;;</span><br><span class="line">tcT &gt; <span class="keyword">using</span> pql = priority_queue&lt;T, vector&lt;T&gt;, less&lt;T&gt;&gt;;</span><br><span class="line"></span><br><span class="line">tcTU &gt; istream &amp;<span class="keyword">operator</span>&gt;&gt;(istream &amp;in, pair&lt;T, U&gt; &amp;a) &#123;</span><br><span class="line">  <span class="keyword">return</span> in &gt;&gt; a.first &gt;&gt; a.second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; istream &amp;<span class="keyword">operator</span>&gt;&gt;(istream &amp;in, vector&lt;T&gt; &amp;a) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) &#123;</span><br><span class="line">    in &gt;&gt; x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="type">const</span> pair&lt;T, U&gt; &amp;a) &#123;</span><br><span class="line">  <span class="keyword">return</span> out &lt;&lt; a.first &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; a.second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="type">const</span> vector&lt;pair&lt;T, U&gt;&gt; &amp;a) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) &#123;</span><br><span class="line">    out &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="type">const</span> vector&lt;T&gt; &amp;a) &#123;</span><br><span class="line">  <span class="type">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">  <span class="keyword">if</span> (!n) &#123;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">  &#125;</span><br><span class="line">  out &lt;&lt; a[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">    out &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; a[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, i128 n) &#123;</span><br><span class="line">  std::string s;</span><br><span class="line">  <span class="keyword">while</span> (n) &#123;</span><br><span class="line">    s += <span class="string">&#x27;0&#x27;</span> + n % <span class="number">10</span>;</span><br><span class="line">    n /= <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  std::<span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">  <span class="keyword">return</span> os &lt;&lt; s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">power</span><span class="params">(<span class="type">int</span> a, i64 b, <span class="type">int</span> p = <span class="number">1e9</span> + <span class="number">7</span>)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; b; b /= <span class="number">2</span>, a = <span class="number">1LL</span> * a * a % p) &#123;</span><br><span class="line">    <span class="keyword">if</span> (b % <span class="number">2</span>) &#123;</span><br><span class="line">      res = <span class="number">1LL</span> * res * a % p;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; <span class="function"><span class="type">bool</span> <span class="title">ckmin</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> b &lt; a ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line">tcT &gt; <span class="function"><span class="type">bool</span> <span class="title">ckmax</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; <span class="function"><span class="type">void</span> <span class="title">remDup</span><span class="params">(vector&lt;T&gt; &amp;v)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">sort</span>(<span class="built_in">all</span>(v));</span><br><span class="line">  v.<span class="built_in">erase</span>(<span class="built_in">unique</span>(<span class="built_in">all</span>(v)), <span class="built_in">end</span>(v));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; <span class="function"><span class="type">void</span> <span class="title">erase</span><span class="params">(T &amp;t, <span class="type">const</span> U &amp;u)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">auto</span> it = t.<span class="built_in">find</span>(u);</span><br><span class="line">  <span class="built_in">assert</span>(it != <span class="built_in">end</span>(t));</span><br><span class="line">  t.<span class="built_in">erase</span>(it);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; <span class="function">T <span class="title">fstTrue</span><span class="params">(T lo, T hi, U f)</span> </span>&#123;</span><br><span class="line">  hi++;</span><br><span class="line">  <span class="built_in">assert</span>(lo &lt;= hi);</span><br><span class="line">  <span class="keyword">while</span> (lo &lt; hi) &#123;</span><br><span class="line">    T mid = lo + (hi - lo) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">f</span>(mid) ? hi = mid : lo = mid + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> lo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; <span class="function">T <span class="title">lstTrue</span><span class="params">(T lo, T hi, U f)</span> </span>&#123;</span><br><span class="line">  lo--;</span><br><span class="line">  <span class="built_in">assert</span>(lo &lt;= hi);</span><br><span class="line">  <span class="keyword">while</span> (lo &lt; hi) &#123;</span><br><span class="line">    T mid = lo + (hi - lo + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">f</span>(mid) ? lo = mid : hi = mid - <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> lo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N = <span class="number">1.01e6</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> M = <span class="number">2.01e3</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;C:/Users/70510/Desktop/Others/algo/debug.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(...) 42</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[N], st[N], ed[N], sum[N], add[N], len, id[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (id[l] == id[r]) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= r; i++) &#123;</span><br><span class="line">      a[i] += k;</span><br><span class="line">      sum[id[i]] += k;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= ed[l]; i++) &#123;</span><br><span class="line">      a[i] += k;</span><br><span class="line">      sum[id[i]] += k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = st[r]; i &lt;= r; i++) &#123;</span><br><span class="line">      a[i] += k;</span><br><span class="line">      sum[id[i]] += k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = id[l] + <span class="number">1</span>; i &lt; id[r]; i++) &#123;</span><br><span class="line">      add[i] += k;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (id[l] == id[r]) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= r; i++) &#123;</span><br><span class="line">      ans += a[i] + add[id[i]];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= ed[l]; i++) &#123;</span><br><span class="line">      ans += a[i] + add[id[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = st[r]; i &lt;= r; i++) &#123;</span><br><span class="line">      ans += a[i] + add[id[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = id[l] + <span class="number">1</span>; i &lt; id[r]; i++) &#123;</span><br><span class="line">      ans += sum[i] + add[i] * (ed[i] - st[i] + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> n, m;</span><br><span class="line">  cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">  len = <span class="built_in">sqrt</span>(n);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    cin &gt;&gt; a[i];</span><br><span class="line">    id[i] = (i - <span class="number">1</span>) / len + <span class="number">1</span>;</span><br><span class="line">    st[i] = (id[i] - <span class="number">1</span>) * len + <span class="number">1</span>;</span><br><span class="line">    ed[i] = <span class="built_in">min</span>(id[i] * len, n);</span><br><span class="line">    sum[id[i]] += a[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">    <span class="type">int</span> op, x, y, k;</span><br><span class="line">    cin &gt;&gt; op &gt;&gt; x &gt;&gt; y;</span><br><span class="line">    <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">      cin &gt;&gt; k;</span><br><span class="line">      <span class="built_in">change</span>(x, y, k);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      cout &lt;&lt; <span class="built_in">query</span>(x, y) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">setIO</span>();</span><br><span class="line">  <span class="type">int</span> tt = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// cin &gt;&gt; tt;</span></span><br><span class="line">  <span class="keyword">while</span> (tt--) &#123;</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><p><a href="https://www.luogu.com.cn/problem/P3865">P3865 【模板】ST 表 &amp;&amp; RMQ 问题</a></p><details class="folding-tag" ><summary> 查看代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;bits/extc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// using namespace __gnu_pbds;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ture true</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> flase false</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pow power</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) begin(x), end(x)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gcd(a, b) gcdint(a, b)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lcm(a, b) (a / gcd(a, b) * b)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(x) (int)x.size()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EPS 1e-7</span></span><br><span class="line"><span class="comment">// #define int ll</span></span><br><span class="line"><span class="comment">// #define ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> i64 long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> i128 __int128</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> tcT template &lt;class T</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> tcTU tcT, class U</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">unsyncIO</span><span class="params">()</span> </span>&#123; cin.<span class="built_in">tie</span>(<span class="number">0</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setPrec</span><span class="params">()</span> </span>&#123; cout &lt;&lt; fixed &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">15</span>); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setIO</span><span class="params">()</span> </span>&#123; <span class="built_in">unsyncIO</span>(), <span class="built_in">setPrec</span>(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">gcdint</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> b ? <span class="built_in">gcdint</span>(b, a % b) : a; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> i128 <span class="title">gcd128</span><span class="params">(i128 a, i128 b)</span> </span>&#123; <span class="keyword">return</span> b ? <span class="built_in">gcd128</span>(b, a % b) : a; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">cdiv</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a / b + ((a ^ b) &gt; <span class="number">0</span> &amp;&amp; a % b); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">fdiv</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a / b - ((a ^ b) &lt; <span class="number">0</span> &amp;&amp; a % b); &#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; <span class="keyword">using</span> V = vector&lt;T&gt;;</span><br><span class="line">tcTU &gt; <span class="keyword">using</span> PR = pair&lt;T, U&gt;;</span><br><span class="line">tcTU &gt; <span class="keyword">using</span> MP = map&lt;T, U&gt;;</span><br><span class="line">tcTU &gt; <span class="keyword">using</span> VP = vector&lt;pair&lt;T, U&gt;&gt;;</span><br><span class="line">tcT &gt; <span class="keyword">using</span> pqg = priority_queue&lt;T, vector&lt;T&gt;, greater&lt;T&gt;&gt;;</span><br><span class="line">tcT &gt; <span class="keyword">using</span> pql = priority_queue&lt;T, vector&lt;T&gt;, less&lt;T&gt;&gt;;</span><br><span class="line"></span><br><span class="line">tcTU &gt; istream &amp;<span class="keyword">operator</span>&gt;&gt;(istream &amp;in, pair&lt;T, U&gt; &amp;a) &#123;</span><br><span class="line">  <span class="keyword">return</span> in &gt;&gt; a.first &gt;&gt; a.second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; istream &amp;<span class="keyword">operator</span>&gt;&gt;(istream &amp;in, vector&lt;T&gt; &amp;a) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) &#123;</span><br><span class="line">    in &gt;&gt; x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="type">const</span> pair&lt;T, U&gt; &amp;a) &#123;</span><br><span class="line">  <span class="keyword">return</span> out &lt;&lt; a.first &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; a.second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="type">const</span> vector&lt;pair&lt;T, U&gt;&gt; &amp;a) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) &#123;</span><br><span class="line">    out &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="type">const</span> vector&lt;T&gt; &amp;a) &#123;</span><br><span class="line">  <span class="type">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">  <span class="keyword">if</span> (!n) &#123;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">  &#125;</span><br><span class="line">  out &lt;&lt; a[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">    out &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; a[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, i128 n) &#123;</span><br><span class="line">  std::string s;</span><br><span class="line">  <span class="keyword">while</span> (n) &#123;</span><br><span class="line">    s += <span class="string">&#x27;0&#x27;</span> + n % <span class="number">10</span>;</span><br><span class="line">    n /= <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  std::<span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">  <span class="keyword">return</span> os &lt;&lt; s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">power</span><span class="params">(<span class="type">int</span> a, i64 b, <span class="type">int</span> p = <span class="number">1e9</span> + <span class="number">7</span>)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; b; b /= <span class="number">2</span>, a = <span class="number">1LL</span> * a * a % p) &#123;</span><br><span class="line">    <span class="keyword">if</span> (b % <span class="number">2</span>) &#123;</span><br><span class="line">      res = <span class="number">1LL</span> * res * a % p;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; <span class="function"><span class="type">bool</span> <span class="title">ckmin</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> b &lt; a ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line">tcT &gt; <span class="function"><span class="type">bool</span> <span class="title">ckmax</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; <span class="function"><span class="type">void</span> <span class="title">remDup</span><span class="params">(vector&lt;T&gt; &amp;v)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">sort</span>(<span class="built_in">all</span>(v));</span><br><span class="line">  v.<span class="built_in">erase</span>(<span class="built_in">unique</span>(<span class="built_in">all</span>(v)), <span class="built_in">end</span>(v));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; <span class="function"><span class="type">void</span> <span class="title">erase</span><span class="params">(T &amp;t, <span class="type">const</span> U &amp;u)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">auto</span> it = t.<span class="built_in">find</span>(u);</span><br><span class="line">  <span class="built_in">assert</span>(it != <span class="built_in">end</span>(t));</span><br><span class="line">  t.<span class="built_in">erase</span>(it);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; <span class="function">T <span class="title">fstTrue</span><span class="params">(T lo, T hi, U f)</span> </span>&#123;</span><br><span class="line">  hi++;</span><br><span class="line">  <span class="built_in">assert</span>(lo &lt;= hi);</span><br><span class="line">  <span class="keyword">while</span> (lo &lt; hi) &#123;</span><br><span class="line">    T mid = lo + (hi - lo) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">f</span>(mid) ? hi = mid : lo = mid + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> lo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; <span class="function">T <span class="title">lstTrue</span><span class="params">(T lo, T hi, U f)</span> </span>&#123;</span><br><span class="line">  lo--;</span><br><span class="line">  <span class="built_in">assert</span>(lo &lt;= hi);</span><br><span class="line">  <span class="keyword">while</span> (lo &lt; hi) &#123;</span><br><span class="line">    T mid = lo + (hi - lo + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">f</span>(mid) ? lo = mid : hi = mid - <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> lo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N = <span class="number">1.01e6</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> M = <span class="number">2.01e3</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;C:/Users/70510/Desktop/Others/algo/debug.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(...) 42</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> st[N], ed[N], mx[N], id[N], a[N], len;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> l, r;</span><br><span class="line">  cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">  <span class="keyword">if</span> (id[l] == id[r]) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= r; i++) &#123;</span><br><span class="line">      ans = <span class="built_in">max</span>(ans, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= ed[id[l]]; i++) &#123;</span><br><span class="line">      ans = <span class="built_in">max</span>(ans, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = st[id[r]]; i &lt;= r; i++) &#123;</span><br><span class="line">      ans = <span class="built_in">max</span>(ans, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = id[l] + <span class="number">1</span>; i &lt;= id[r] - <span class="number">1</span>; i++) &#123;</span><br><span class="line">      ans = <span class="built_in">max</span>(ans, mx[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> n, m;</span><br><span class="line">  cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">  len = <span class="built_in">sqrt</span>(n);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    cin &gt;&gt; a[i];</span><br><span class="line">    id[i] = (i - <span class="number">1</span>) / len + <span class="number">1</span>;</span><br><span class="line">    st[id[i]] = (id[i] - <span class="number">1</span>) * len + <span class="number">1</span>;</span><br><span class="line">    ed[id[i]] = id[i] * len;</span><br><span class="line">    mx[id[i]] = (i == st[id[i]]) ? a[i] : <span class="built_in">max</span>(mx[id[i]], a[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">query</span>() &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">setIO</span>();</span><br><span class="line">  <span class="type">int</span> tt = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// cin &gt;&gt; tt;</span></span><br><span class="line">  <span class="keyword">while</span> (tt--) &#123;</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="莫队算法"><a href="#莫队算法" class="headerlink" title="莫队算法"></a>莫队算法</h1><h2 id="莫队？"><a href="#莫队？" class="headerlink" title="莫队？"></a>莫队？</h2><p><img src="https://image.lansganbs.cn/c429a8ad9d965baabc976fb956b9bef.png" alt=""></p><p><img src="https://image.lansganbs.cn/4b466203c76f7407a370493f61dda68.png" alt=""></p><h2 id="何为莫队算法"><a href="#何为莫队算法" class="headerlink" title="何为莫队算法"></a>何为莫队算法</h2><p>为了解决区间问题，最开始的区间问题是前缀和，然后出现越来越难的问题，越来越困难的算法：分块，RMQ，树状数组，线段树等等，于是莫队算法出现，就是为了解决这类的区间问题。</p><h2 id="分块算法和莫队算法的异同"><a href="#分块算法和莫队算法的异同" class="headerlink" title="分块算法和莫队算法的异同"></a>分块算法和莫队算法的异同</h2><p>同：</p><ul><li>都是为了解决区间问题而存在</li></ul><p>异：</p><ul><li>莫队查询的更快 但是只能离线查询</li><li>分块查询的更慢 但是可以在线查询</li></ul><blockquote><p>离线查询：查询操作是在已知所有查询的情况下进行的。也就是说，在开始查询之前，所有的查询都已经确定并且可以提前处理。</p><p>在线查询：查询操作是在不知道所有查询内容的情况下进行的。每次查询时都立即处理，不会提前对查询进行任何优化。查询顺序通常是动态的。</p></blockquote><h2 id="莫队算法基本原理"><a href="#莫队算法基本原理" class="headerlink" title="莫队算法基本原理"></a>莫队算法基本原理</h2><p>利用双指针来进行区间的移动查询</p><h2 id="莫队算法的核心"><a href="#莫队算法的核心" class="headerlink" title="莫队算法的核心"></a>莫队算法的核心</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (l &gt; q[i].l) &#123;</span><br><span class="line">  <span class="built_in">add</span>(a[--l]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (r &lt; q[i].r) &#123;</span><br><span class="line">  <span class="built_in">add</span>(a[++r]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (l &lt; q[i].l) &#123;</span><br><span class="line">  <span class="built_in">del</span>(a[l++]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (r &gt; q[i].r) &#123;</span><br><span class="line">      <span class="built_in">del</span>(a[r--]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体实现</p><p><a href="https://www.luogu.com.cn/problem/P1494">P1494 [国家集训队] 小 Z 的袜子</a></p><details class="folding-tag" ><summary> 查看代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;bits/extc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// using namespace __gnu_pbds;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ture true</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> flase false</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pow power</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) begin(x), end(x)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gcd(a, b) gcdint(a, b)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lcm(a, b) (a / gcd(a, b) * b)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(x) (int)x.size()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EPS 1e-7</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> i64 long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> i128 __int128</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> tcT template &lt;class T</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> tcTU tcT, class U</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">unsyncIO</span><span class="params">()</span> </span>&#123; cin.<span class="built_in">tie</span>(<span class="number">0</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setPrec</span><span class="params">()</span> </span>&#123; cout &lt;&lt; fixed &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">15</span>); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setIO</span><span class="params">()</span> </span>&#123; <span class="built_in">unsyncIO</span>(), <span class="built_in">setPrec</span>(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">gcdint</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> b ? <span class="built_in">gcdint</span>(b, a % b) : a; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> i128 <span class="title">gcd128</span><span class="params">(i128 a, i128 b)</span> </span>&#123; <span class="keyword">return</span> b ? <span class="built_in">gcd128</span>(b, a % b) : a; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">cdiv</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a / b + ((a ^ b) &gt; <span class="number">0</span> &amp;&amp; a % b); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">fdiv</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a / b - ((a ^ b) &lt; <span class="number">0</span> &amp;&amp; a % b); &#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; <span class="keyword">using</span> V = vector&lt;T&gt;;</span><br><span class="line">tcTU &gt; <span class="keyword">using</span> PR = pair&lt;T, U&gt;;</span><br><span class="line">tcTU &gt; <span class="keyword">using</span> MP = map&lt;T, U&gt;;</span><br><span class="line">tcTU &gt; <span class="keyword">using</span> VP = vector&lt;pair&lt;T, U&gt;&gt;;</span><br><span class="line">tcT &gt; <span class="keyword">using</span> pqg = priority_queue&lt;T, vector&lt;T&gt;, greater&lt;T&gt;&gt;;</span><br><span class="line">tcT &gt; <span class="keyword">using</span> pql = priority_queue&lt;T, vector&lt;T&gt;, less&lt;T&gt;&gt;;</span><br><span class="line"></span><br><span class="line">tcTU &gt; istream &amp;<span class="keyword">operator</span>&gt;&gt;(istream &amp;in, pair&lt;T, U&gt; &amp;a) &#123;</span><br><span class="line">  <span class="keyword">return</span> in &gt;&gt; a.first &gt;&gt; a.second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; istream &amp;<span class="keyword">operator</span>&gt;&gt;(istream &amp;in, vector&lt;T&gt; &amp;a) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) &#123;</span><br><span class="line">    in &gt;&gt; x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="type">const</span> pair&lt;T, U&gt; &amp;a) &#123;</span><br><span class="line">  <span class="keyword">return</span> out &lt;&lt; a.first &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; a.second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="type">const</span> vector&lt;pair&lt;T, U&gt;&gt; &amp;a) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) &#123;</span><br><span class="line">    out &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="type">const</span> vector&lt;T&gt; &amp;a) &#123;</span><br><span class="line">  <span class="type">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">  <span class="keyword">if</span> (!n) &#123;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">  &#125;</span><br><span class="line">  out &lt;&lt; a[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">    out &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; a[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, i128 n) &#123;</span><br><span class="line">  std::string s;</span><br><span class="line">  <span class="keyword">while</span> (n) &#123;</span><br><span class="line">    s += <span class="string">&#x27;0&#x27;</span> + n % <span class="number">10</span>;</span><br><span class="line">    n /= <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  std::<span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">  <span class="keyword">return</span> os &lt;&lt; s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">power</span><span class="params">(<span class="type">int</span> a, i64 b, <span class="type">int</span> p = <span class="number">1e9</span> + <span class="number">7</span>)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; b; b /= <span class="number">2</span>, a = <span class="number">1LL</span> * a * a % p) &#123;</span><br><span class="line">    <span class="keyword">if</span> (b % <span class="number">2</span>) &#123;</span><br><span class="line">      res = <span class="number">1LL</span> * res * a % p;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; <span class="function"><span class="type">bool</span> <span class="title">ckmin</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> b &lt; a ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line">tcT &gt; <span class="function"><span class="type">bool</span> <span class="title">ckmax</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; <span class="function"><span class="type">void</span> <span class="title">remDup</span><span class="params">(vector&lt;T&gt; &amp;v)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">sort</span>(<span class="built_in">all</span>(v));</span><br><span class="line">  v.<span class="built_in">erase</span>(<span class="built_in">unique</span>(<span class="built_in">all</span>(v)), <span class="built_in">end</span>(v));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; <span class="function"><span class="type">void</span> <span class="title">erase</span><span class="params">(T &amp;t, <span class="type">const</span> U &amp;u)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">auto</span> it = t.<span class="built_in">find</span>(u);</span><br><span class="line">  <span class="built_in">assert</span>(it != <span class="built_in">end</span>(t));</span><br><span class="line">  t.<span class="built_in">erase</span>(it);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; <span class="function">T <span class="title">fstTrue</span><span class="params">(T lo, T hi, U f)</span> </span>&#123;</span><br><span class="line">  hi++;</span><br><span class="line">  <span class="built_in">assert</span>(lo &lt;= hi);</span><br><span class="line">  <span class="keyword">while</span> (lo &lt; hi) &#123;</span><br><span class="line">    T mid = lo + (hi - lo) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">f</span>(mid) ? hi = mid : lo = mid + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> lo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; <span class="function">T <span class="title">lstTrue</span><span class="params">(T lo, T hi, U f)</span> </span>&#123;</span><br><span class="line">  lo--;</span><br><span class="line">  <span class="built_in">assert</span>(lo &lt;= hi);</span><br><span class="line">  <span class="keyword">while</span> (lo &lt; hi) &#123;</span><br><span class="line">    T mid = lo + (hi - lo + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">f</span>(mid) ? lo = mid : hi = mid - <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> lo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N = <span class="number">1.01e6</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> M = <span class="number">2.01e3</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;C:/Users/70510/Desktop/Others/algo/debug.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(...) 42</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[N], sum, ans1[N], len, ans2[N], cnt[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">query</span> &#123;</span><br><span class="line">  <span class="type">int</span> l, r, id;</span><br><span class="line">&#125; q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">  sum += cnt[x];</span><br><span class="line">  cnt[x]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">  cnt[x]--;</span><br><span class="line">  sum -= cnt[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> n, m;</span><br><span class="line">  cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">  len = <span class="built_in">sqrt</span>(n);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    cin &gt;&gt; a[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">    cin &gt;&gt; q[i].l &gt;&gt; q[i].r;</span><br><span class="line">    q[i].id = i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">sort</span>(q + <span class="number">1</span>, q + m + <span class="number">1</span>, [](<span class="type">const</span> query &amp;lhs, <span class="type">const</span> query &amp;rhs) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((lhs.l - <span class="number">1</span>) / len != (rhs.l - <span class="number">1</span>) / len) <span class="keyword">return</span> lhs.l &lt; rhs.l;</span><br><span class="line">    <span class="keyword">return</span> lhs.r &lt; rhs.r;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, l = <span class="number">1</span>, r = <span class="number">0</span>; i &lt;= m; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (q[i].l == q[i].r) &#123;</span><br><span class="line">      ans1[q[i].id] = <span class="number">0</span>;</span><br><span class="line">      ans2[q[i].id] = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (l &gt; q[i].l) &#123;</span><br><span class="line">      <span class="built_in">add</span>(a[--l]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (r &lt; q[i].r) &#123;</span><br><span class="line">      <span class="built_in">add</span>(a[++r]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; q[i].l) &#123;</span><br><span class="line">      <span class="built_in">del</span>(a[l++]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (r &gt; q[i].r) &#123;</span><br><span class="line">      <span class="built_in">del</span>(a[r--]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sum == <span class="number">0</span>) &#123;</span><br><span class="line">      ans1[q[i].id] = <span class="number">0</span>;</span><br><span class="line">      ans2[q[i].id] = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ans1[q[i].id] = sum;</span><br><span class="line">    ans2[q[i].id] = (r - l + <span class="number">1</span>) * (r - l) / <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> t = __gcd(ans1[q[i].id], ans2[q[i].id]);</span><br><span class="line">    ans1[q[i].id] /= t;</span><br><span class="line">    ans2[q[i].id] /= t;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">    cout &lt;&lt; ans1[i] &lt;&lt; <span class="string">&#x27;/&#x27;</span> &lt;&lt; ans2[i] &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">setIO</span>();</span><br><span class="line">  <span class="type">int</span> tt = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// cin &gt;&gt; tt;</span></span><br><span class="line">  <span class="keyword">while</span> (tt--) &#123;</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="普通莫队的优化"><a href="#普通莫队的优化" class="headerlink" title="普通莫队的优化"></a>普通莫队的优化</h2><h3 id="奇偶排序优化"><a href="#奇偶排序优化" class="headerlink" title="奇偶排序优化"></a>奇偶排序优化</h3><p>对于如下数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">设块的大小为2</span><br><span class="line">1 1</span><br><span class="line">2 100</span><br><span class="line">3 1</span><br><span class="line">4 100</span><br></pre></td></tr></table></figure><p>经过排序后的等效数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 1</span><br><span class="line">2 100</span><br><span class="line">3 1</span><br><span class="line">4 100</span><br></pre></td></tr></table></figure><p>手动模拟一下可以发现， 指针的移动次数大概为$ 300 $次，我们处理完第一个<strong>块</strong>之后$(l=2，r=100)$，此时只需要移动2次指针到$l=4, r=100$就可以得到第四个询问的答案，再移动$100$次到$l=3，r=1$就可以得到第三次询问的答案，但是我们却将指针移动$100$次到$l=3，r=1$来获取第三个询问的答案，再移动$100$次到$l=4，r=100$获取第四个询问的答案，这样多了$98$次的指针移动。我们怎么优化这个地方呢？</p><p>这里我们就要用到奇偶化排序。什么是奇偶化排序？奇偶化排序即对于属于奇数块的询问，$r$按从小到大排序，对于属于偶数块的排序，$r$从大到小排序，这样我们的$r$指针在处理完这个奇数块的问题后，将在返回的途中处理偶数块的问题，再向$n$移动处理下一个奇数块的问题，优化了$r$指针的移动次数，理论上能快一倍。</p><p>优化后并排序后的等效数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 1</span><br><span class="line">2 100</span><br><span class="line">4 100</span><br><span class="line">3 1</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sort</span>(q + <span class="number">1</span>, q + m + <span class="number">1</span>, [](<span class="type">const</span> query &amp;lhs, <span class="type">const</span> query &amp;rhs) &#123;</span><br><span class="line">  <span class="keyword">if</span> ((lhs.l - <span class="number">1</span>) / len != (rhs.l - <span class="number">1</span>) / len) &#123;</span><br><span class="line">    <span class="keyword">return</span> lhs.l &lt; rhs.l;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (((lhs.l - <span class="number">1</span>) / len + <span class="number">1</span>) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> lhs.r &lt; rhs.r;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> lhs.r &gt; rhs.r;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> pos[a.l] ^ pos[b.l] ? pos[a.l] &lt; pos[b.l] : pos[a.l] &amp; <span class="number">1</span> ? a.r &lt; b.r : a.r &gt; b.r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="块的大小优化"><a href="#块的大小优化" class="headerlink" title="块的大小优化"></a>块的大小优化</h3><p><img src="https://image.lansganbs.cn/3dc519dbaf652671aede8d985a65f0a.png" alt="image-20241230191612258"></p><p>网上大多都说分块大小取$\sqrt{n}$最优，此时时间复杂度为$O(n\sqrt{n})$，实际上这是不严谨的，当$n$，$m$差距较大时使用$\sqrt{n}$作为分块大小效率会明显降低。</p><hr><p>普通莫队时间复杂度的证明：</p><p>具体证明方法有多种：</p><ul><li>第一种（By yihang_01）</li></ul><p><img src="https://image.lansganbs.cn/19bc00440f08e2d1be9e30ffaadb0c9.png" alt=""></p><ul><li>第二种</li></ul><ol><li>排序$O(nlogn)$</li><li><img src="https://image.lansganbs.cn/c92c8a01fd9ddb78df37b912eedbbe7.png" alt=""><br>网页渲染有点问题，所以贴了张图片。</li><li>右端点在一个左端点相同的块内是有序的，那么对于每一个块$i$中的$x_{i}$个区间，右端点最多跳完整的一个序列（就是不会往回跳），一共有 $\sqrt{n}$ 个块，所以总时间复杂度为 $O(n\sqrt{n})$</li></ol><ul><li>第三种</li></ul><p>分块相同时，右端点递增是$O(n)$的，分块共有$O(\sqrt{n})$个，复杂度为$n^{1.5}$</p><p>分块转移时，右端点最多变化$N$，分块共有$O(\sqrt{n})$个，复杂度为$n^{1.5}$</p><p>分块相同时，左端点最多变化$\sqrt{n}$，分块转移时，左端点最多变化$2\sqrt{n}$</p><p>共有$N$个询问，复杂度为$n^{1.5}$</p><p>综上，$n$次询问，长度为$m$，块大小为$\sqrt{m}$的莫队，时间复杂度为$O(n\sqrt{m})$。</p><hr><p>普通莫队最优块长的证明：</p><p>设每一块的大小为$T$，序列长为$n$，询问个数为$m$。</p><p>那么最多有$\frac{n}{T}$块。</p><p>对于右端点的移动，每一块最多移动$n$次，有$\frac{n}{T}$块，所以右端点时间复杂度为$ O\left(\frac{n^2}{T}\right)$。</p><p>对于左端点的移动，每一次最多移动$T$次，有$m$次移动，所以左端点时间复杂度为$O(mT)$。</p><p>那么总时间复杂度为$O\left(\frac{n^2}{T} + mT\right)$。</p><p>设$\frac{n^2}{T} + mT = S$。</p><p>原式等于$n^2 + mT^2 - ST = 0$。</p><p>这样变为一个经典的二次函数求最小值的问题。</p><p>$\Delta = S^2 - 4mn^2 \geq 0$</p><p>为取到最小值，$\Delta = 0$。</p><p>那么$S^2 - 4mn^2 = 0$。</p><p>$S^2 = 4mn^2$</p><p>$S = 2\sqrt{mn}$</p><p>代入回 $x = -\frac{b}{2a} + \frac{\sqrt{\Delta}}{2a}$</p><p>算出 $T = \frac{n}{\sqrt{m}}$</p><h2 id="其他莫队"><a href="#其他莫队" class="headerlink" title="其他莫队"></a>其他莫队</h2><h3 id="带修莫队"><a href="#带修莫队" class="headerlink" title="带修莫队"></a>带修莫队</h3><p>前面说过，普通莫队只能解决没有修改的问题，那么如果想解决修改问题呢？</p><p><a href="https://www.luogu.com.cn/problem/P1903">P1903 [国家集训队] 数颜色 / 维护队列</a></p><p>那就需要带修莫队，带修莫队就是一种支持修改查询的莫队。</p><p>当然，这是一道在线问题，但我们可以把这个在线问题转化为离线问题。</p><p>普通莫队是把点经过排序，下一次询问是从上一次询问转移而来，但是有修改的问题在经过排序后，查询的结果也会随着排序而改变，把所有的修改操作加上一个时间戳 $[l,r,time]$。</p><p>排序规则：第一关键字为左端点所在块 $\frac{l}{B}$，第二关键字为右端点所在块 $\frac{r}{B}$，第三关键字是时间 $t$。</p><p>每次询问先做区间拓展，再考虑时间戳，也就是之前的修改对当次查询的影响。</p><p>(1) $j$ &gt; $i$，则把 $i+1$ 到 $j$ 个修改的贡献加上</p><p>(2) $j$ &lt; $i$，则把 $i$ 到 $j+1$ 个修改的贡献还原</p><h4 id="带修莫队的时间复杂度及最优块长的证明"><a href="#带修莫队的时间复杂度及最优块长的证明" class="headerlink" title="带修莫队的时间复杂度及最优块长的证明"></a>带修莫队的时间复杂度及最优块长的证明</h4><p>块的大小为 $B^{\frac{2}{3}}$,修改个数为 $c$，询问次数为 $q$，则总移动次数为 $O(\frac{cn^{2}}{B^{2}}+qB+\frac{n^{2}}{B})$，操作次数为 $m$ 的话，则为 $O(\frac{mn^{2}}{B^{2}}+mB+\frac{n^{2}}{B})$。</p><p>$B$ 可以取</p><script type="math/tex; mode=display">B=\frac{n^2}{3^{\frac{1}{2}}(9m^3n^2+\sqrt{3}\sqrt{27m^6n^4-m^3n^6})^{\frac{1}{3}}}+ \frac{(9m^3n^2+\sqrt{3}\sqrt{27m^6n^4 - m^3n^6})^{\frac{1}{3}}}{3^{\frac{2}{3}}m}</script><p>正常写题时肯定不会去算这么离谱的一个块长 $B$，直接视作 $n=m$ 的话，就可以得到总移动次数为 $O(\frac{n^{3}}{B^{2}}+nB+\frac{n^{2}}{B})$，那么当 $B=n^{\frac{2}{3}}$ 时，取得最小值，此时最小值为 $O(n^{\frac{5}{3}})$。</p><hr><p>同样，对于最优块长也可以做如下证明：</p><p>可以这么认为，序列的值是随着时间而变化的。</p><p>那我们就在坐标系上再加上一个时间维度，用 $(l,r,t)$ 来表示一个查询</p><p><img src="https://image.lansganbs.cn/d760b75d3c996adfbc90dff45450846.png" alt=""></p><p>很明显，我们需要分别按照l与r分块，在同一块内的询问按照t从小到大完成。块的大小就是 $n^{\frac{2}{3}}$，只是这个粗略得出的块长只是相对优秀的，而不是最优。</p><p>综上，带修莫队的渐进时间复杂度为 $O(nlogn+n^{\frac{5}{3}})$（视作$n=m$），认为是 $O(n^{\frac{5}{3}})$。</p><h4 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h4><p>对于询问，我们记录以下值：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">kkk</span> &#123;</span><br><span class="line">  <span class="type">int</span> l;<span class="comment">//左端点</span></span><br><span class="line">  <span class="type">int</span> r;<span class="comment">//右端点</span></span><br><span class="line">  <span class="type">int</span> t;<span class="comment">//此询问前修改数量</span></span><br><span class="line">  <span class="type">int</span> id;<span class="comment">//询问编号</span></span><br><span class="line">&#125;q[N];</span><br></pre></td></tr></table></figure><p>对于修改，我们记录以下值：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ttt</span> &#123;</span><br><span class="line">  <span class="type">int</span> id;<span class="comment">//修改位置</span></span><br><span class="line">  <span class="type">int</span> val;<span class="comment">//修改值</span></span><br><span class="line">&#125;c[N];</span><br></pre></td></tr></table></figure></p><p>将原来值对答案的影响抹去，再将修改值对答案的影响加上，然后更新该位置的值<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> add(x) &#123;</span></span><br><span class="line">  <span class="keyword">if</span>(++vis[x]==<span class="number">1</span>)sum++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> del(x) &#123;</span></span><br><span class="line">  <span class="keyword">if</span>(--vis[x]==<span class="number">0</span>)sum--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(c[x].id&gt;=l&amp;&amp;c[x].id&lt;=r) &#123;</span><br><span class="line">    <span class="built_in">del</span>(v[c[x].id]);</span><br><span class="line">    <span class="built_in">add</span>(c[x].val);</span><br><span class="line">  &#125;<span class="comment">//改变影响</span></span><br><span class="line">  <span class="built_in">swap</span>(c[x].val,v[c[x].id]);<span class="comment">//值更新 *</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">while</span>(now&lt;q[i].t)<span class="built_in">change</span>(++now);<span class="comment">//修改</span></span><br><span class="line"><span class="keyword">while</span>(now&gt;q[i].t)<span class="built_in">change</span>(now--);<span class="comment">//修改</span></span><br></pre></td></tr></table></figure></p><blockquote><p>这道题能转化为离线的根本原因是这一次的查询并不需要使用上一次的查询结果，只是题目让我们立即返回查询结果，但当次结果只是依赖于之前的修改，而不是依赖于之前的查询，所以我们给修改打上一个时间戳就可以了。</p></blockquote><details class="folding-tag" ><summary> 查看代码 By huangce </summary>              <div class='content'>              <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int ll</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> M = <span class="number">2e3</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="type">int</span> mq, mr;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">op</span> &#123;</span><br><span class="line">  <span class="type">int</span> l, r;</span><br><span class="line">  <span class="type">int</span> idx, tim;</span><br><span class="line">  <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> op&amp; that) <span class="type">const</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (l / len != that.l / len) <span class="keyword">return</span> l &lt; that.l;</span><br><span class="line">    <span class="keyword">if</span> (r / len != that.r / len) <span class="keyword">return</span> r &lt; that.r;</span><br><span class="line">    <span class="keyword">return</span> tim &lt; that.tim;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; q[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">modify</span> &#123;</span><br><span class="line">  <span class="type">int</span> p, c;</span><br><span class="line">&#125; R[N];</span><br><span class="line"><span class="type">int</span> a[N], cnt[N];</span><br><span class="line"><span class="type">int</span> ans[N];</span><br><span class="line"><span class="type">int</span> res;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (cnt[x] == <span class="number">0</span>) res++;</span><br><span class="line">  cnt[x]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">  cnt[x]--;</span><br><span class="line">  <span class="keyword">if</span> (cnt[x] == <span class="number">0</span>) res--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">  len = <span class="built_in">pow</span>(n, <span class="number">2.0</span> / <span class="number">3.0</span>);</span><br><span class="line">  <span class="type">int</span> l, r;</span><br><span class="line">  <span class="type">char</span> ch;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    cin &gt;&gt; a[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">    cin &gt;&gt; ch &gt;&gt; l &gt;&gt; r;</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;Q&#x27;</span>)</span><br><span class="line">      q[++mq] = &#123;l, r, mq, mr&#125;;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      R[++mr] = &#123;l, r&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">sort</span>(q + <span class="number">1</span>, q + <span class="number">1</span> + mq);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, l = <span class="number">1</span>, r = <span class="number">0</span>, x = <span class="number">0</span>; i &lt;= mq; i++) &#123;</span><br><span class="line">    <span class="keyword">while</span> (q[i].l &lt; l) <span class="built_in">add</span>(a[--l]);</span><br><span class="line">    <span class="keyword">while</span> (r &lt; q[i].r) <span class="built_in">add</span>(a[++r]);</span><br><span class="line">    <span class="keyword">while</span> (l &lt; q[i].l) <span class="built_in">del</span>(a[l++]);</span><br><span class="line">    <span class="keyword">while</span> (q[i].r &lt; r) <span class="built_in">del</span>(a[r--]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 时间戳</span></span><br><span class="line">    <span class="comment">// 要将 a[pos] 和 R[x].c 交换，而不能用其他变量代替，因为需要来回滚动</span></span><br><span class="line">    <span class="keyword">while</span> (x &lt; q[i].tim) &#123;</span><br><span class="line">      ++x;  <span class="comment">// 先加</span></span><br><span class="line">      <span class="type">int</span> pos = R[x].p;</span><br><span class="line">      <span class="comment">// 修改数在区间内</span></span><br><span class="line">      <span class="keyword">if</span> (l &lt;= pos &amp;&amp; pos &lt;= r) &#123;</span><br><span class="line">        <span class="built_in">add</span>(R[x].c);</span><br><span class="line">        <span class="built_in">del</span>(a[pos]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">swap</span>(a[pos], R[x].c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (x &gt; q[i].tim) &#123;</span><br><span class="line">      <span class="type">int</span> pos = R[x].p;</span><br><span class="line">      <span class="keyword">if</span> (l &lt;= pos &amp;&amp; pos &lt;= r) &#123;</span><br><span class="line">        <span class="built_in">add</span>(R[x].c);</span><br><span class="line">        <span class="built_in">del</span>(a[pos]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">swap</span>(a[pos], R[x].c);</span><br><span class="line">      x--;  <span class="comment">// 后减</span></span><br><span class="line">    &#125;</span><br><span class="line">    ans[q[i].idx] = res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= mq; i++) &#123;</span><br><span class="line">    cout &lt;&lt; ans[i] &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">  cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">  cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="type">int</span> T = <span class="number">1</span>;  <span class="comment">// cin&gt;&gt;T;</span></span><br><span class="line">  <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="回滚莫队"><a href="#回滚莫队" class="headerlink" title="回滚莫队"></a>回滚莫队</h3><p>当删除或增加的其中一个在操作时，不能或者不方便统计答案时，可以尝试使用回滚莫队解决。</p><p>原题链接</p><p><a href="https://www2.ioi-jp.org/camp/2014/2014-sp-tasks/2014-sp-d1.pdf">歴史の研究(Historical Research)</a></p><p><a href="https://www2.ioi-jp.org/camp/2014/2014-sp-tasks/index.html">第１３回日本情報オリンピック　春季トレーニング合宿</a></p><p>zh-CN链接</p><p><a href="https://vjudge.net/contest/603288#problem/K">歴史の研究</a></p><h4 id="实现过程-1"><a href="#实现过程-1" class="headerlink" title="实现过程"></a>实现过程</h4><ol><li>对于左右端点在同一块的暴力计算。</li><li>跟普通莫队一样排序，左端点换块时清空答案，把左指针设为左端点所在块的下一块的开头，把右指针设为左端点所在块的最后一位。这样右指针是单调递增的，每处理一个询问时，先记录一些信息（比如答案），再左移左指针并更新答案，然后把左指针移回左端点所在块的下一块的开头，过程中回滚除记录下的信息以外的其它影响，最后把记录下的信息恢复。如：先右移右指针，再记录 $ans$，然后左移左指针时增加 $cnt$ 并更新 $ans$，回滚时把增加的 $cnt$ 减掉，最后把 $ans$ 回滚为记录的值。</li></ol><details class="folding-tag" ><summary> 查看代码 By yihang_01 </summary>              <div class='content'>              <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> ONLINE_JUDGE</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N = <span class="number">1e3</span> + <span class="number">7</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, a[N], len, cnt1[N], cnt2[N], ans[N], st[N], ed[N], id[N], b[N], p;<span class="comment">//cnt1 为统计数字个数的桶，cnt2 为处理暴力结果的桶，ans 为答案数组，b 为离散化后的数组，p 为离散化后的数组长度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">query</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r, id;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> query &amp;rhs) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (::id[l] != ::id[rhs.l]) <span class="keyword">return</span> l &lt; rhs.l;</span><br><span class="line">        <span class="keyword">return</span> r &lt; rhs.r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> &amp;tmp)</span> </span>&#123;</span><br><span class="line">    ++cnt1[x];</span><br><span class="line">    tmp = <span class="built_in">max</span>(tmp, cnt1[x] * b[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; --cnt1[x]; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    len = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        b[i] = a[i];</span><br><span class="line">        id[i] = (i - <span class="number">1</span>) / len + <span class="number">1</span>;</span><br><span class="line">        st[i] = (id[i] - <span class="number">1</span>) * len + <span class="number">1</span>;</span><br><span class="line">        ed[i] = <span class="built_in">min</span>(id[i] * len, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        cin &gt;&gt; q[i].l &gt;&gt; q[i].r;</span><br><span class="line">        q[i].id = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(q + <span class="number">1</span>, q + m + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 离散化</span></span><br><span class="line">    <span class="built_in">sort</span>(b + <span class="number">1</span>, b + n + <span class="number">1</span>);</span><br><span class="line">    p = <span class="built_in">unique</span>(b + <span class="number">1</span>, b + n + <span class="number">1</span>) - b - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        a[i] = <span class="built_in">lower_bound</span>(b + <span class="number">1</span>, b + p + <span class="number">1</span>, a[i]) - b;<span class="comment">//a 数组现在存放的是离散化后的值</span></span><br><span class="line">    <span class="type">int</span> now = <span class="number">0</span>, last = <span class="number">0</span>, lstl = <span class="number">0</span>, tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, l = <span class="number">1</span>, r = <span class="number">0</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (id[q[i].l] == id[q[i].r]) &#123;  <span class="comment">// 左右区间属于同一块则进行暴力处理答案</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = q[i].l; j &lt;= q[i].r; j++) ++cnt2[a[j]];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = q[i].l; j &lt;= q[i].r; j++)</span><br><span class="line">                ans[q[i].id] = <span class="built_in">max</span>(ans[q[i].id], cnt2[a[j]] * b[a[j]]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = q[i].l; j &lt;= q[i].r; j++) --cnt2[a[j]];</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 访问到了新的块，先把上一个块的答案清空</span></span><br><span class="line">        <span class="keyword">if</span> (id[q[i].l] != last) &#123;           </span><br><span class="line">            <span class="keyword">while</span> (r &gt; ed[q[i].l]) <span class="built_in">del</span>(a[r--]);   <span class="comment">// 右指针移至上一个区间的右端点</span></span><br><span class="line">            <span class="keyword">while</span> (l &lt;= ed[q[i].l]) <span class="built_in">del</span>(a[l++]);  <span class="comment">// 左指针右移至下一个区间的左端点</span></span><br><span class="line">            tmp = <span class="number">0</span>;</span><br><span class="line">            last = id[q[i].l];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 扩展右指针</span></span><br><span class="line">        <span class="keyword">while</span> (r &lt; q[i].r) <span class="built_in">add</span>(a[++r], tmp);</span><br><span class="line">        lstl = l;  <span class="comment">// 准确来说 l 才是原先的左指针</span></span><br><span class="line">        now = tmp;  <span class="comment">// 非常重要</span></span><br><span class="line">        <span class="comment">// 扩展左指针</span></span><br><span class="line">        <span class="keyword">while</span> (lstl &gt; q[i].l) <span class="built_in">add</span>(a[--lstl], now);</span><br><span class="line">        ans[q[i].id] = now;</span><br><span class="line">        <span class="comment">// 回滚左指针</span></span><br><span class="line">        <span class="keyword">while</span> (lstl &lt; l) <span class="built_in">del</span>(a[lstl++]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) cout &lt;&lt; ans[i] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">NULL</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// cin&gt;&gt;T;</span></span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// system(&quot;pause&quot;);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="树上莫队"><a href="#树上莫队" class="headerlink" title="树上莫队"></a>树上莫队</h3><p>莫队算法的出现正是为了解决部分数据结构相关问题而存在，当然可以上树。</p><p><a href="https://www.luogu.com.cn/problem/P2325">P2325 [SCOI2005] 王室联邦</a>这道题目可以说是专为树上莫队设计的题目。</p><h4 id="分块方式"><a href="#分块方式" class="headerlink" title="分块方式"></a>分块方式</h4><p>这里提供一种构造方式，证明略。</p><p>dfs，并创建一个栈，dfs一个点时先记录初始栈顶高度，每dfs完当前节点的一棵子树就判断栈内（相对于刚开始dfs时）新增节点的数量是否≥B，是则将栈内所有新增点分为同一块，核心点为当前dfs的点，当前节点结束dfs时将当前节点入栈，整个dfs结束后将栈内所有剩余节点归入已经分好的最后一个块。</p><details class="folding-tag" ><summary> 查看代码 </summary>              <div class='content'>              <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">auto</span> dfs = [&amp;](<span class="keyword">auto</span> &amp;&amp;self, <span class="keyword">auto</span> u, <span class="keyword">auto</span> fa) -&gt; <span class="keyword">auto</span> &#123;</span><br><span class="line">    <span class="type">int</span> t = top;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = nxt[i]) &#123;</span><br><span class="line">      <span class="type">int</span> v = to[i];</span><br><span class="line">      <span class="keyword">if</span> (v != fa) &#123;</span><br><span class="line">        <span class="built_in">dfs</span>(v, u);</span><br><span class="line">        <span class="keyword">if</span> (top - t &gt;= B) &#123;</span><br><span class="line">          key[++tot] = u;</span><br><span class="line">          <span class="keyword">while</span> (top &gt; t) bl[stk[top--]] = tot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stk[++top] = u;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> (!tot) ++tot;</span><br><span class="line">  key[tot] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (top) bl[stk[top--]] = tot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><p>lambda函数原本是不支持递归的，但是有几种方法使其支持递归：</p><ol><li><p>传入参数 auto &amp;&amp;self 如 <code>auto dfs = [&amp;](auto &amp;&amp;self, auto u, auto fa) -&gt; auto</code> 递归时使用self递归</p></li><li><p>采用匿名函数 如 <code>function&lt;void(int,int)&gt; dfs = [&amp;](auto u,auto fa) -&gt; auto</code> 递归时使用原函数名递归</p></li><li><p>采用Deducing this特性 如 <code>auto dfs = [&amp;] self(auto u, auto fa) -&gt; auto</code> 递归时使用self名递归</p></li></ol><p>为什么lambda自身在定义时无法被调用</p><ol><li><p>匿名性：Lambda 表达式是匿名的，编译器在定义时不为其生成名称，因此无法在其内部直接引用或调用自己。</p></li><li><p>捕获和名称：在 lambda 定义时，虽然可以捕获外部变量，但不能直接引用自身，因为 lambda 的名字在定义时尚未确定。</p></li></ol><blockquote><p>auto dfs = … 的写法只是将一个 Lambda 表达式赋值给名为dfs的变量，并没有定义一个真正的命名函数。它本质上是一个匿名函数，只是通过auto dfs来保存该变量，而非声明了一个具名函数。</p></blockquote><h4 id="修改方式"><a href="#修改方式" class="headerlink" title="修改方式"></a>修改方式</h4><p>所谓“修改”，就是由询问 $(cu, cv)$ 更新至询问 $(tu, tv)$。</p><p>如果把两条路径上的点全部修改，复杂度是和暴力一样的，所以需要做一些处理。</p><p>$T(u, v)$ 表示 $u$ 到 $v$ 的路径上除 $lca(u, v)$ 外的所有点构成的集合，$S(u, v)$ 代表$u$ 到$v$的路径，$xor$表示集合对称差（就跟异或差不多）。</p><ol><li>两个指针 $cu, cv$（相当于序列队的 $l, r$ 两个指针），$ans$ 记录 $T(cu, cv)$ 的答案，$vis$ 数组记录每个节点是否在 $T(cu, cv)$内。</li><li>由 $T(cu, cv)$ 更新至 $T(tu, tv)$ 时，将 $T(cu, tu)$和 $T(cv, tv)$的 $vis$分别取反，并相应地更新答案。</li><li>将答案记录到 $out$ 数组（离线后用于输出那个）时对 $lca(cu, cv)$（此时的 $cu, cv$ 已更新为上一步中的 $tu, tv$）的 $vis$ 取反并更新答案，记录完再改回来（因为 $lca$ 处理比较麻烦，这样搞比较方便）。</li></ol><p>$ T(cu, cv) \oplus T(tu, tv)$</p><p>$ = (S(cu, root) \oplus S(cv, root)) \oplus (S(tu, root) \oplus S(tv, root))$</p><p>$= (S(cu, root) \oplus S(tu, root)) \oplus (S(cv, root) \oplus S(tv, root))$</p><p>$= T(cu, tu) \oplus T(cv, tu)$</p><p>之所以要把 $T(cu, cv) \oplus T(tu, tv)$ 转化成 $T(cu, tu) \oplus T(cv, tu)$，是因为这样的话就能通过对询问排序来保证复杂度。排序方式就是以$u$所在块编号为第一关键字，$v$ 的编号为第二关键字排序。如果结合了带修莫队，就还要以时间为第三关键字。</p><h4 id="时间复杂度-1"><a href="#时间复杂度-1" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>不带修：$O(n\sqrt{m})$，带修：$O(n^{\frac{5}{3}})$</p><p><a href="https://uoj.ac/problem/58">#58. 【WC2013】糖果公园</a></p><h3 id="莫队的在线化改造"><a href="#莫队的在线化改造" class="headerlink" title="莫队的在线化改造"></a>莫队的在线化改造</h3><p><a href="https://www.luogu.com.cn/problem/P1903">P1903 [国家集训队] 数颜色 / 维护队列</a></p><p>上面这道题做如下修改：</p><ul><li>在读入每个更新操作的位置 $P$ 时，把 $P$ 用上一次 $Query$ 的答案进行异或后再得到真正的 $P$。</li></ul><p>有了这个背景，就能更清楚的理解为什么原题可以改造为离线了，而这道修改后的题目不可以。正因为每次修改操作紧密联系于上一次查询操作，必须真的按照题目的要求“立即输出查询结果”才能进行此次修改，而原题可以假的“立即输出”。如果把这道题强行加上时间戳，如果经过排序后第 $1$ 个修改操作是原来的第 $99$ 个修改，那此次操作需要用到第 $98$ 行的查询结果（假设输入为一行修改+一行查询），而想要得到 $98$ 行的查询结果，有需要用到 $97$ 行的修改，反复套娃，这个排序不如不排，时间复杂度直接变为 $O(n^{2})$。</p><p>所以这下真的变成在线了，不能用莫队了。</p><p>但我相信大家是不会使用Spaly/Fenwick/Segt（可能是主席树）来做这道题的（以上均为口胡，没写过）。</p><p>不，这道题还可以使用莫队，我们可以强行来用莫队，进行莫队的在线化改造！</p><h4 id="普通莫队的在线化改造"><a href="#普通莫队的在线化改造" class="headerlink" title="普通莫队的在线化改造"></a>普通莫队的在线化改造</h4><h5 id="在线化改造的关键"><a href="#在线化改造的关键" class="headerlink" title="在线化改造的关键"></a>在线化改造的关键</h5><p>我们都知道，普通的莫队算法会先把所有查询离线排好序，然后通过“从上一个查询区间转移到下一个区间”的方式来快速计算答案。</p><p>但如果我们想把莫队算法“在线化”，就不能简单地从上一个查询区间直接转移。为应对这种情况，可以先挑选出一些特别的区间作为“特征区间”，并处理这些特征区间的答案，让这些区间成为莫队中的“上一个区间”，在线查询就能从相应的特征区间“跳转”过来。  </p><h5 id="特征区间的要求"><a href="#特征区间的要求" class="headerlink" title="特征区间的要求"></a>特征区间的要求</h5><ol><li>这些特征区间的所有信息，必须能在可接受的时间复杂度内全部算出来。  </li><li>对于任意一个真实查询，都能在合适的时间内从某个特征区间转移过来。</li></ol><h5 id="选取特征点"><a href="#选取特征点" class="headerlink" title="选取特征点"></a>选取特征点</h5><p>假设我们在序列中每隔 $d$ 步选一个“特征点”，并且把任意两个特征点之间的区间都做成特征区间。  </p><ul><li>这样，预处理时的复杂度大约是 $O(\frac{n^{2}}{d})$。  </li><li>当处理一个真实查询时，如果只要移动区间的左右端点分别不超过 $\frac{d}{2}$ 步，那么就能从相应的特征区间转移到真实查询的区间，花费 $O(d)$ 的时间。</li><li>可以证明 $d=\sqrt{n}$ 最优。</li></ul><h5 id="保存特征区间信息"><a href="#保存特征区间信息" class="headerlink" title="保存特征区间信息"></a>保存特征区间信息</h5><p>为了在后来能够复用特征区间的信息，需要记录下：  </p><ul><li>特征区间的答案本身。  </li><li>莫队所需的辅助信息，比如每种颜色在区间内出现的次数等（常见于莫队中统计出现频次的需求），往往是几个数组。</li></ul><p>直接记住所有特征区间的完整信息可能会占用过多的空间导致爆空间。绝大多数莫队所需要的数据都具有“可减”性质（例如出现次数可以通过增减来实现维护），所以我们只需要把 $[1, s_{i}]$ 这前缀范围的信息保存起来，需要时再用前缀和或加减方法获得目标区间的数据。</p><h5 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h5><ol><li>先对所有特征区间做预处理，存下它们的答案和辅助信息。  </li><li>当真正查询出现时，先找到“最近”的特征区间，再通过不超过 $\frac{d}{2}$ 步的端点移动，将这个特征区间调整到查询所需的区间，并得出结果。</li></ol><p>这样一来，就能把原本只能离线处理的莫队，做成一个“在线化”的版本，成功实现了莫队的在线化改造。</p><h4 id="带修莫队的在线化改造"><a href="#带修莫队的在线化改造" class="headerlink" title="带修莫队的在线化改造"></a>带修莫队的在线化改造</h4><p>普通莫队的改造中提到的特征区间预处理只是个常见的小技巧，但需要在预处理阶段对所有特征区间的答案和信息进行保存，这让我们在支持修改时很麻烦。</p><p>回顾带修莫队做法：在每次查询前，先把修改操作处理到当前时间，维护相关结构后再进行查询。此时常见的数据结构（如线段树）通常是“懒标记”地处理修改，只有在真正需要的时候才更新。</p><p>本算法则类似：</p><ol><li>我们仍然划分特征区间，并在预处理时保存中间信息，但在执行修改时不直接更新特征区间的答案，仅更新莫队维护的核心信息（如颜色出现次数等）即可。  </li><li>询问发生时，如果特征区间的答案早就过期（上次更新时间小于当前时间），就先更新它，再从这个特征区间转移到目标区间并得到正确答案。  </li><li>由于莫队在维护中间信息时是最新的，所以真正计算答案时要“反向”更新，以保证最终求得的是当前正确结果。</li></ol><h5 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h5><ul><li>若 $d=n^{\frac{2}{3}}$，则选取的特征点有 $O(n^{\frac{1}{3}})$ 个。  </li><li>每次修改若强行更新所有预处理区间会导致极高复杂度，所以采用“懒更新”方式，仅在需要时才刷新对应区间的答案。  </li><li>总整体复杂度约为 $O(n^{\frac{5}{3}})$，与带修莫队相当，但原则上不会达到最坏情况。</li></ul><h5 id="实现步骤简要"><a href="#实现步骤简要" class="headerlink" title="实现步骤简要"></a>实现步骤简要</h5><ol><li>预处理：计算并存下所有特征区间的答案 + 中间信息  </li><li>修改：只更新莫队中间状态，不更新特征区间答案  </li><li>查询：  <ul><li>若特征区间答案过期，先更新</li><li>再用不超过 $\frac{d}{2}$ 次移动，将特征区间扩展/收缩到查询区间，输出结果</li></ul></li></ol><h5 id="时空复杂度的分析"><a href="#时空复杂度的分析" class="headerlink" title="时空复杂度的分析"></a>时空复杂度的分析</h5><p>在普通莫队基础上做在线化改造，时间复杂度保持不变，但会额外消耗 $O(n)$ 的空间；在带修莫队基础上做改造，时间复杂度也与带修莫队相同，但需要额外 $O(n^{\frac{1}{3}})$ 的空间。尽管改造过程只需“向前修改”，常数因素仍会导致实际运行效率与原带修莫队相差不大。</p><details class="folding-tag" ><summary> 查看代码 </summary>              <div class='content'>              <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">50050</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> BLNB = <span class="number">550</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> COL = <span class="number">1000050</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;x)</span> </span>&#123;</span><br><span class="line">  <span class="type">char</span> ch;</span><br><span class="line">  <span class="keyword">while</span> (ch = <span class="built_in">getchar</span>(), ch &lt; <span class="string">&#x27;!&#x27;</span>);</span><br><span class="line">  x = ch - <span class="number">48</span>;</span><br><span class="line">  <span class="keyword">while</span> (ch = <span class="built_in">getchar</span>(), ch &gt; <span class="string">&#x27;!&#x27;</span>) x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="number">48</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> target[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Change</span> &#123;</span><br><span class="line">  <span class="type">int</span> p, col, las;</span><br><span class="line">&#125; change[MAXN];</span><br><span class="line"><span class="type">int</span> nc, n, m, mp[COL], tot, D, cnt[BLNB][MAXN * <span class="number">2</span>], c[MAXN], blnm, spe[BLNB];</span><br><span class="line"><span class="type">int</span> CNT[MAXN * <span class="number">2</span>], ans[BLNB][BLNB], ima, tim[BLNB][BLNB], id[MAXN];</span><br><span class="line"><span class="comment">// 细节：我们不能直接在cnt[][]上做更改，所以需要记录一个临时的变化量数组CNT[]</span></span><br><span class="line"><span class="comment">// 变量解释：nc表示当前时间，mp[]和tot是离散化用的，D表示特征点步长，cnt[][]是预处理的莫队信息，id[]记录下标为i的特征点是第几个特征点，spe[]用于存储所有的特征点下标，ans[][]表示特征区间的答案，tim[][]记录答案的上一次更新时间，target[]表示离位置i最近的特征点坐标。</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">getc</span><span class="params">(<span class="type">int</span> sl, <span class="type">int</span> sr, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (sl == <span class="number">0</span> &amp;&amp; sr == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (c[sl] == p)</span><br><span class="line">      <span class="keyword">return</span> cnt[id[sr]][p] - cnt[id[sl]][p] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">return</span> cnt[id[sr]][p] - cnt[id[sl]][p];</span><br><span class="line">  &#125;  <span class="comment">// 细节：端点特判一下</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数作用：读取区间[sl,sr]中的莫队数组信息。</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> sl, <span class="type">int</span> sr)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ((--CNT[c[pos]]) + <span class="built_in">getc</span>(sl, sr, c[pos]) == <span class="number">0</span>) --ima;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> sl, <span class="type">int</span> sr)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ((++CNT[c[pos]]) + <span class="built_in">getc</span>(sl, sr, c[pos]) == <span class="number">1</span>) ++ima;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">read</span>(n);</span><br><span class="line">  <span class="built_in">read</span>(m);</span><br><span class="line">  D = <span class="built_in">pow</span>(n, <span class="number">2.0</span> / <span class="number">3</span>);  <span class="comment">// 带修莫队的块大小</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    <span class="built_in">read</span>(c[i]);</span><br><span class="line">    <span class="keyword">if</span> (!mp[c[i]])</span><br><span class="line">      c[i] = mp[c[i]] = ++tot;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      c[i] = mp[c[i]];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> tmp = <span class="number">1</span>;</span><br><span class="line">  spe[blnm = <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">  id[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i - tmp == D) tmp = i, spe[++blnm] = i, id[i] = blnm;</span><br><span class="line">    target[i] = tmp;</span><br><span class="line">  &#125;  <span class="comment">// 预处理特征点以及每个点对应的离它最近的特征点</span></span><br><span class="line">  <span class="type">int</span> p = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    ++CNT[c[i]];</span><br><span class="line">    <span class="keyword">if</span> (i == spe[p]) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) cnt[p][j] = CNT[j];</span><br><span class="line">      ++p;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;  <span class="comment">// 预处理莫队所需信息</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= blnm; ++i) &#123;</span><br><span class="line">    <span class="type">int</span> p = i + <span class="number">1</span>;</span><br><span class="line">    ima = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(CNT, <span class="number">0</span>, <span class="keyword">sizeof</span> CNT);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = spe[i]; j &lt;= n; ++j) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((++CNT[c[j]]) == <span class="number">1</span>) ++ima;</span><br><span class="line">      <span class="keyword">if</span> (j == spe[p]) &#123;</span><br><span class="line">        ans[i][p] = ima;</span><br><span class="line">        ++p;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;  <span class="comment">// 预处理特征区间答案</span></span><br><span class="line">  <span class="built_in">memset</span>(CNT, <span class="number">0</span>, <span class="keyword">sizeof</span> CNT);</span><br><span class="line">  <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">    <span class="type">char</span> opt;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    ima = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (opt = <span class="built_in">getchar</span>(), opt != <span class="string">&#x27;Q&#x27;</span> &amp;&amp; opt != <span class="string">&#x27;R&#x27;</span>);</span><br><span class="line">    <span class="built_in">read</span>(l);</span><br><span class="line">    <span class="built_in">read</span>(r);</span><br><span class="line">    <span class="keyword">if</span> (opt == <span class="string">&#x27;R&#x27;</span>) &#123;</span><br><span class="line">      change[++nc].p = l;</span><br><span class="line">      <span class="keyword">if</span> (!mp[r])</span><br><span class="line">        r = mp[r] = ++tot;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        r = mp[r];</span><br><span class="line">      change[nc].col = r;</span><br><span class="line">      change[nc].las = c[l];</span><br><span class="line">      <span class="type">int</span> p = blnm;</span><br><span class="line">      <span class="keyword">for</span> (; spe[p] &gt;= l; --p)</span><br><span class="line">        --cnt[p][c[l]], ++cnt[p][r];  <span class="comment">// 修改中间过程的信息</span></span><br><span class="line">      c[l] = r;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="type">int</span> sl = target[l], sr = target[r];</span><br><span class="line">      <span class="type">int</span> SL = sl, SR = sr;</span><br><span class="line">      <span class="comment">// sl、sr表示所需特征区间的左右端点。</span></span><br><span class="line">      <span class="keyword">if</span> (sl == sr) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= r; ++i)</span><br><span class="line">          <span class="keyword">if</span> (++CNT[c[i]] == <span class="number">1</span>) ++ima;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ima);  <span class="comment">// 细节：区间左右端点所属特征点相同，暴力计算</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= r; ++i) --CNT[c[i]];</span><br><span class="line">        <span class="comment">// 临时数组还原</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> t = nc; t &gt; tim[id[sl]][id[sr]]; --t) &#123;</span><br><span class="line">          <span class="keyword">if</span> (sl &lt;= change[t].p &amp;&amp; change[t].p &lt;= sr) &#123;</span><br><span class="line">            <span class="keyword">if</span> (++CNT[change[t].las] + <span class="built_in">getc</span>(sl, sr, change[t].las) == <span class="number">1</span>)</span><br><span class="line">              --ans[id[sl]][id[sr]];</span><br><span class="line">            <span class="keyword">if</span> (--CNT[change[t].col] + <span class="built_in">getc</span>(sl, sr, change[t].col) == <span class="number">0</span>)</span><br><span class="line">              ++ans[id[sl]][id[sr]];</span><br><span class="line">            <span class="comment">// 反向计算答案，即把原来带修莫队的东西反过来写，详情可以参考题解里普通带修莫队的修改方式做对照。</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> t = nc; t &gt; tim[id[sl]][id[sr]]; --t)</span><br><span class="line">          <span class="keyword">if</span> (sl &lt;= change[t].p &amp;&amp; change[t].p &lt;= sr) &#123;</span><br><span class="line">            --CNT[change[t].las];</span><br><span class="line">            ++CNT[change[t].col];</span><br><span class="line">          &#125;</span><br><span class="line">        <span class="comment">// 临时数组还原</span></span><br><span class="line">        tim[id[sl]][id[sr]] = nc;</span><br><span class="line">        ima = ans[id[sl]][id[sr]];</span><br><span class="line">        <span class="keyword">while</span> (sl &lt; l) <span class="built_in">del</span>(sl++, SL, SR);</span><br><span class="line">        <span class="keyword">while</span> (sl &gt; l) <span class="built_in">add</span>(--sl, SL, SR);</span><br><span class="line">        <span class="keyword">while</span> (sr &lt; r) <span class="built_in">add</span>(++sr, SL, SR);</span><br><span class="line">        <span class="keyword">while</span> (sr &gt; r) <span class="built_in">del</span>(sr--, SL, SR);</span><br><span class="line">        <span class="comment">// 可爱的四句莫队</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ima);</span><br><span class="line">        <span class="keyword">while</span> (SL &lt; l) <span class="built_in">add</span>(SL++, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span> (SL &gt; l) <span class="built_in">del</span>(--SL, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span> (SR &lt; r) <span class="built_in">del</span>(++SR, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span> (SR &gt; r) <span class="built_in">add</span>(SR--, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 临时数组还原</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><p>当然上述代码解决的只是<a href="https://www.luogu.com.cn/problem/P1903">P1903 [国家集训队] 数颜色 / 维护队列</a>原问题，只是我们自己强制自己把这道题写成了在线莫队。</p><p>实际上一些问题是强制在线的，不像P1903一样可以转化为离线问题，这时在线莫队就显得尤为重要，可以用相对简单的在线莫队解决相对困难的问题，比如树套树，主席树，Fenwike等等需要高级DS的问题。</p><p>具体可以看一下这道题<a href="https://www.luogu.com.cn/problem/U540166">U540166 【模板】诗乃莫队</a></p><details class="folding-tag" ><summary> 查看代码 </summary>              <div class='content'>              <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;bits/extc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// using namespace __gnu_pbds;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ture true</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> flase false</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pow power</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) begin(x), end(x)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gcd(a, b) gcdint(a, b)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lcm(a, b) (a / gcd(a, b) * b)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(x) (int)x.size()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> time(a, b) (abs((b - a) / CLOCKS_PER_SEC))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EPS 1e-7</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> i64 long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> i128 __int128</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> tcT template &lt;class T</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> tcTU tcT, class U</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">unsyncIO</span><span class="params">()</span> </span>&#123; cin.<span class="built_in">tie</span>(<span class="number">0</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setPrec</span><span class="params">()</span> </span>&#123; cout &lt;&lt; fixed &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">15</span>); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setIO</span><span class="params">()</span> </span>&#123; <span class="built_in">unsyncIO</span>(), <span class="built_in">setPrec</span>(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">gcdint</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> b ? <span class="built_in">gcdint</span>(b, a % b) : a; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> i128 <span class="title">gcd128</span><span class="params">(i128 a, i128 b)</span> </span>&#123; <span class="keyword">return</span> b ? <span class="built_in">gcd128</span>(b, a % b) : a; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">cdiv</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a / b + ((a ^ b) &gt; <span class="number">0</span> &amp;&amp; a % b); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">fdiv</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a / b - ((a ^ b) &lt; <span class="number">0</span> &amp;&amp; a % b); &#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; <span class="keyword">using</span> V = vector&lt;T&gt;;</span><br><span class="line">tcTU &gt; <span class="keyword">using</span> PR = pair&lt;T, U&gt;;</span><br><span class="line">tcTU &gt; <span class="keyword">using</span> MP = map&lt;T, U&gt;;</span><br><span class="line">tcTU &gt; <span class="keyword">using</span> VP = vector&lt;pair&lt;T, U&gt;&gt;;</span><br><span class="line">tcT &gt; <span class="keyword">using</span> pqg = priority_queue&lt;T, vector&lt;T&gt;, greater&lt;T&gt;&gt;;</span><br><span class="line">tcT &gt; <span class="keyword">using</span> pql = priority_queue&lt;T, vector&lt;T&gt;, less&lt;T&gt;&gt;;</span><br><span class="line"></span><br><span class="line">tcTU &gt; istream &amp;<span class="keyword">operator</span>&gt;&gt;(istream &amp;in, pair&lt;T, U&gt; &amp;a) &#123;</span><br><span class="line">  <span class="keyword">return</span> in &gt;&gt; a.first &gt;&gt; a.second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; istream &amp;<span class="keyword">operator</span>&gt;&gt;(istream &amp;in, vector&lt;T&gt; &amp;a) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) &#123;</span><br><span class="line">    in &gt;&gt; x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="type">const</span> pair&lt;T, U&gt; &amp;a) &#123;</span><br><span class="line">  <span class="keyword">return</span> out &lt;&lt; a.first &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; a.second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="type">const</span> vector&lt;pair&lt;T, U&gt;&gt; &amp;a) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) &#123;</span><br><span class="line">    out &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="type">const</span> vector&lt;T&gt; &amp;a) &#123;</span><br><span class="line">  <span class="type">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">  <span class="keyword">if</span> (!n) &#123;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">  &#125;</span><br><span class="line">  out &lt;&lt; a[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">    out &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; a[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, i128 n) &#123;</span><br><span class="line">  std::string s;</span><br><span class="line">  <span class="keyword">while</span> (n) &#123;</span><br><span class="line">    s += <span class="string">&#x27;0&#x27;</span> + n % <span class="number">10</span>;</span><br><span class="line">    n /= <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  std::<span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">  <span class="keyword">return</span> os &lt;&lt; s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">power</span><span class="params">(<span class="type">int</span> a, i64 b, <span class="type">int</span> p = <span class="number">1e9</span> + <span class="number">7</span>)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; b; b /= <span class="number">2</span>, a = <span class="number">1LL</span> * a * a % p) &#123;</span><br><span class="line">    <span class="keyword">if</span> (b % <span class="number">2</span>) &#123;</span><br><span class="line">      res = <span class="number">1LL</span> * res * a % p;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; <span class="function"><span class="type">bool</span> <span class="title">ckmin</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> b &lt; a ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line">tcT &gt; <span class="function"><span class="type">bool</span> <span class="title">ckmax</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; <span class="function"><span class="type">void</span> <span class="title">remDup</span><span class="params">(vector&lt;T&gt; &amp;v)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">sort</span>(<span class="built_in">all</span>(v));</span><br><span class="line">  v.<span class="built_in">erase</span>(<span class="built_in">unique</span>(<span class="built_in">all</span>(v)), <span class="built_in">end</span>(v));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; <span class="function"><span class="type">void</span> <span class="title">erase</span><span class="params">(T &amp;t, <span class="type">const</span> U &amp;u)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">auto</span> it = t.<span class="built_in">find</span>(u);</span><br><span class="line">  <span class="built_in">assert</span>(it != <span class="built_in">end</span>(t));</span><br><span class="line">  t.<span class="built_in">erase</span>(it);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; <span class="function">T <span class="title">fstTrue</span><span class="params">(T lo, T hi, U f)</span> </span>&#123;</span><br><span class="line">  hi++;</span><br><span class="line">  <span class="built_in">assert</span>(lo &lt;= hi);</span><br><span class="line">  <span class="keyword">while</span> (lo &lt; hi) &#123;</span><br><span class="line">    T mid = lo + (hi - lo) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">f</span>(mid) ? hi = mid : lo = mid + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> lo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; <span class="function">T <span class="title">lstTrue</span><span class="params">(T lo, T hi, U f)</span> </span>&#123;</span><br><span class="line">  lo--;</span><br><span class="line">  <span class="built_in">assert</span>(lo &lt;= hi);</span><br><span class="line">  <span class="keyword">while</span> (lo &lt; hi) &#123;</span><br><span class="line">    T mid = lo + (hi - lo + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">f</span>(mid) ? lo = mid : hi = mid - <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> lo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N = <span class="number">1.01e6</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> M = <span class="number">2.01e3</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;C:/Users/70510/Desktop/Others/algo/debug.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(...) 42</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NMAX = <span class="number">50000</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">EventType</span> &#123; QUERY, MODIFY &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Query</span> &#123;</span><br><span class="line">  <span class="type">int</span> l, r, t, idx;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Modification</span> &#123;</span><br><span class="line">  <span class="type">int</span> pos;    <span class="comment">// 修改位置</span></span><br><span class="line">  <span class="type">int</span> type;   <span class="comment">// 1: 修改颜色, 2: 修改数字</span></span><br><span class="line">  <span class="type">int</span> prevC;  <span class="comment">// 若是颜色修改，原来的颜色</span></span><br><span class="line">  <span class="type">int</span> nowC;</span><br><span class="line">  <span class="type">int</span> prevA;  <span class="comment">// 若是数字修改，原来的数字</span></span><br><span class="line">  <span class="type">int</span> nowA;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k;</span><br><span class="line"><span class="type">int</span> initA[NMAX], curA[NMAX];</span><br><span class="line"><span class="type">int</span> initC[NMAX], curC[NMAX];  <span class="comment">// curC 存储离散化后的颜色</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; compColors;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> totQuery = <span class="number">0</span>, totMod = <span class="number">0</span>;</span><br><span class="line">vector&lt;Query&gt; queries;</span><br><span class="line">vector&lt;Modification&gt; mods;</span><br><span class="line"></span><br><span class="line">ll ansArr[NMAX];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优化：使用 vector 记录每个颜色（离散化后编号）的当前数字和</span></span><br><span class="line">vector&lt;ll&gt; colSumArr;  <span class="comment">// 下标范围 [1, totColors]</span></span><br><span class="line"></span><br><span class="line">ll curAns = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 快速计算 f(x) = x^k，其中 k=1,2,3</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">f</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (k == <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (k == <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> x * x * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内联更新函数：移除位置 pos 的贡献</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">removePos</span><span class="params">(<span class="type">int</span> pos)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> color = curC[pos];  <span class="comment">// 范围 1..totColors</span></span><br><span class="line">  <span class="type">int</span> val = curA[pos];</span><br><span class="line">  ll oldVal = colSumArr[color];</span><br><span class="line">  ll newVal = oldVal - val;</span><br><span class="line">  curAns -= (<span class="built_in">f</span>(oldVal) - <span class="built_in">f</span>(newVal));</span><br><span class="line">  colSumArr[color] = newVal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内联更新函数：添加位置 pos 的贡献</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addPos</span><span class="params">(<span class="type">int</span> pos)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> color = curC[pos];</span><br><span class="line">  <span class="type">int</span> val = curA[pos];</span><br><span class="line">  ll oldVal = colSumArr[color];</span><br><span class="line">  ll newVal = oldVal + val;</span><br><span class="line">  curAns += (<span class="built_in">f</span>(newVal) - <span class="built_in">f</span>(oldVal));</span><br><span class="line">  colSumArr[color] = newVal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用修改操作 modIdx（如果 pos 在当前区间内，先 remove 后 add）</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">applyModification</span><span class="params">(<span class="type">int</span> modIdx, <span class="type">int</span> L, <span class="type">int</span> R)</span> </span>&#123;</span><br><span class="line">  Modification &amp;mod = mods[modIdx];</span><br><span class="line">  <span class="type">int</span> pos = mod.pos;</span><br><span class="line">  <span class="keyword">if</span> (L &lt;= pos &amp;&amp; pos &lt;= R) <span class="built_in">removePos</span>(pos);</span><br><span class="line">  <span class="keyword">if</span> (mod.type == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 颜色修改：curC[pos] 从 prevC 变为 nowC</span></span><br><span class="line">    curC[pos] = mod.nowC;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    curA[pos] = mod.nowA;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (L &lt;= pos &amp;&amp; pos &lt;= R) <span class="built_in">addPos</span>(pos);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 撤销修改操作 modIdx</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">undoModification</span><span class="params">(<span class="type">int</span> modIdx, <span class="type">int</span> L, <span class="type">int</span> R)</span> </span>&#123;</span><br><span class="line">  Modification &amp;mod = mods[modIdx];</span><br><span class="line">  <span class="type">int</span> pos = mod.pos;</span><br><span class="line">  <span class="keyword">if</span> (L &lt;= pos &amp;&amp; pos &lt;= R) <span class="built_in">removePos</span>(pos);</span><br><span class="line">  <span class="keyword">if</span> (mod.type == <span class="number">1</span>) &#123;</span><br><span class="line">    curC[pos] = mod.prevC;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    curA[pos] = mod.prevA;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (L &lt;= pos &amp;&amp; pos &lt;= R) <span class="built_in">addPos</span>(pos);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    cin &gt;&gt; initA[i];</span><br><span class="line">    curA[i] = initA[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    cin &gt;&gt; initC[i];</span><br><span class="line">    compColors.<span class="built_in">push_back</span>(initC[i]);</span><br><span class="line">    curC[i] = initC[i];  <span class="comment">// 后续会进行离散化</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ll lastans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">    <span class="type">char</span> op;</span><br><span class="line">    cin &gt;&gt; op;</span><br><span class="line">    <span class="keyword">if</span> (op == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">      <span class="type">int</span> l, r;</span><br><span class="line">      cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">      l ^= lastans;</span><br><span class="line">      r ^= lastans;</span><br><span class="line">      <span class="keyword">if</span> (l &gt; r) <span class="built_in">swap</span>(l, r);</span><br><span class="line">      queries.<span class="built_in">push_back</span>(&#123;l, r, (<span class="type">int</span>)totMod, (<span class="type">int</span>)totQuery&#125;);</span><br><span class="line">      totQuery++;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">&#x27;C&#x27;</span>) &#123;</span><br><span class="line">      <span class="type">int</span> x, y;</span><br><span class="line">      cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">      x ^= lastans;</span><br><span class="line">      y ^= lastans;</span><br><span class="line">      compColors.<span class="built_in">push_back</span>(y);</span><br><span class="line">      mods.<span class="built_in">push_back</span>(&#123;x, <span class="number">1</span>, curC[x], y, <span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">      curC[x] = y;</span><br><span class="line">      totMod++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="type">int</span> x, y;</span><br><span class="line">      cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">      x ^= lastans;</span><br><span class="line">      y ^= lastans;</span><br><span class="line">      mods.<span class="built_in">push_back</span>(&#123;x, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, curA[x], y&#125;);</span><br><span class="line">      curA[x] = y;</span><br><span class="line">      totMod++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 离散化：压缩所有颜色</span></span><br><span class="line">  <span class="built_in">sort</span>(compColors.<span class="built_in">begin</span>(), compColors.<span class="built_in">end</span>());</span><br><span class="line">  compColors.<span class="built_in">erase</span>(<span class="built_in">unique</span>(compColors.<span class="built_in">begin</span>(), compColors.<span class="built_in">end</span>()),</span><br><span class="line">                   compColors.<span class="built_in">end</span>());</span><br><span class="line">  <span class="type">int</span> totColors = compColors.<span class="built_in">size</span>();</span><br><span class="line">  <span class="keyword">auto</span> getColorId = [&amp;](<span class="type">int</span> c) -&gt; <span class="type">int</span> &#123;</span><br><span class="line">    <span class="built_in">return</span> (<span class="type">int</span>)(<span class="built_in">lower_bound</span>(compColors.<span class="built_in">begin</span>(), compColors.<span class="built_in">end</span>(), c) -</span><br><span class="line">                 compColors.<span class="built_in">begin</span>()) +</span><br><span class="line">           <span class="number">1</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    initC[i] = <span class="built_in">getColorId</span>(initC[i]);</span><br><span class="line">    curC[i] = initC[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;mod : mods) &#123;</span><br><span class="line">    <span class="keyword">if</span> (mod.type == <span class="number">1</span>) &#123;</span><br><span class="line">      mod.prevC = <span class="built_in">getColorId</span>(mod.prevC);</span><br><span class="line">      mod.nowC = <span class="built_in">getColorId</span>(mod.nowC);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    curA[i] = initA[i];</span><br><span class="line">    curC[i] = initC[i];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化 colSumArr，所有颜色贡献初始为 0</span></span><br><span class="line">  colSumArr.<span class="built_in">assign</span>(totColors + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  curAns = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> blockSize = <span class="built_in">max</span>((ll)<span class="number">1</span>, (ll)<span class="built_in">pow</span>(n, <span class="number">2.0</span> / <span class="number">3.0</span>));</span><br><span class="line">  <span class="built_in">sort</span>(queries.<span class="built_in">begin</span>(), queries.<span class="built_in">end</span>(), [&amp;](<span class="type">const</span> Query &amp;A, <span class="type">const</span> Query &amp;B) &#123;</span><br><span class="line">    <span class="type">int</span> ablock = A.l / blockSize, bblock = B.l / blockSize;</span><br><span class="line">    <span class="keyword">if</span> (ablock != bblock) <span class="keyword">return</span> ablock &lt; bblock;</span><br><span class="line">    <span class="type">int</span> rblockA = A.r / blockSize, rblockB = B.r / blockSize;</span><br><span class="line">    <span class="keyword">if</span> (rblockA != rblockB) <span class="keyword">return</span> A.r &lt; B.r;</span><br><span class="line">    <span class="keyword">return</span> A.t &lt; B.t;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 恢复 curA, curC 为初始状态</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    curA[i] = initA[i];</span><br><span class="line">    curC[i] = initC[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// colSumArr 已经初始化为 0，curAns = 0</span></span><br><span class="line">  <span class="type">int</span> L = <span class="number">1</span>, R = <span class="number">0</span>, curT = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;q : queries) &#123;</span><br><span class="line">    <span class="keyword">while</span> (curT &lt; q.t) &#123;</span><br><span class="line">      <span class="built_in">applyModification</span>(curT, L, R);</span><br><span class="line">      curT++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (curT &gt; q.t) &#123;</span><br><span class="line">      curT--;</span><br><span class="line">      <span class="built_in">undoModification</span>(curT, L, R);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (R &lt; q.r) &#123;</span><br><span class="line">      R++;</span><br><span class="line">      <span class="built_in">addPos</span>(R);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (R &gt; q.r) &#123;</span><br><span class="line">      <span class="built_in">removePos</span>(R);</span><br><span class="line">      R--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (L &lt; q.l) &#123;</span><br><span class="line">      <span class="built_in">removePos</span>(L);</span><br><span class="line">      L++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (L &gt; q.l) &#123;</span><br><span class="line">      L--;</span><br><span class="line">      <span class="built_in">addPos</span>(L);</span><br><span class="line">    &#125;</span><br><span class="line">    ansArr[q.idx] = curAns;</span><br><span class="line">    lastans = curAns;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; totQuery; i++) &#123;</span><br><span class="line">    cout &lt;&lt; ansArr[i] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">setIO</span>();</span><br><span class="line">  <span class="type">int</span> tt = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// cin &gt;&gt; tt;</span></span><br><span class="line">  <span class="keyword">while</span> (tt--) &#123;</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="二维莫队"><a href="#二维莫队" class="headerlink" title="二维莫队"></a>二维莫队</h3><p><a href="https://ouuan.github.io/post/%E4%BA%8C%E7%BB%B4%E8%8E%AB%E9%98%9F%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/">二维莫队解题报告</a></p><h3 id="莫队二次离线"><a href="#莫队二次离线" class="headerlink" title="莫队二次离线"></a>莫队二次离线</h3><p><a href="https://www.luogu.com.cn/article/jkcn8dfi">莫队二次离线</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;分块算法&quot;&gt;&lt;a href=&quot;#分块算法&quot; class=&quot;headerlink&quot; title=&quot;分块算法&quot;&gt;&lt;/a&gt;分块算法&lt;/h1&gt;&lt;h2 id=&quot;什么是分块算法&quot;&gt;&lt;a href=&quot;#什么是分块算法&quot; class=&quot;headerlink&quot; title=&quot;什么是</summary>
      
    
    
    
    
    <category term="XCPC" scheme="https://www.lansganbs.cn/tags/XCPC/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round 1000 (Div. 2) D题题解</title>
    <link href="https://www.lansganbs.cn/posts/1f3637b8.html"/>
    <id>https://www.lansganbs.cn/posts/1f3637b8.html</id>
    <published>2024-01-22T21:37:42.000Z</published>
    <updated>2025-07-02T11:40:03.112Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/2063/problem/D">D. Game With Triangles</a></p><p>Even Little John needs money to buy a house. But he recently lost his job; how will he earn money now? Of course, by playing a game that gives him money as a reward! Oh well, maybe not those kinds of games you are thinking about.</p><p>There are $n+m$ distinct points $(a_{1},0), (a_{2},0), \dots , (a_{n},0), (b_{1},2), (b_{2},2), \dots, (b_{m},2)$ on the plane. Initially, your score is $0$. To increase your score, you can perform the following operation:</p><ul><li>Choose three distinct points which are not <a href="https://en.wikipedia.org/wiki/Collinearity">collinear</a>;</li><li>Increase your score by the area of the triangle formed by these three points;</li><li>Then, erase the three points from the plane.</li></ul><p><img src="https://espresso.codeforces.com/5f6a73286fffbc2708f1d388ed58ca5bc0d69d23.png" alt=""> An instance of the game, where the operation is performed twice.</p><p>Let $k_{max}$ be the maximum number of operations that can be performed. For example, if it is impossible to perform any operation, $ k_{max}$ is $0$. Additionally, define $f(k)$ as the maximum possible score achievable by performing the operation <strong>exactly $k$ times</strong>. Here, $f(k)$ is defined for all integers $k$ such that $0 \le k \le k_{max}$.</p><p>Find the value of $k_{max}$, and find the values of $f(x)$ for all integers $x=1,2,\dots,k_{max}$ independently.</p><p><strong>Input</strong></p><p>Each test contains multiple test cases. The first line contains the number of test cases $t$ $(1 \le t \le 3 \cdot 10^4)$. The description of the test cases follows.</p><p>The first line of each test case contains two integers $n$ and $m$ $(1 \le n,m \le 2 \cdot 10^5)$.</p><p>The second line of each test case contains $n$ pairwise distinct integers $a_1,a_2,\ldots,a_n$ — the points on $y=0$ $(-10^9 \le a_i \le 10^9)$.</p><p>The third line of each test case contains $m$ pairwise distinct integers $b_1,b_2,\ldots,b_m$ — the points on $y=2$ $(-10^9 \le b_i \le 10^9)$.</p><p>It is guaranteed that both the sum of $n$ and the sum of $m$ over all test cases do not exceed $2 \cdot 10^5$.</p><p><strong>Output</strong></p><p>For each test case, given that the maximum number of operations is $k_{\max}$, you must output at most two lines:</p><ul><li>The first line contains the value of $k_{\max}$;</li><li>The second line contains $k_{\max}$ integers denoting $f(1),f(2),\ldots,f(k_{\max})$. You are allowed to omit this line if $k_{\max}$ is $0$.</li></ul><p>Note that under the constraints of this problem, it can be shown that all values of $f(x)$ are integers no greater than $10^{16}$.</p><p><strong>Example</strong></p><p><strong>Input</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">1 3</span><br><span class="line">0</span><br><span class="line">0 1 -1</span><br><span class="line">2 4</span><br><span class="line">0 100</span><br><span class="line">-100 -50 0 50</span><br><span class="line">2 4</span><br><span class="line">0 1000</span><br><span class="line">-100 -50 0 50</span><br><span class="line">6 6</span><br><span class="line">20 1 27 100 43 42</span><br><span class="line">100 84 1 24 22 77</span><br><span class="line">8 2</span><br><span class="line">564040265 -509489796 469913620 198872582 -400714529 553177666 131159391 -20796763</span><br><span class="line">-1000000000 1000000000</span><br></pre></td></tr></table></figure><hr><p><strong>Output</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">2</span><br><span class="line">150 200</span><br><span class="line">2</span><br><span class="line">1000 200</span><br><span class="line">4</span><br><span class="line">99 198 260 283</span><br><span class="line">2</span><br><span class="line">2000000000 2027422256</span><br></pre></td></tr></table></figure><p><strong>Note</strong></p><p>On the first test case, there are $1+3=4$ points $(0,0),(0,2),(1,2),(-1,2)$.</p><p>It can be shown that you cannot perform two or more operations. The value of $k_{\max}$ is $1$, and you are only asked for the value of $f(1)$.</p><p>You can choose $(0,0)$, $(-1,2)$, and $(1,2)$ as the three vertices of the triangle. After that, your score is increased by the area of the triangle, which is $2$. Then, the three points are erased from the plane. It can be shown that the maximum value of your score after performing one operation is $2$. Therefore, the value of $f(1)$ is $2$.</p><p>On the fifth test case, there are $8+2=10$ points.</p><p>It can be shown that you cannot perform three or more operations. The value of $k_{\max}$ is $2$, and you are asked for the values $f(1)$ and $f(2)$.</p><p>To maximize the score with only one operation, you can choose three points $(198\,872\,582,0)$, $(-1\,000\,000\,000,2)$, and $(1\,000\,000\,000,2)$. Then, the three points are erased from the plane. It can be shown that the maximum value of your score after performing one operation is $2\,000\,000\,000$. Therefore, the value of $f(1)$ is $2\,000\,000\,000$.</p><p>To maximize the score with exactly two operations, you can choose the following sequence of operations.</p><ul><li>Choose three points $(-509\,489\,796,0)$, $(553\,177\,666,0)$, and $(-1\,000\,000\,000,2)$. The three points are erased.</li><li>Choose three points $(-400\,714\,529,0)$, $(564\,040\,265,0)$, and $(1\,000\,000\,000,2)$. The three points are erased.</li></ul><p>Then, the score after two operations becomes $2\,027\,422\,256$. It can be shown that the maximum value of your score after performing exactly two operations is $2\,027\,422\,256$. Therefore, the value of $f(2)$ is $2\,027\,422\,256$.</p><p><strong>Solution</strong></p><ol><li>要构造满足非共线的三点，需要从 $y=0$ 的点中选 $2$ 个、$y=2$ 的点中选 $1$ 个，或反过来。</li><li>每次选出的一组三点形成的三角形面积即对应行上选出的 $2$ 点的横坐标之差(因为高度为 $2$，$面积=\frac{1}{2}\times 底\times 高=差\times 1$)。</li><li>先对 $y=0$ 的所有点进行排序，计算“前后配对”的最大差值之和形成前缀数组 $preA$；同理对 $y=2$ 的所有点生成前缀数组 $preB$。$preA[i]$ 表示恰好在 $y=0$ 行完成 $i$ 次“2点配对”操作的总最大面积，同理 $preB[i]$ 针对 $y=2$ 行。</li><li>每次总共做 $k$ 次操作，需要在 $y=0$ 行做 $i$ 次、在 $y=2$ 行做 $(k - i)$ 次，要求 $2i+(k-i) \le n, i+2(k-i) \le m$。</li><li>用三分搜索或其它方法在可行区间内寻找 $i$，使得 $preA[i] + preB[k-i]$ 最大，记为 $f(k)$。</li><li>最后找出最大可行的 $k$ 值 $k_{max}$，并输出 $f(1) \dots f(k_{\max})$。</li></ol><details class="folding-tag" ><summary> 查看代码 </summary>              <div class='content'>              <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;bits/extc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// using namespace __gnu_pbds;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ture true</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> flase false</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pow power</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) begin(x), end(x)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> gcd(a, b) gcdint(a, b)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lcm(a, b) (a / gcd(a, b) * b)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(x) (int)x.size()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EPS 1e-7</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> i64 long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> i128 __int128</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> tcT template &lt;class T</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> tcTU tcT, class U</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">unsyncIO</span><span class="params">()</span> </span>&#123; cin.<span class="built_in">tie</span>(<span class="number">0</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setPrec</span><span class="params">()</span> </span>&#123; cout &lt;&lt; fixed &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">15</span>); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setIO</span><span class="params">()</span> </span>&#123; <span class="built_in">unsyncIO</span>(), <span class="built_in">setPrec</span>(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">gcdint</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> b ? <span class="built_in">gcdint</span>(b, a % b) : a; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> i128 <span class="title">gcd128</span><span class="params">(i128 a, i128 b)</span> </span>&#123; <span class="keyword">return</span> b ? <span class="built_in">gcd128</span>(b, a % b) : a; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">cdiv</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a / b + ((a ^ b) &gt; <span class="number">0</span> &amp;&amp; a % b); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">fdiv</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a / b - ((a ^ b) &lt; <span class="number">0</span> &amp;&amp; a % b); &#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; <span class="keyword">using</span> V = vector&lt;T&gt;;</span><br><span class="line">tcTU &gt; <span class="keyword">using</span> PR = pair&lt;T, U&gt;;</span><br><span class="line">tcTU &gt; <span class="keyword">using</span> MP = map&lt;T, U&gt;;</span><br><span class="line">tcTU &gt; <span class="keyword">using</span> VP = vector&lt;pair&lt;T, U&gt;&gt;;</span><br><span class="line">tcT &gt; <span class="keyword">using</span> pqg = priority_queue&lt;T, vector&lt;T&gt;, greater&lt;T&gt;&gt;;</span><br><span class="line">tcT &gt; <span class="keyword">using</span> pql = priority_queue&lt;T, vector&lt;T&gt;, less&lt;T&gt;&gt;;</span><br><span class="line"></span><br><span class="line">tcTU &gt; istream &amp;<span class="keyword">operator</span>&gt;&gt;(istream &amp;in, pair&lt;T, U&gt; &amp;a) &#123;</span><br><span class="line">  <span class="keyword">return</span> in &gt;&gt; a.first &gt;&gt; a.second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; istream &amp;<span class="keyword">operator</span>&gt;&gt;(istream &amp;in, vector&lt;T&gt; &amp;a) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) &#123;</span><br><span class="line">    in &gt;&gt; x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="type">const</span> pair&lt;T, U&gt; &amp;a) &#123;</span><br><span class="line">  <span class="keyword">return</span> out &lt;&lt; a.first &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; a.second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="type">const</span> vector&lt;pair&lt;T, U&gt;&gt; &amp;a) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) &#123;</span><br><span class="line">    out &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="type">const</span> vector&lt;T&gt; &amp;a) &#123;</span><br><span class="line">  <span class="type">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">  <span class="keyword">if</span> (!n) &#123;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">  &#125;</span><br><span class="line">  out &lt;&lt; a[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">    out &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; a[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, i128 n) &#123;</span><br><span class="line">  std::string s;</span><br><span class="line">  <span class="keyword">while</span> (n) &#123;</span><br><span class="line">    s += <span class="string">&#x27;0&#x27;</span> + n % <span class="number">10</span>;</span><br><span class="line">    n /= <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  std::<span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">  <span class="keyword">return</span> os &lt;&lt; s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">power</span><span class="params">(<span class="type">int</span> a, i64 b, <span class="type">int</span> p = <span class="number">1e9</span> + <span class="number">7</span>)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; b; b /= <span class="number">2</span>, a = <span class="number">1LL</span> * a * a % p) &#123;</span><br><span class="line">    <span class="keyword">if</span> (b % <span class="number">2</span>) &#123;</span><br><span class="line">      res = <span class="number">1LL</span> * res * a % p;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; <span class="function"><span class="type">bool</span> <span class="title">ckmin</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> b &lt; a ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line">tcT &gt; <span class="function"><span class="type">bool</span> <span class="title">ckmax</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line">tcT &gt; <span class="function"><span class="type">void</span> <span class="title">remDup</span><span class="params">(vector&lt;T&gt; &amp;v)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">sort</span>(<span class="built_in">all</span>(v));</span><br><span class="line">  v.<span class="built_in">erase</span>(<span class="built_in">unique</span>(<span class="built_in">all</span>(v)), <span class="built_in">end</span>(v));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; <span class="function"><span class="type">void</span> <span class="title">erase</span><span class="params">(T &amp;t, <span class="type">const</span> U &amp;u)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">auto</span> it = t.<span class="built_in">find</span>(u);</span><br><span class="line">  <span class="built_in">assert</span>(it != <span class="built_in">end</span>(t));</span><br><span class="line">  t.<span class="built_in">erase</span>(it);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; <span class="function">T <span class="title">fstTrue</span><span class="params">(T lo, T hi, U f)</span> </span>&#123;</span><br><span class="line">  hi++;</span><br><span class="line">  <span class="built_in">assert</span>(lo &lt;= hi);</span><br><span class="line">  <span class="keyword">while</span> (lo &lt; hi) &#123;</span><br><span class="line">    T mid = lo + (hi - lo) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">f</span>(mid) ? hi = mid : lo = mid + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> lo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcTU &gt; <span class="function">T <span class="title">lstTrue</span><span class="params">(T lo, T hi, U f)</span> </span>&#123;</span><br><span class="line">  lo--;</span><br><span class="line">  <span class="built_in">assert</span>(lo &lt;= hi);</span><br><span class="line">  <span class="keyword">while</span> (lo &lt; hi) &#123;</span><br><span class="line">    T mid = lo + (hi - lo + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">f</span>(mid) ? lo = mid : hi = mid - <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> lo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N = <span class="number">1.01e6</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> M = <span class="number">2.01e3</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;C:/Users/70510/Desktop/Others/algo/debug.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(...) 42</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">buildPrefix</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;arr)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">sort</span>(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">end</span>());</span><br><span class="line">  <span class="type">int</span> half = arr.<span class="built_in">size</span>() / <span class="number">2</span>;</span><br><span class="line">  <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">diff</span><span class="params">(half)</span></span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; half; i++) &#123;</span><br><span class="line">    diff[i] = arr[arr.<span class="built_in">size</span>() - <span class="number">1</span> - i] - arr[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">sort</span>(diff.<span class="built_in">begin</span>(), diff.<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">  <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">prefix</span><span class="params">(half + <span class="number">1</span>, <span class="number">0LL</span>)</span></span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= half; i++) &#123;</span><br><span class="line">    prefix[i] = prefix[i - <span class="number">1</span>] + diff[i - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> prefix;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ternaryMax</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;B, <span class="type">int</span> k, <span class="type">int</span> low,</span></span></span><br><span class="line"><span class="params"><span class="function">               <span class="type">int</span> high)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (low &gt; high) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">auto</span> G = [&amp;](<span class="type">int</span> x) &#123; <span class="keyword">return</span> A[x] + B[k - x]; &#125;;</span><br><span class="line">  <span class="keyword">while</span> (high - low &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="type">int</span> m1 = low + (high - low) / <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> m2 = high - (high - low) / <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">G</span>(m1) &lt; <span class="built_in">G</span>(m2))</span><br><span class="line">      low = m1 + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      high = m2 - <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = low; i &lt;= high; i++) &#123;</span><br><span class="line">    ret = <span class="built_in">max</span>(ret, <span class="built_in">G</span>(i));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> n, m;</span><br><span class="line">  cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">  <span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">a</span><span class="params">(n)</span>, <span class="title">b</span><span class="params">(m)</span></span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    cin &gt;&gt; a[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">    cin &gt;&gt; b[j];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; preA = <span class="built_in">buildPrefix</span>(a);</span><br><span class="line">  vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; preB = <span class="built_in">buildPrefix</span>(b);</span><br><span class="line">  <span class="type">int</span> maxPickA = (<span class="type">int</span>)preA.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">  <span class="type">int</span> maxPickB = (<span class="type">int</span>)preB.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">  <span class="type">int</span> kmax = <span class="built_in">min</span>((n + m) / <span class="number">3LL</span>, (<span class="type">long</span> <span class="type">long</span>)maxPickA + maxPickB);</span><br><span class="line">  <span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">f</span><span class="params">(kmax + <span class="number">1</span>, <span class="number">0LL</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= kmax; k++) &#123;</span><br><span class="line">    <span class="comment">// i的可行区间</span></span><br><span class="line">    <span class="comment">// 要满足 i + (k−i) = k，2*i + (k−i) &lt;= n =&gt; i &lt;= n-k</span></span><br><span class="line">    <span class="comment">//           i + 2*(k−i) &lt;= m =&gt; i &gt;= 2*k - m</span></span><br><span class="line">    <span class="comment">// 同时 i &gt;= 0, i &lt;= k, i &lt;= maxPickA, k−i &lt;= maxPickB</span></span><br><span class="line">    <span class="type">int</span> low = <span class="built_in">max</span>(<span class="number">0LL</span>, (<span class="type">int</span>)<span class="built_in">max</span>((<span class="type">long</span> <span class="type">long</span>)k - maxPickB, <span class="number">2LL</span> * k - m));</span><br><span class="line">    <span class="type">int</span> high = <span class="built_in">min</span>(k, <span class="built_in">min</span>(maxPickA, n - k));</span><br><span class="line">    <span class="keyword">if</span> (low &lt;= high) &#123;</span><br><span class="line">      <span class="keyword">auto</span> bestVal = <span class="built_in">ternaryMax</span>(preA, preB, k, low, high);</span><br><span class="line">      f[k] = bestVal;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (kmax &gt; <span class="number">0</span> &amp;&amp; f[kmax] == <span class="number">0</span>) kmax--;</span><br><span class="line"></span><br><span class="line">  cout &lt;&lt; kmax &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">if</span> (kmax &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= kmax; i++) &#123;</span><br><span class="line">      cout &lt;&lt; f[i] &lt;&lt; (i &lt; kmax ? <span class="string">&#x27; &#x27;</span> : <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">setIO</span>();</span><br><span class="line">  <span class="type">int</span> tt = <span class="number">1</span>;</span><br><span class="line">  cin &gt;&gt; tt;</span><br><span class="line">  <span class="keyword">while</span> (tt--) &#123;</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/2063/problem/D&quot;&gt;D. Game With Triangles&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Even Little John needs money to buy a house. Bu</summary>
      
    
    
    
    
    <category term="XCPC" scheme="https://www.lansganbs.cn/tags/XCPC/"/>
    
  </entry>
  
  <entry>
    <title>复现项目时遇到的相关问题汇总</title>
    <link href="https://www.lansganbs.cn/posts/dd7a46fd.html"/>
    <id>https://www.lansganbs.cn/posts/dd7a46fd.html</id>
    <published>2024-01-22T19:43:26.000Z</published>
    <updated>2025-07-02T11:40:03.113Z</updated>
    
    <content type="html"><![CDATA[<ul><li>java:程序包org.aspectj.weaver.reflect不存在</li></ul><p>更新Maven包，并在IDEA中同步所有Maven项目和重新加载所有Maven项目</p><ul><li>aspectjweaver-1.8.13.jar时出错</li></ul><p>右键项目文件夹，在Maven中选择生成源代码并更新文件夹</p><ul><li>base64decoder 找不到符号</li></ul><p>从Java 8开始，应使用java.util.Base64类来处理Base64编码和解码。这个类提供了Base64.Decoder和Base64.Encoder两个嵌套类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java 8及更高版本使用java.util.Base64</span></span><br><span class="line">Base64.<span class="type">Decoder</span> <span class="variable">decoder</span> <span class="operator">=</span> Base64.getDecoder();</span><br><span class="line"><span class="type">byte</span>[] decodedBytes = decoder.decode(encodedString);</span><br><span class="line"></span><br><span class="line">Base64.<span class="type">Encoder</span> <span class="variable">encoder</span> <span class="operator">=</span> Base64.getEncoder();</span><br><span class="line"><span class="type">String</span> <span class="variable">encodedString</span> <span class="operator">=</span> encoder.encodeToString(byteArray);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;java:程序包org.aspectj.weaver.reflect不存在&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更新Maven包，并在IDEA中同步所有Maven项目和重新加载所有Maven项目&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;aspectjweaver-1.8.13.jar</summary>
      
    
    
    
    
    <category term="杂谈" scheme="https://www.lansganbs.cn/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
</feed>
